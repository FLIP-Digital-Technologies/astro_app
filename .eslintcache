[{"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/index.js":"1","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/App.js":"2","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/reportWebVitals.js":"3","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/utils/helper.js":"4","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/utils/PrivateRoute.js":"5","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/index.js":"6","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/store/index.js":"7","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/btc.js":"8","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/user.js":"9","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/payment.js":"10","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/bank.js":"11","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/giftCard.js":"12","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/constants/index.js":"13","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/assets/png/index.js":"14","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/assets/svg/index.js":"15","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Loading/index.js":"16","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/BtcTransactionService.js":"17","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/Referral.js":"18","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/GeneralService.js":"19","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/PaymentService.js":"20","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/BankService.js":"21","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/GiftCardService.js":"22","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/on-boarding/index.js":"23","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/sell-giftcard/index.js":"24","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/sign-in/index.js":"25","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/sign-up/index.js":"26","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/buy-giftcard/index.js":"27","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/coin/index.js":"28","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/landing/index.js":"29","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/about/index.js":"30","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/Verification/index.js":"31","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/rate/index.js":"32","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/bills/index.js":"33","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/transactions/index.js":"34","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/airtime/index.js":"35","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/home/index.js":"36","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/btc/index.js":"37","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/about-rates/index.js":"38","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/profile/index.js":"39","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/settings/index.js":"40","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/index.js":"41","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/FetchInterceptor.js":"42","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/buyGiftCard.js":"43","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/pairTwoPair.js":"44","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/billPayment.js":"45","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/payment.js":"46","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/giftcard.js":"47","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/withdrawal.js":"48","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/btc.js":"49","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/bank.js":"50","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/auth.js":"51","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/history.js":"52","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/configs/AppConfig.js":"53","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/sell-coin/index.js":"54","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/transactions/components.js":"55","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/Auths.js":"56","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/configs/EnvironmentConfig.js":"57","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/layout/index.js":"58","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/button/index.js":"59","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/select/index.js":"60","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/AuthService.js":"61","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/input/index.js":"62","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/layout/landing/index.js":"63","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/layout/dashboard/index.js":"64","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/layout/dashboard/data.js":"65","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/footer/index.js":"66","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/header/index.js":"67","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/header/landingHeader.js":"68","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/header/authHeader.js":"69","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/sell-coin/components.js":"70","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/btc/components.js":"71","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/billPayment.js":"72","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/withdrawals.js":"73","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/home/components.js":"74","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/buyGiftCard.js":"75","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/pairTwoPair.js":"76","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Modals/withdraw-modal-Initial.js":"77","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Modals/transaction-info-modal.js":"78","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/bills/components.js":"79","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Modals/transaction-info-modal-big.js":"80","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/rate/components.js":"81","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/landing/components.js":"82","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/sell-giftcard/components.js":"83","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/on-boarding/components.js":"84","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Modals/index.js":"85","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/BillPayment.js":"86","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/WithdrawalsService.js":"87","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/BuyGiftCard.js":"88","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/PairTwoPairService.js":"89","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Modals/withdrawal-modal-3rd.js":"90","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Modals/withdraw-modal-personal.js":"91","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/buy-coin/index.js":"92","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/upload/index.js":"93","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/buy-coin/components.js":"94","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/upload/upload.js":"95","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Modals/addWalletModal.js":"96","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Modals/addCryptoWallet.js":"97","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/crypto/index.js":"98","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/home/components2.js":"99","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/transactions/fiatTrans.js":"100","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/transactions/cryptoTrans.js":"101","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/transactions/giftCardTrans.js":"102","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/index.js":"103","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/reportWebVitals.js":"104","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/App.js":"105","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/utils/PrivateRoute.js":"106","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/utils/helper.js":"107","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/index.js":"108","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/store/index.js":"109","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/actions/giftCard.js":"110","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/actions/payment.js":"111","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/actions/bank.js":"112","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/actions/user.js":"113","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/actions/btc.js":"114","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/actions/Auths.js":"115","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/configs/AppConfig.js":"116","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/constants/index.js":"117","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/assets/svg/index.js":"118","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/assets/png/index.js":"119","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/Loading/index.js":"120","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/services/GeneralService.js":"121","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/services/PaymentService.js":"122","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/services/BtcTransactionService.js":"123","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/services/BankService.js":"124","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/services/GiftCardService.js":"125","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/services/AuthService.js":"126","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/services/Referral.js":"127","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/configs/EnvironmentConfig.js":"128","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/on-boarding/index.js":"129","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/sign-in/index.js":"130","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/rate/index.js":"131","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/coin/index.js":"132","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/sign-up/index.js":"133","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/profile/index.js":"134","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/home/index.js":"135","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/transactions/index.js":"136","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/Verification/index.js":"137","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/landing/index.js":"138","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/airtime/index.js":"139","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/about-rates/index.js":"140","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/btc/index.js":"141","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/about/index.js":"142","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/bills/index.js":"143","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/buy-giftcard/index.js":"144","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/sell-giftcard/index.js":"145","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/settings/index.js":"146","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/crypto/index.js":"147","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/reducer/index.js":"148","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/services/FetchInterceptor.js":"149","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/sell-giftcard/components.js":"150","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/transactions/components.js":"151","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/actions/buyGiftCard.js":"152","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/Modals/addCryptoWallet.js":"153","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/bills/components.js":"154","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/history.js":"155","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/button/index.js":"156","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/layout/index.js":"157","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/select/index.js":"158","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/input/index.js":"159","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/services/BuyGiftCard.js":"160","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/actions/billPayment.js":"161","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/home/components.js":"162","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/Modals/index.js":"163","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/upload/index.js":"164","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/services/BillPayment.js":"165","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/actions/pairTwoPair.js":"166","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/layout/dashboard/index.js":"167","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/layout/landing/index.js":"168","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/upload/upload.js":"169","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/services/PairTwoPairService.js":"170","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/layout/dashboard/data.js":"171","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/footer/index.js":"172","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/header/index.js":"173","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/header/landingHeader.js":"174","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/header/authHeader.js":"175","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/reducer/buyGiftCard.js":"176","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/reducer/pairTwoPair.js":"177","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/reducer/billPayment.js":"178","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/reducer/payment.js":"179","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/reducer/withdrawal.js":"180","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/reducer/giftcard.js":"181","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/reducer/bank.js":"182","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/reducer/btc.js":"183","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/reducer/auth.js":"184","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/btc/components.js":"185","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/landing/components.js":"186","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/Modals/addWalletModal.js":"187","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/transactions/giftCardTrans.js":"188","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/transactions/fiatTrans.js":"189","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/transactions/cryptoTrans.js":"190","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/Modals/withdraw-modal-Initial.js":"191","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/home/components2.js":"192","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/actions/withdrawals.js":"193","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/on-boarding/components.js":"194","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/rate/components.js":"195","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/buy-coin/index.js":"196","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/sell-coin/index.js":"197","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/Modals/transaction-info-modal.js":"198","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/Modals/withdrawal-modal-3rd.js":"199","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/Modals/withdraw-modal-personal.js":"200","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/services/WithdrawalsService.js":"201","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/Modals/transaction-info-modal-big.js":"202","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/sell-coin/components.js":"203","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/buy-coin/components.js":"204"},{"size":1619,"mtime":1617289183767,"results":"205","hashOfConfig":"206"},{"size":2729,"mtime":1619625712263,"results":"207","hashOfConfig":"206"},{"size":362,"mtime":1617289183778,"results":"208","hashOfConfig":"206"},{"size":18960,"mtime":1619637184725,"results":"209","hashOfConfig":"206"},{"size":655,"mtime":1617289183778,"results":"210","hashOfConfig":"206"},{"size":983,"mtime":1619625712274,"results":"211","hashOfConfig":"206"},{"size":1040,"mtime":1617289183778,"results":"212","hashOfConfig":"206"},{"size":12207,"mtime":1619625712280,"results":"213","hashOfConfig":"206"},{"size":7133,"mtime":1619637153710,"results":"214","hashOfConfig":"206"},{"size":3527,"mtime":1619637138659,"results":"215","hashOfConfig":"206"},{"size":1925,"mtime":1617289183776,"results":"216","hashOfConfig":"206"},{"size":5645,"mtime":1619637148387,"results":"217","hashOfConfig":"206"},{"size":21036,"mtime":1619625712282,"results":"218","hashOfConfig":"206"},{"size":2745,"mtime":1617289183669,"results":"219","hashOfConfig":"206"},{"size":5512,"mtime":1620204051549,"results":"220","hashOfConfig":"206"},{"size":570,"mtime":1617289183764,"results":"221","hashOfConfig":"206"},{"size":5643,"mtime":1619646934473,"results":"222","hashOfConfig":"206"},{"size":654,"mtime":1619625712287,"results":"223","hashOfConfig":"206"},{"size":3885,"mtime":1619625712286,"results":"224","hashOfConfig":"206"},{"size":1062,"mtime":1619625712287,"results":"225","hashOfConfig":"206"},{"size":1125,"mtime":1619625712284,"results":"226","hashOfConfig":"206"},{"size":4296,"mtime":1619625712286,"results":"227","hashOfConfig":"206"},{"size":3813,"mtime":1619625712275,"results":"228","hashOfConfig":"206"},{"size":4402,"mtime":1619637027979,"results":"229","hashOfConfig":"206"},{"size":5449,"mtime":1617289183770,"results":"230","hashOfConfig":"206"},{"size":6258,"mtime":1619625712277,"results":"231","hashOfConfig":"206"},{"size":15536,"mtime":1619636876375,"results":"232","hashOfConfig":"206"},{"size":449,"mtime":1617289183769,"results":"233","hashOfConfig":"206"},{"size":1208,"mtime":1617289183769,"results":"234","hashOfConfig":"206"},{"size":2675,"mtime":1617289183768,"results":"235","hashOfConfig":"206"},{"size":2742,"mtime":1619625712271,"results":"236","hashOfConfig":"206"},{"size":1834,"mtime":1617289183770,"results":"237","hashOfConfig":"206"},{"size":1607,"mtime":1619625712271,"results":"238","hashOfConfig":"206"},{"size":3330,"mtime":1619625712279,"results":"239","hashOfConfig":"206"},{"size":2252,"mtime":1617289183768,"results":"240","hashOfConfig":"206"},{"size":31178,"mtime":1620205542216,"results":"241","hashOfConfig":"206"},{"size":7611,"mtime":1619636332217,"results":"242","hashOfConfig":"206"},{"size":8321,"mtime":1617289183768,"results":"243","hashOfConfig":"206"},{"size":5793,"mtime":1617289183770,"results":"244","hashOfConfig":"206"},{"size":24545,"mtime":1619625712276,"results":"245","hashOfConfig":"206"},{"size":912,"mtime":1617289183777,"results":"246","hashOfConfig":"206"},{"size":2661,"mtime":1619625712285,"results":"247","hashOfConfig":"206"},{"size":4204,"mtime":1617289183777,"results":"248","hashOfConfig":"206"},{"size":4940,"mtime":1619625712283,"results":"249","hashOfConfig":"206"},{"size":3297,"mtime":1617289183777,"results":"250","hashOfConfig":"206"},{"size":2994,"mtime":1619625712283,"results":"251","hashOfConfig":"206"},{"size":4949,"mtime":1619625712283,"results":"252","hashOfConfig":"206"},{"size":2828,"mtime":1617289183777,"results":"253","hashOfConfig":"206"},{"size":10586,"mtime":1619625712283,"results":"254","hashOfConfig":"206"},{"size":3117,"mtime":1617289183777,"results":"255","hashOfConfig":"206"},{"size":7765,"mtime":1619625712282,"results":"256","hashOfConfig":"206"},{"size":84,"mtime":1617289183777,"results":"257","hashOfConfig":"206"},{"size":362,"mtime":1617289183767,"results":"258","hashOfConfig":"206"},{"size":1282,"mtime":1617289183770,"results":"259","hashOfConfig":"206"},{"size":53600,"mtime":1619625712278,"results":"260","hashOfConfig":"206"},{"size":10975,"mtime":1619637131952,"results":"261","hashOfConfig":"206"},{"size":776,"mtime":1619625712270,"results":"262","hashOfConfig":"206"},{"size":112,"mtime":1617289183766,"results":"263","hashOfConfig":"206"},{"size":487,"mtime":1617289183765,"results":"264","hashOfConfig":"206"},{"size":2186,"mtime":1617831584506,"results":"265","hashOfConfig":"206"},{"size":3200,"mtime":1619625712284,"results":"266","hashOfConfig":"206"},{"size":2825,"mtime":1619625712269,"results":"267","hashOfConfig":"206"},{"size":298,"mtime":1617289183766,"results":"268","hashOfConfig":"206"},{"size":5209,"mtime":1620205024675,"results":"269","hashOfConfig":"206"},{"size":2316,"mtime":1619625712270,"results":"270","hashOfConfig":"206"},{"size":2664,"mtime":1617289183765,"results":"271","hashOfConfig":"206"},{"size":114,"mtime":1617289183766,"results":"272","hashOfConfig":"206"},{"size":2170,"mtime":1620205421905,"results":"273","hashOfConfig":"206"},{"size":1124,"mtime":1617289183765,"results":"274","hashOfConfig":"206"},{"size":4814,"mtime":1617289183770,"results":"275","hashOfConfig":"206"},{"size":24916,"mtime":1619636846092,"results":"276","hashOfConfig":"206"},{"size":3614,"mtime":1617289183776,"results":"277","hashOfConfig":"206"},{"size":3615,"mtime":1619625712282,"results":"278","hashOfConfig":"206"},{"size":26613,"mtime":1619636900235,"results":"279","hashOfConfig":"206"},{"size":4720,"mtime":1617289183776,"results":"280","hashOfConfig":"206"},{"size":5025,"mtime":1619625712281,"results":"281","hashOfConfig":"206"},{"size":2099,"mtime":1619625712267,"results":"282","hashOfConfig":"206"},{"size":2202,"mtime":1619625712267,"results":"283","hashOfConfig":"206"},{"size":3653,"mtime":1619625712271,"results":"284","hashOfConfig":"206"},{"size":16650,"mtime":1617289183765,"results":"285","hashOfConfig":"206"},{"size":11370,"mtime":1617289183770,"results":"286","hashOfConfig":"206"},{"size":6508,"mtime":1620205174236,"results":"287","hashOfConfig":"206"},{"size":34022,"mtime":1619637020935,"results":"288","hashOfConfig":"206"},{"size":15746,"mtime":1619625712275,"results":"289","hashOfConfig":"206"},{"size":4724,"mtime":1617289183765,"results":"290","hashOfConfig":"206"},{"size":1147,"mtime":1619625712285,"results":"291","hashOfConfig":"206"},{"size":1414,"mtime":1619625712287,"results":"292","hashOfConfig":"206"},{"size":1976,"mtime":1619625712285,"results":"293","hashOfConfig":"206"},{"size":1706,"mtime":1619625712287,"results":"294","hashOfConfig":"206"},{"size":9490,"mtime":1619625712268,"results":"295","hashOfConfig":"206"},{"size":5392,"mtime":1619636801759,"results":"296","hashOfConfig":"206"},{"size":2333,"mtime":1617289183768,"results":"297","hashOfConfig":"206"},{"size":36,"mtime":1617289183767,"results":"298","hashOfConfig":"206"},{"size":5653,"mtime":1617289183768,"results":"299","hashOfConfig":"206"},{"size":1421,"mtime":1617289183767,"results":"300","hashOfConfig":"206"},{"size":2852,"mtime":1619625712266,"results":"301","hashOfConfig":"206"},{"size":2884,"mtime":1619625712266,"results":"302","hashOfConfig":"206"},{"size":6365,"mtime":1619693136385,"results":"303","hashOfConfig":"206"},{"size":7691,"mtime":1619625712273,"results":"304","hashOfConfig":"206"},{"size":9908,"mtime":1619625712279,"results":"305","hashOfConfig":"206"},{"size":20876,"mtime":1619637036869,"results":"306","hashOfConfig":"206"},{"size":5697,"mtime":1619625712279,"results":"307","hashOfConfig":"206"},{"size":1581,"mtime":1620291774709,"results":"308","hashOfConfig":"309"},{"size":362,"mtime":1617289183778,"results":"310","hashOfConfig":"309"},{"size":2729,"mtime":1619625712263,"results":"311","hashOfConfig":"309"},{"size":655,"mtime":1617289183778,"results":"312","hashOfConfig":"309"},{"size":19431,"mtime":1621342006656,"results":"313","hashOfConfig":"309"},{"size":983,"mtime":1619625712274,"results":"314","hashOfConfig":"309"},{"size":1040,"mtime":1617289183778,"results":"315","hashOfConfig":"309"},{"size":5645,"mtime":1620847736043,"results":"316","hashOfConfig":"309"},{"size":3527,"mtime":1619637138659,"results":"317","hashOfConfig":"309"},{"size":1925,"mtime":1617289183776,"results":"318","hashOfConfig":"309"},{"size":7155,"mtime":1621351818222,"results":"319","hashOfConfig":"309"},{"size":12255,"mtime":1621336639003,"results":"320","hashOfConfig":"309"},{"size":11004,"mtime":1621020186100,"results":"321","hashOfConfig":"309"},{"size":362,"mtime":1617289183767,"results":"322","hashOfConfig":"309"},{"size":21036,"mtime":1619625712282,"results":"323","hashOfConfig":"309"},{"size":5661,"mtime":1620649179328,"results":"324","hashOfConfig":"309"},{"size":3580,"mtime":1621351106156,"results":"325","hashOfConfig":"309"},{"size":570,"mtime":1617289183764,"results":"326","hashOfConfig":"309"},{"size":3904,"mtime":1620762411041,"results":"327","hashOfConfig":"309"},{"size":1062,"mtime":1619625712287,"results":"328","hashOfConfig":"309"},{"size":5661,"mtime":1621336164873,"results":"329","hashOfConfig":"309"},{"size":1125,"mtime":1619625712284,"results":"330","hashOfConfig":"309"},{"size":4360,"mtime":1620847727187,"results":"331","hashOfConfig":"309"},{"size":3229,"mtime":1621020560763,"results":"332","hashOfConfig":"309"},{"size":654,"mtime":1619625712287,"results":"333","hashOfConfig":"309"},{"size":725,"mtime":1620334138122,"results":"334","hashOfConfig":"309"},{"size":3813,"mtime":1619625712275,"results":"335","hashOfConfig":"309"},{"size":5596,"mtime":1621086464402,"results":"336","hashOfConfig":"309"},{"size":1834,"mtime":1617289183770,"results":"337","hashOfConfig":"309"},{"size":449,"mtime":1617289183769,"results":"338","hashOfConfig":"309"},{"size":6390,"mtime":1621351797492,"results":"339","hashOfConfig":"309"},{"size":5793,"mtime":1617289183770,"results":"340","hashOfConfig":"309"},{"size":43509,"mtime":1622012363164,"results":"341","hashOfConfig":"309"},{"size":5715,"mtime":1621936600874,"results":"342","hashOfConfig":"309"},{"size":2742,"mtime":1619625712271,"results":"343","hashOfConfig":"309"},{"size":1208,"mtime":1617289183769,"results":"344","hashOfConfig":"309"},{"size":2252,"mtime":1617289183768,"results":"345","hashOfConfig":"309"},{"size":8321,"mtime":1617289183768,"results":"346","hashOfConfig":"309"},{"size":7628,"mtime":1621353714885,"results":"347","hashOfConfig":"309"},{"size":2675,"mtime":1617289183768,"results":"348","hashOfConfig":"309"},{"size":2855,"mtime":1621936638180,"results":"349","hashOfConfig":"309"},{"size":16059,"mtime":1621329969712,"results":"350","hashOfConfig":"309"},{"size":5226,"mtime":1622018652138,"results":"351","hashOfConfig":"309"},{"size":25143,"mtime":1621413113821,"results":"352","hashOfConfig":"309"},{"size":6365,"mtime":1619693136385,"results":"353","hashOfConfig":"309"},{"size":912,"mtime":1617289183777,"results":"354","hashOfConfig":"309"},{"size":2681,"mtime":1621352837528,"results":"355","hashOfConfig":"309"},{"size":36218,"mtime":1621352844609,"results":"356","hashOfConfig":"309"},{"size":53734,"mtime":1620771500121,"results":"357","hashOfConfig":"309"},{"size":4720,"mtime":1617289183776,"results":"358","hashOfConfig":"309"},{"size":2884,"mtime":1619625712266,"results":"359","hashOfConfig":"309"},{"size":3653,"mtime":1619625712271,"results":"360","hashOfConfig":"309"},{"size":84,"mtime":1617289183777,"results":"361","hashOfConfig":"309"},{"size":487,"mtime":1617289183765,"results":"362","hashOfConfig":"309"},{"size":112,"mtime":1617289183766,"results":"363","hashOfConfig":"309"},{"size":2186,"mtime":1617831584506,"results":"364","hashOfConfig":"309"},{"size":2825,"mtime":1619625712269,"results":"365","hashOfConfig":"309"},{"size":2031,"mtime":1620725817625,"results":"366","hashOfConfig":"309"},{"size":3614,"mtime":1617289183776,"results":"367","hashOfConfig":"309"},{"size":26776,"mtime":1621423933030,"results":"368","hashOfConfig":"309"},{"size":4724,"mtime":1617289183765,"results":"369","hashOfConfig":"309"},{"size":36,"mtime":1617289183767,"results":"370","hashOfConfig":"309"},{"size":1298,"mtime":1620771424129,"results":"371","hashOfConfig":"309"},{"size":5094,"mtime":1621328775857,"results":"372","hashOfConfig":"309"},{"size":6615,"mtime":1621940155623,"results":"373","hashOfConfig":"309"},{"size":298,"mtime":1617289183766,"results":"374","hashOfConfig":"309"},{"size":1459,"mtime":1620642322695,"results":"375","hashOfConfig":"309"},{"size":1706,"mtime":1619625712287,"results":"376","hashOfConfig":"309"},{"size":2372,"mtime":1621171352019,"results":"377","hashOfConfig":"309"},{"size":2670,"mtime":1621086628004,"results":"378","hashOfConfig":"309"},{"size":114,"mtime":1617289183766,"results":"379","hashOfConfig":"309"},{"size":2258,"mtime":1621086219033,"results":"380","hashOfConfig":"309"},{"size":1124,"mtime":1617289183765,"results":"381","hashOfConfig":"309"},{"size":4204,"mtime":1617289183777,"results":"382","hashOfConfig":"309"},{"size":4940,"mtime":1619625712283,"results":"383","hashOfConfig":"309"},{"size":3341,"mtime":1621351964130,"results":"384","hashOfConfig":"309"},{"size":2994,"mtime":1619625712283,"results":"385","hashOfConfig":"309"},{"size":2828,"mtime":1617289183777,"results":"386","hashOfConfig":"309"},{"size":4949,"mtime":1620847809580,"results":"387","hashOfConfig":"309"},{"size":3163,"mtime":1621351951444,"results":"388","hashOfConfig":"309"},{"size":10784,"mtime":1621352012392,"results":"389","hashOfConfig":"309"},{"size":8032,"mtime":1621351901149,"results":"390","hashOfConfig":"309"},{"size":25692,"mtime":1621351581096,"results":"391","hashOfConfig":"309"},{"size":6518,"mtime":1621086701449,"results":"392","hashOfConfig":"309"},{"size":2852,"mtime":1619625712266,"results":"393","hashOfConfig":"309"},{"size":5685,"mtime":1620675405575,"results":"394","hashOfConfig":"309"},{"size":10743,"mtime":1621241482860,"results":"395","hashOfConfig":"309"},{"size":20876,"mtime":1619637036869,"results":"396","hashOfConfig":"309"},{"size":2110,"mtime":1621022117220,"results":"397","hashOfConfig":"309"},{"size":7685,"mtime":1621423939720,"results":"398","hashOfConfig":"309"},{"size":3615,"mtime":1619625712282,"results":"399","hashOfConfig":"309"},{"size":17073,"mtime":1621939699118,"results":"400","hashOfConfig":"309"},{"size":11370,"mtime":1617289183770,"results":"401","hashOfConfig":"309"},{"size":2333,"mtime":1617289183768,"results":"402","hashOfConfig":"309"},{"size":1282,"mtime":1617289183770,"results":"403","hashOfConfig":"309"},{"size":2202,"mtime":1619625712267,"results":"404","hashOfConfig":"309"},{"size":9298,"mtime":1620724491094,"results":"405","hashOfConfig":"309"},{"size":5534,"mtime":1621245602429,"results":"406","hashOfConfig":"309"},{"size":2131,"mtime":1621245754649,"results":"407","hashOfConfig":"309"},{"size":16756,"mtime":1620771153182,"results":"408","hashOfConfig":"309"},{"size":4814,"mtime":1617289183770,"results":"409","hashOfConfig":"309"},{"size":5653,"mtime":1617289183768,"results":"410","hashOfConfig":"309"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},"1k71w5v",{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"464","messages":"465","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"466","usedDeprecatedRules":"413"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"469","messages":"470","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"487","usedDeprecatedRules":"413"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"492","messages":"493","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"494","messages":"495","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"498","messages":"499","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"500","messages":"501","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"506","messages":"507","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"508","messages":"509","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"510","messages":"511","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"512","messages":"513","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"514","messages":"515","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"516","messages":"517","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"518","messages":"519","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"522","messages":"523","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"524","messages":"525","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"526","messages":"527","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"528","messages":"529","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"530","messages":"531","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"532","messages":"533","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"534","messages":"535","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"536","messages":"537","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"538","messages":"539","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"540","messages":"541","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"542","usedDeprecatedRules":"413"},{"filePath":"543","messages":"544","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"545","messages":"546","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"547","messages":"548","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"549","messages":"550","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"551","usedDeprecatedRules":"413"},{"filePath":"552","messages":"553","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"554","messages":"555","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"556"},{"filePath":"557","messages":"558","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"559","usedDeprecatedRules":"413"},{"filePath":"560","messages":"561","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"562","messages":"563","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"564","messages":"565","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"566","messages":"567","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"568","messages":"569","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"570","messages":"571","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"572","messages":"573","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"574","messages":"575","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"576","messages":"577","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"578","messages":"579","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"580","messages":"581","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"584","messages":"585","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"586","messages":"587","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"588","messages":"589","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"590","messages":"591","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"592","messages":"593","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"594","messages":"595","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"596","messages":"597","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"598","messages":"599","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"600","messages":"601","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"602","messages":"603","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"604","messages":"605","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"606","messages":"607","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"608","messages":"609","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"610","messages":"611","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"612","messages":"613","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"614","messages":"615","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"413"},{"filePath":"616","messages":"617","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"618","usedDeprecatedRules":"413"},{"filePath":"619","messages":"620","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"621","usedDeprecatedRules":"413"},{"filePath":"622","messages":"623","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"624","usedDeprecatedRules":"413"},{"filePath":"625","messages":"626","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"627","usedDeprecatedRules":"628"},"1mf4jku",{"filePath":"629","messages":"630","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"631","messages":"632","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"633","messages":"634","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"635","messages":"636","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"637","messages":"638","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"639","messages":"640","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"641","messages":"642","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"643","messages":"644","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"645","messages":"646","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"647","messages":"648","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"649","messages":"650","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"651","messages":"652","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"653","messages":"654","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"655","messages":"656","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"657","messages":"658","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"659","messages":"660","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"661","messages":"662","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"663","messages":"664","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"665","messages":"666","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"667","messages":"668","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"669","messages":"670","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"671","messages":"672","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"673","messages":"674","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"675","messages":"676","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"677","messages":"678","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"679","messages":"680","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"681","messages":"682","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"683","usedDeprecatedRules":"628"},{"filePath":"684","messages":"685","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"686","messages":"687","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"688","messages":"689","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"690","messages":"691","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"692","messages":"693","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"694","messages":"695","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"696","messages":"697","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"698","messages":"699","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"700","messages":"701","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"702","messages":"703","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"704","messages":"705","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"706","usedDeprecatedRules":"628"},{"filePath":"707","messages":"708","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"709","messages":"710","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"711","messages":"712","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"713","usedDeprecatedRules":"628"},{"filePath":"714","messages":"715","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"716","messages":"717","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"718","usedDeprecatedRules":"628"},{"filePath":"719","messages":"720","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"721","messages":"722","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"723","messages":"724","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"725","messages":"726","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"727","usedDeprecatedRules":"628"},{"filePath":"728","messages":"729","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"730","messages":"731","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"732","messages":"733","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"734","messages":"735","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"736","messages":"737","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"738","messages":"739","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"740","messages":"741","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"742","messages":"743","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"744","messages":"745","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"746","messages":"747","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"748","messages":"749","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"750","messages":"751","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"752","messages":"753","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"754","messages":"755","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"756","messages":"757","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"758","messages":"759","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"760","messages":"761","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"762","messages":"763","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"764","messages":"765","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"766","messages":"767","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"768","messages":"769","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"770","usedDeprecatedRules":"628"},{"filePath":"771","messages":"772","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"773","messages":"774","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"775","messages":"776","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"777","usedDeprecatedRules":"628"},{"filePath":"778","messages":"779","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"780","messages":"781","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"782","messages":"783","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"784","messages":"785","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"786","messages":"787","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"788","messages":"789","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"790","messages":"791","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"792","messages":"793","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"794","messages":"795","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"796","messages":"797","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"798","messages":"799","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"800","usedDeprecatedRules":"628"},{"filePath":"801","messages":"802","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"803","messages":"804","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"805","messages":"806","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"807","usedDeprecatedRules":"628"},{"filePath":"808","messages":"809","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"810","usedDeprecatedRules":"628"},{"filePath":"811","messages":"812","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"621","usedDeprecatedRules":"628"},{"filePath":"813","messages":"814","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"815","messages":"816","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"817","messages":"818","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"819","messages":"820","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"821","messages":"822","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"823","messages":"824","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"825","messages":"826","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"827","messages":"828","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"829","messages":"830","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"831","usedDeprecatedRules":"628"},{"filePath":"832","messages":"833","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"834","usedDeprecatedRules":"628"},{"filePath":"835","messages":"836","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"837","messages":"838","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"839","messages":"840","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},{"filePath":"841","messages":"842","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"628"},"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/index.js",[],["843","844"],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/App.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/reportWebVitals.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/utils/helper.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/utils/PrivateRoute.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/store/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/btc.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/user.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/payment.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/bank.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/giftCard.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/constants/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/assets/png/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/assets/svg/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Loading/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/BtcTransactionService.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/Referral.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/GeneralService.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/PaymentService.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/BankService.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/GiftCardService.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/on-boarding/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/sell-giftcard/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/sign-in/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/sign-up/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/buy-giftcard/index.js",["845"],"import React, { useState, useEffect, useCallback } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Row, Col, Card, Drawer, Typography, Badge, Modal } from \"antd\";\nimport {ExclamationCircleOutlined} from \"@ant-design/icons\"\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport _ from \"lodash\";\n\nimport { DashboardLayout } from \"../../components/layout\";\nimport Button from \"../../components/button\";\nimport Select from \"../../components/select\";\nimport Input from \"../../components/input\";\nimport styles from \"../styles.module.scss\";\nimport {\n  EmptyEntryWithTitle,\n  SuccessfulModal,\n} from \"../transactions/components\";\nimport {\n  getBuyCardsByCountries,\n  getBuyCardsBySearch,\n  getBuyCardsCardDetail,\n  initialBuyGiftCard,\n} from \"../../redux/actions/buyGiftCard\";\nimport { Money } from \"../../utils/helper\";\nimport { getBTCWalletDetails } from \"../../redux/actions/btc\";\n\nfunction getImgUrl(data) {\n  return `https://www.bitrefill.com/content/cn/b_rgb%3A${\n    (data?.logoBackground && data?.logoBackground?.replace(\"#\", \"\")) || \"FFFFFF\"\n  }%2Cc_pad%2Ch_212%2Cw_350/v${data?.logoVersion}/${data?.logoImage}.jpg`;\n}\n\nconst { Title, Text } = Typography;\nconst { confirm } = Modal;\n\nconst BuyGiftCard = (props) => {\n  // eslint-disable-next-line\n  const delayedQuery = useCallback(\n    _.debounce(\n      (q) => props.getBuyCardsBySearch({ country: \"\", searchQuery: q }),\n      500\n    ),\n    []\n  );\n  let location = useLocation();\n  const { pathname } = location;\n  const history = useHistory();\n  const [active, setActive] = useState(null);\n  const [open, setOpen] = useState(false);\n  const [state, setState] = useState({\n    country: \"usa\",\n    searchQuery: \"\",\n  });\n  const [card, setCard] = useState({});\n  useEffect(() => {\n    const url = new URL(window.location.href);\n    const slug = url.searchParams.get(\"slug\");\n    if (slug) {\n      props.getSingleCard({ card: slug });\n      setActive(true);\n    }\n    // eslint-disable-next-line\n  }, []);\n  useEffect(() => {\n    props.getBuyCardsByCountries();\n    props.getBalance()\n    props.getBuyCardsBySearch({ searchQuery: \"\", country: \"usa\" });\n    // eslint-disable-next-line\n  }, []);\n  function createMarkup() {\n    return { __html: props?.buyGiftCardDetails?.descriptions?.en || \"\" };\n  }\n  function extraInfo() {\n    return { __html: props?.buyGiftCardDetails?.extraInfo || \"\" };\n  }\n\n  const showPromiseConfirm = () => {\n    \n\n    confirm({\n      title: `Purchase of Gift card`,\n      icon: <ExclamationCircleOutlined style={{ color: \"#19a9de\" }} />,\n      content: `Confirm the Purchase of ${Money(card?.cardValue, props?.buyGiftCardDetails?.currency)} ${props?.buyGiftCardDetails?.name} Gift card`,\n      onOk() {\n        return handleSubmit();\n      },\n      onCancel() {},\n    });\n  };\n\n  const handleSubmit = async () => {\n    const payload = {\n      cardSlug: props?.buyGiftCardDetails?.slug,\n      cardCurrency: props?.buyGiftCardDetails?.currency,\n      cardValue: card.cardValue,\n      email: card.email || props?.user?.email,\n      amount: card.amount === \"null\" ? null : card.amount,\n      quantity: parseInt(card.quantity ),\n      isCustom: false,\n      fiatWalletId: card.walletId,\n    };\n    \n    await props.buyGiftCard(payload);\n    setOpen(true);\n    setActive(false);\n    setCard({});\n  };\n  return (\n    <DashboardLayout>\n      {open && props.initBuyGiftCardTransaction && (\n        <SuccessfulModal\n          title={\n            `Your ${props?.buyGiftCardDetails?.name} (${props?.buyGiftCardDetails?.currency}) card purchase has been received. Please check your mail and the 'Transactions' tab for trade progress.`\n          }\n          onClick={() => history.push(\"/app\")}\n          walletBalance={props.balance}\n        />\n      )}\n      <div className={styles.gitcard}>\n        <div style={{ marginLeft: 20, marginRight: 20 }}>\n          <div>\n            <Row>\n              <span\n                className={styles.gitcard__top__title}\n                style={{ marginLeft: 0 }}\n              >\n                Buy Gift cards{\" \"}\n              </span>\n            </Row>\n            <Row\n              style={{\n                marginTop: 10,\n                display: \"flex\",\n                flexWrap: \"wrap\",\n                justifyContent: \"space-between\",\n                alignItems: \"flex-end\",\n              }}\n            >\n              <Col\n                xs={24}\n                sm={24}\n                md={6}\n                lg={4}\n                xl={4}\n                className=\"gutter-row ml-4\"\n                span={6}\n              >\n                <Input\n                  name=\"search\"\n                  value={state.searchQuery}\n                  onChange={(e) => {\n                    delayedQuery(e.target.value);\n                    setState((state) => ({\n                      country: \"\",\n                      searchQuery: e.target.value,\n                    }));\n                  }}\n                  label=\"Search card\"\n                  placeholder=\"Steam\"\n                />\n              </Col>\n              <Col\n                xs={24}\n                sm={24}\n                md={6}\n                lg={6}\n                xl={6}\n                className=\"gutter-row ml-4\"\n                span={6}\n              >\n                <Select\n                  label=\"Select Country\"\n                  value={state.country}\n                  onSelect={(value) => {\n                    setState((state) => ({\n                      ...state,\n                      country: value,\n                    }));\n                    props.getBuyCardsBySearch({ ...state, country: value });\n                  }}\n                  name=\"country\"\n                  options={\n                    props.buyCardCountries &&\n                    props.buyCardCountries.map((item) => ({\n                      value: item.alpha2,\n                      render: (\n                        <div\n                          className={styles.countryOption}\n                          style={{ display: \"flex\", alignItems: \"center\" }}\n                        >\n                          <span>\n                            {item.icon}&emsp;{item.name}\n                          </span>\n                        </div>\n                      ),\n                    }))\n                  }\n                />\n              </Col>\n            </Row>\n          </div>\n          <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n            {props.buyGiftCards && props.buyGiftCards.length < 1 ? (\n              <div style={{ width: \"100%\" }}>\n                <EmptyEntryWithTitle title=\"GiftCard\" action={false} />\n              </div>\n            ) : (\n              props.buyGiftCards &&\n              props.buyGiftCards.map((item, key) => {\n                return (\n                  <Col\n                    key={key}\n                    xs={24}\n                    sm={24}\n                    md={12}\n                    lg={8}\n                    xl={6}\n                    className=\"gutter-row\"\n                    style={{ marginBottom: 20 }}\n                  >\n                    <Badge.Ribbon\n                      color={item.outOfStock ? \"#f50\" : \"\"}\n                      text={item.outOfStock ? \"Out Of Stock\" : \"Available\"}\n                    >\n                      <Card\n                        hoverable\n                        bordered={false}\n                        onClick={\n                          item?.outOfStock\n                            ? () => {}\n                            : () => {\n                                props.getSingleCard({ card: item.slug });\n                                history.push(`${pathname}?slug=${item.slug}`);\n                                setActive(true);\n                              }\n                        }\n                        style={{ width: \"100%\", border: \"1px solid #00000026\" }}\n                        cover={\n                          <img\n                            alt={\"card\" + key}\n                            style={\n                              item.logoNoMargin\n                                ? {\n                                    width: \"100%\",\n                                    height: 200,\n                                    backgroundColor: item.logoBackground,\n                                  }\n                                : {\n                                    width: \"100%\",\n                                    height: 200,\n                                    padding: \"30px\",\n                                    backgroundColor: item.logoBackground,\n                                  }\n                            }\n                            src={getImgUrl(item)}\n                          />\n                        }\n                      >\n                        <p\n                          style={{\n                            margin: 0,\n                            textAlign: \"center\",\n                            fontSize: \"1.3em\",\n                          }}\n                        >\n                          <strong>\n                            <p>{item.name}</p>\n                          </strong>\n                        </p>\n                      </Card>\n                    </Badge.Ribbon>\n                  </Col>\n                );\n              })\n            )}\n          </Row>\n        </div>\n        {active && (\n          <Drawer\n            title={state?.title}\n            width={\"60vw\"}\n            placement=\"right\"\n            onClose={() => {\n              setActive(false);\n              history.push(`${pathname}`);\n            }}\n            visible={props.buyGiftCardDetails ? active : false}\n            style={{ width: \"100vw\" }}\n          >\n            <div\n              className={styles.sellPage}\n              style={{\n                alignItems: \"center\",\n                flexDirection: \"column\",\n                margin: \"auto\",\n                maxWidth: 900,\n              }}\n            >\n              <Title level={3}>\n                {props?.buyGiftCardDetails?.name} (\n                {props?.buyGiftCardDetails?.currency})\n              </Title>\n              <img\n                alt={\"card\"}\n                style={\n                  props?.buyGiftCardDetails?.logoNoMargin\n                    ? {\n                        width: 300,\n                        height: 200,\n                        marginTop: 20,\n                        marginBottom: 20,\n                        boxShadow: \"-3px 4px 20px #00000026\",\n                        backgroundColor:\n                          props?.buyGiftCardDetails?.logoBackground,\n                      }\n                    : {\n                        width: 300,\n                        height: 200,\n                        marginTop: 20,\n                        marginBottom: 20,\n                        padding: \"30px\",\n                        boxShadow: \"-3px 4px 20px #00000026\",\n                        backgroundColor:\n                          props?.buyGiftCardDetails?.logoBackground,\n                      }\n                }\n                src={getImgUrl(props?.buyGiftCardDetails)}\n              />\n              <div style={{ marginTop: 30, marginBottom: 30 }}>\n                <Text>\n                  <div dangerouslySetInnerHTML={createMarkup()} />\n                </Text>\n              </div>\n              <div>\n                {props?.balance?.fiatWallets && (<Select\n                  labelClass={styles.largeMarginLabel}\n                  label=\"Select Wallet\"\n                  value={card.referenceCurrency}\n                  onSelect={(value) => {\n                    setCard((card) => ({\n                      ...card,\n                      referenceCurrency: value.Currency.code,\n                      walletId:value.id\n                    }));\n                  }}\n                  name=\"wallet\"\n                  options={props.balance.fiatWallets.map((item)=>({\n                    render:`${item.Currency.code}`,\n                    value:item\n                  }))}\n                />)}\n                <Input\n                  className={`${styles.input}`}\n                  value={card.quantity}\n                  label=\"Quantity\"\n                  placeholder=\"minimum is 1\"\n                  labelClass={styles.largeMarginLabel}\n                  onChange={(e) => {\n                    // console.log('user ni', props.user)\n                    setCard((card) => ({\n                      ...card,\n                      quantity: e.target.value,\n                    }));\n                  }}\n                  type=\"number\"\n                />\n                <Input\n                  className={`${styles.input}`}\n                  defaultValue={props?.user?.email}\n                  value={card.email}\n                  label=\"Email\"\n                  placeholder=\"Enter the email to send gift card to\"\n                  labelClass={styles.largeMarginLabel}\n                  onChange={(e) => {\n                    setCard((card) => ({\n                      ...card,\n                      email: e.target.value,\n                    }));\n                  }}\n                  type=\"email\"\n                />\n                <Select\n                  labelClass={styles.largeMarginLabel}\n                  hintClass={styles.largeMarginHint}\n                  label=\"Select amount\"\n                  value={`${card.cardValue}.${card.amount}`}\n                  name=\"amount\"\n                  onSelect={(value) =>\n                    setCard((card) => ({\n                      ...card,\n                      cardValue: value?.split(\".\")[0],\n                      amount: value?.split(\".\")[1],\n                    }))\n                  }\n                  options={props?.buyGiftCardDetails?.packages.map((item) => ({\n                    render: `${props?.buyGiftCardDetails?.currency} ${\n                      item.value\n                    } - Price: ${Money(item.usdPrice, \"USD\")}`,\n                    value: `${item.value}.${item.amount}`,\n                  }))}\n                  hint={<p dangerouslySetInnerHTML={extraInfo()} />}\n                />\n                <Button\n                  className={`${styles.gitcard__form__body__input}`}\n                  text=\"Buy\"\n                  form=\"full\"\n                  disabled={\n                    card.quantity == 0 ||\n                    !card.quantity ||\n                    !card.amount ||\n                    !card.cardValue ||\n                    !card.referenceCurrency\n                  }\n                  onClick={() => showPromiseConfirm()}\n                />\n              </div>\n            </div>\n          </Drawer>\n        )}\n      </div>\n    </DashboardLayout>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  user: state.user.user,\n  balance: state.btc.balance,\n  buyCardCountries: state.buyGiftCard.buyCardCountries,\n  buyGiftCards: state.buyGiftCard.buyGiftCards,\n  buyGiftCardDetails: state.buyGiftCard.buyGiftCardDetails,\n  initBuyGiftCardTransaction: state.buyGiftCard.initBuyGiftCardTransaction,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getBuyCardsByCountries: () => {\n    dispatch(getBuyCardsByCountries());\n  },\n  getBuyCardsBySearch: (data) => {\n    dispatch(getBuyCardsBySearch(data));\n  },\n  getSingleCard: (data) => {\n    dispatch(getBuyCardsCardDetail(data));\n  },\n  buyGiftCard: (data) => {\n    dispatch(initialBuyGiftCard(data));\n  },\n  getBalance: () => {\n    dispatch(getBTCWalletDetails());\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BuyGiftCard);\n","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/coin/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/landing/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/about/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/Verification/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/rate/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/bills/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/transactions/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/airtime/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/home/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/btc/index.js",["846","847"],"import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\n// import { DashboardLayout } from \"../../components/layout\";\nimport {\n  ArrowLeftOutlined,\n  DownloadOutlined,\n  UploadOutlined,\n} from \"@ant-design/icons\";\nimport {\n  SellSection,\n  BuySection,\n  SendSection,\n  RecieveSection,\n} from \"./components\";\nimport styles from \"../styles.module.scss\";\nimport {\n  getBTCCurrentMarketTicker,\n  initialBTCBuyTransaction,\n  receiveBTCIntoWallet,\n  initialBTCSellTransaction,\n  initialBTCSellToExternalWalletTransaction,\n} from \"../../redux/actions/btc\";\nimport { getUserWallets } from \"../../redux/actions/Auths\";\nimport * as SVG from \"../../assets/svg\";\n\nconst BuyCoin = ({\n  active,\n  handleBack,\n  getBTCRates,\n  balance,\n  btcRates,\n  buyCoins,\n  buyBTC,\n  btcWalletAddress = \"\",\n  receiveBTC,\n  loading,\n  sellCoins,\n  sellBTC,\n  sellCoinsExternal,\n  sellBTCExternal,\n  fiatWallets,\n}) => {\n  const [state, setState] = useState({\n    btc: 0,\n    usd: 0,\n    ngn: 0,\n    ghs: 0,\n    walletBalance: 0,\n    creditCoinsWalletId:active.id\n  });\n  const [mode, setMode] = useState(\"buy\");\n  React.useEffect(() => {\n    const interval = setInterval(async () => {\n      getBTCRates({coin:active.Currency.code});\n    }, 60000);\n    return () => clearInterval(interval);\n  }, [getBTCRates]);\n  React.useEffect(() => {\n    receiveBTC();\n    getBTCRates({coin:active.Currency.code});\n  }, [receiveBTC, getBTCRates]);\n  return (\n    <>\n      <div className={styles.gitcard__form}>\n        <div\n          className={styles.gitcard__form__holder}\n          style={{ alignItems: \"flex-start\" }}\n        >\n          <div onClick={handleBack} className={styles.gitcard__form__link}>\n            <SVG.ArrowLeft /> {active.Currency.name}\n          </div>\n          <div\n            className={styles.gitcard__form__body__image}\n            style={{\n              border: \"1px solid #fff\",\n              // boxShadow: \"-3px 4px 20px #00000026\",\n              position: \"relative\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            {active.icon}\n          </div>\n        </div>\n        {/* <div onClick={handleBack} className={styles.gitcard__form__link}>\n     <SVG.ArrowLeft /> Bitcoin\n     </div> */}\n        {/* <span className={styles.gitcard__top__title}></span> */}\n        <br />\n        <br />\n        <div className={styles.sellPage}>\n          <div className={styles.sellPage__left}>\n            <div className={styles.sellPage__select}>\n              <div\n                onClick={() => {\n                  setMode(\"buy\");\n                  setState({\n                    ...state,\n                    btc: 0,\n                    usd: 0,\n                    ngn: 0,\n                    ghs: 0,\n                    walletBalance: 0,\n                  });\n                }}\n                className={`${styles.actionBtn} ${styles.btcButton} ${\n                  mode === \"buy\" && styles.active\n                }`}\n              >\n                <div className={`${styles.sell}`}>\n                  <ArrowLeftOutlined style={{ color: \"#fff\" }} />\n                </div>\n                <span>Buy</span>\n              </div>\n              <div\n                onClick={() => {\n                  setMode(\"sell\");\n                  setState({\n                    ...state,\n                    btc: 0,\n                    usd: 0,\n                    ngn: 0,\n                    ghs: 0,\n                    walletBalance: 0,\n                  });\n                }}\n                className={`${styles.actionBtn} ${styles.btcButton} ${\n                  mode === \"sell\" && styles.active\n                }`}\n              >\n                <div className={`${styles.buy}`}>\n                  <ArrowLeftOutlined style={{ color: \"#fff\" }} rotate={180} />\n                </div>\n                <span>Sell</span>\n              </div>\n\n              <div\n                onClick={() => {\n                  setMode(\"recieve\");\n                  setState({\n                    ...state,\n                    btc: 0,\n                    usd: 0,\n                    ngn: 0,\n                    ghs: 0,\n                    walletBalance: 0,\n                  });\n                }}\n                className={`${styles.actionBtn} ${styles.btcButton} ${\n                  mode === \"recieve\" && styles.active\n                }`}\n              >\n                <div className={`${styles.sell}`}>\n                  <DownloadOutlined style={{ color: \"#fff\" }} />\n                </div>\n                <span>Recieve</span>\n              </div>\n              <div\n                onClick={() => {\n                  setMode(\"send\");\n                  setState({\n                    ...state,\n                    btc: 0,\n                    usd: 0,\n                    ngn: 0,\n                    ghs: 0,\n                    walletBalance: 0,\n                  });\n                }}\n                className={`${styles.actionBtn} ${styles.btcButton} ${\n                  mode === \"send\" && styles.active\n                }`}\n              >\n                <div className={`${styles.buy}`}>\n                  <UploadOutlined style={{ color: \"#fff\" }} />\n                </div>\n                <span>Send</span>\n              </div>\n            </div>\n\n            <div className={styles.sellPage__top}>\n              {mode === \"buy\" && (\n                <BuySection\n                  balance={balance}\n                  rates={btcRates}\n                  fiatWallets={fiatWallets}\n                  {...{ state, setState, buyCoins, buyBTC, loading, active }}\n                />\n              )}\n\n              {mode === \"sell\" && (\n                <SellSection\n                  balance={balance}\n                  rates={btcRates}\n                  fiatWallets={fiatWallets}\n                  {...{ state, setState, sellCoins, sellBTC, loading, active }}\n                />\n              )}\n              {mode === \"send\" && (\n                <SendSection\n                  balance={balance}\n                  rates={btcRates}\n                  {...{\n                    state,\n                    setState,\n                    sellCoinsExternal,\n                    sellBTCExternal,\n                    loading,\n                    active\n                  }}\n                />\n              )}\n\n              {mode === \"recieve\" && (\n                <RecieveSection\n                  btcWalletAddress={btcWalletAddress}\n                  btcRates={btcRates}\n                  active={active}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  balance: state.btc.balance,\n  btcTrans: state.btc.latestBTCTransaction,\n  btcRates: state.btc.btcTicker,\n  buyBTC: state.btc.buyBTC,\n  btcWalletAddress: state.btc.btcWalletAddress,\n  loading: state.btc.loading,\n  sellBTC: state.btc.sellBTC,\n  sellBTCExternal: state.btc.sellBTCExternal,\n  btcTicker: state.btc.btcTicker\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  receiveBTC: () => {\n    dispatch(receiveBTCIntoWallet());\n  },\n  getBTCRates: (data) => {\n    dispatch(getBTCCurrentMarketTicker(data));\n  },\n  buyCoins: (data) => {\n    dispatch(initialBTCBuyTransaction(data));\n  },\n  sellCoins: (data) => {\n    dispatch(initialBTCSellTransaction(data));\n  },\n  sellCoinsExternal: (data) => {\n    dispatch(initialBTCSellToExternalWalletTransaction(data));\n  },\n  getBalance: () => {\n    dispatch(getUserWallets());\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BuyCoin);\n","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/about-rates/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/profile/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/settings/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/FetchInterceptor.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/buyGiftCard.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/pairTwoPair.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/billPayment.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/payment.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/giftcard.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/withdrawal.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/btc.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/bank.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/auth.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/history.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/configs/AppConfig.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/sell-coin/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/transactions/components.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/Auths.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/configs/EnvironmentConfig.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/layout/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/button/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/select/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/AuthService.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/input/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/layout/landing/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/layout/dashboard/index.js",["848"],"import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Layout, Menu } from \"antd\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport {\n  CaretDown,\n  // Profile,\n  Power,\n  LogoNav,\n  AstroLogoNav\n} from \"../../../assets/svg\";\nimport { navigation } from \"./data\";\n// import { history } from \"../../../redux/store\";\n\nimport styles from \"./styles.module.scss\";\nimport { logOutUser } from \"../../../redux/actions/Auths\";\n\nconst { Header, Content, Sider } = Layout;\n\nfunction Toggle() {\n  return (\n    <span role=\"img\" aria-label=\"bars\" className=\"anticon anticon-bars\">\n      <svg\n        viewBox=\"0 0 1024 1024\"\n        focusable=\"false\"\n        data-icon=\"bars\"\n        width=\"1em\"\n        height=\"1em\"\n        fill=\"currentColor\"\n        aria-hidden=\"true\"\n      >\n        <path d=\"M912 192H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 284H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 284H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM104 228a56 56 0 10112 0 56 56 0 10-112 0zm0 284a56 56 0 10112 0 56 56 0 10-112 0zm0 284a56 56 0 10112 0 56 56 0 10-112 0z\"></path>\n      </svg>\n    </span>\n  );\n}\n\nconst DashboardLayout = ({ children, bg, user, logout }) => {\n  const [showDropDown, setShowDropDown] = useState(false);\n  const [showSideBar, setShowSideBar] = useState(true);\n\n  let location = useLocation();\n  const { pathname } = location;\n\n  return (\n    <Layout>\n      <Sider\n\n        breakpoint=\"lg\"\n        collapsedWidth=\"0\"\n        trigger={null}\n        collapsed={showSideBar}\n        onBreakpoint={(broken) => {\n          setShowSideBar(broken);\n        }}\n        width={230}\n        style={{\n          overflow: \"auto\",\n          height: \"100vh\",\n          //   position: \"fixed\",\n          //   left: 0,\n          backgroundColor: \"#890F3C\",\n        }}\n      >\n        \n        <div className={styles.logo}>\n          <AstroLogoNav />\n        </div>\n        <Menu\n          style={{\n            backgroundColor: \"#890F3C\",\n          }}\n          theme=\"dark\"\n          mode=\"inline\"\n          defaultSelectedKeys={[pathname]}\n\n        >\n          {navigation &&\n            navigation.map(({ Icon, Name, route }) => (\n              <Menu.Item key={route} icon={<Icon />}>\n                <Link to={route}>{Name}</Link>\n              </Menu.Item>\n            ))}\n        </Menu>\n      </Sider>\n      <Layout\n        className=\"site-layout\"\n        style={\n          bg ? { backgroundColor: \"#fff\", minWidth: 300 } : { minWidth: 300 }\n        }\n      >\n        <Header className=\"site-layout-background\" style={{ padding: 0 }}>\n          <div className={styles.header}>\n            <div\n              className={styles.header__left}\n              style={{ display: \"flex\", alignItems: \"center\" }}\n            >\n              <div\n                style={{ cursor: \"pointer\" }}\n                id={styles.header__left_toggler}\n                onClick={() => setShowSideBar(!showSideBar)}\n              >\n                <Toggle />\n              </div>\n             \n            </div>\n            <div className={styles.header__right}>\n              \n              <div\n                style={{ display: \"flex\", alignItems: \"center\" }}\n                onClick={() => setShowDropDown(!showDropDown)}\n              >\n                <div className={styles.header__right__avatar}>{`${\n                  (user && user.Profile.first_name[0].toUpperCase()) || `-`\n                } ${(user && user.Profile.last_name[0].toUpperCase()) || `-`}`}</div>\n                <div className={styles.header__right__name}>{`${\n                  (user && user.Profile.first_name) || `-`\n                } ${(user && user.Profile.last_name) || `-`}`}</div>\n                <CaretDown />\n                {showDropDown && (\n                  <div\n                    className={styles.dropDown}\n                    style={{\n                      top: 50,\n                      backgroundColor: \"#fff\",\n                      right: 20,\n                      boxShadow: \"4px 19px 20px 5px #cecece\",\n                      zIndex: 9,\n                      \n                    }}\n                  >\n                    <div\n                      style={{\n                        padding: \"0px 15px\",\n                        backgroundColor: \"#fff\",\n                        cursor: \"pointer\",\n                        display: \"flex\",\n                        alignItems: \"center\",\n                      }}\n                      onClick={() => logout()}\n                    >\n                      <Power /> <span>Logout</span>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </Header>\n        <Content style={{ padding: \"24px 10px 0\", overflowY: \"auto\" }}>\n          {children}\n        </Content>\n      </Layout>\n    </Layout>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  user: state.user.user,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  logout: () => {\n    dispatch(logOutUser());\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DashboardLayout);\n","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/layout/dashboard/data.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/footer/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/header/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/header/landingHeader.js",["849"],"import React, { useState } from \"react\";\nimport { useHistory, Link, useLocation } from \"react-router-dom\";\nimport { MenuOutlined, CloseOutlined } from \"@ant-design/icons\";\nimport { LogoNav, AstroLogoNav } from \"../../assets/svg\";\nimport Button from \"../button\";\nimport styles from \"./style.module.scss\";\n\nconst LandingHeader = ({ form, type }) => {\n  const [show, setShow] = useState(false);\n  let location = useLocation();\n  const { pathname } = location;\n  const history = useHistory();\n  return (\n    <div\n      className={`${styles.landingHeader} ${form === \"white\" && styles.rev}`}\n    >\n      <div className={styles.landingHeaderLeft}>\n        <Link to=\"/\">\n          <AstroLogoNav className={styles.landingHeaderLeftLogo} />\n        </Link>\n      </div>\n\n      <div onClick={() => setShow(true)} className={styles.Hamburger}>\n        <MenuOutlined style={{ color: \"#fff\", fontSize: \"24px\" }} />\n      </div>\n\n      <div\n        className={`${styles.landingHeaderLeftLinks} ${\n          show && styles.mobile__nav\n        }`}\n      >\n        <div onClick={() => setShow(false)} className={styles.closeMemu}>\n          <CloseOutlined\n            style={{ color: \"#fff\", fontSize: \"30px\", marginBottom: \"30px\" }}\n          />\n        </div>\n        <div className={`${styles.landingHeaderLeftLinks} ${styles.links}`}>\n          <div\n            className={`${styles.landingHeaderLeftLinksItem}  ${\n              form === \"white\" && styles.rev\n            }  ${pathname === \"/rates\" && styles.active}`}\n            onClick={() => history.push(\"/rates\")}\n          >\n            Rates\n          </div>\n        </div>\n        {type === \"signup\" || !type ? (\n          <Button\n            onClick={() => history.push(\"/signin\")}\n            form=\"full\"\n            text=\"Login\"\n            className={`${styles.login} ${form === \"white\" && styles.rev}`}\n          />\n        ) : null}\n\n        {type !== \"signup\" ? (\n          <Button\n            onClick={() => history.push(\"/signup\")}\n            form=\"full\"\n            text=\"Sign up\"\n            className={styles.signup}\n          />\n        ) : null}\n      </div>\n    </div>\n  );\n};\n\nexport default LandingHeader;\n","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/header/authHeader.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/sell-coin/components.js",[],["850","851"],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/btc/components.js",["852","853","854","855"],"import React, { useEffect, useState } from \"react\";\nimport { notification, Modal } from \"antd\";\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\nimport Button from \"../../components/button\";\nimport Input from \"../../components/input\";\nimport Select from \"../../components/select\";\nimport styles from \"../styles.module.scss\";\nimport Clipboard from \"react-clipboard.js\";\nimport { Copy } from \"../../assets/svg\";\nimport { QRCode, Money } from \"../../utils/helper\";\nimport { BitcoinInput } from \"../../assets/svg\";\nimport { SuccessfulModal } from \"../transactions/components\";\nimport { history } from \"../../redux/store\";\nimport AppFetch from \"../../redux/services/FetchInterceptor\";\n// import { isNum } from \"react-toastify/dist/utils\";\n\nconst { confirm } = Modal;\n\nexport const BuySection = ({\n  balance,\n  rates,\n  state,\n  setState,\n  buyCoins,\n  buyBTC,\n  loading,\n  active,\n}) => {\n  useEffect(() => {\n    // balance &&\n    //   balance.fiatWallets &&\n    // setCurrent_balance(balance[state.wallet].balance);\n  }, [balance, state.wallet]);\n\n  useEffect(() => {\n    rates && rates.ticker && setBtc_usd_rate(rates.ticker.buy);\n    // rates && rates.tickers && setBtc_ngn_rate(rates.tickers.BTCNGN.buy);\n    // rates && rates.tickers && setBtc_ghs_rate(rates.tickers.BTCGHS.buy);\n  }, [rates]);\n  const handleChange = ({ target: { name, value } }) => {\n    // let ticker = rates && rates.tickers;\n    let btc, ngn, usd, ghs;\n    if (name === \"btc\") {\n      btc = value;\n      ngn = wallet_btc_rate * value;\n      usd = buy_btc_usd_rate * value;\n      // usd = 26000 * value;\n      // ghs = buy_btc_ghs_rate * value;\n      setState((state) => ({ ...state, btc, usd, ngn }));\n    } else if (name === \"ngn\") {\n      ngn = value;\n      btc = value / wallet_btc_rate;\n      usd = buy_btc_usd_rate * value;\n      // usd = 26000 * btc;\n      // ghs = buy_btc_ghs_rate * btc;\n      setState((state) => ({ ...state, btc, usd, ngn }));\n    } else if (name === \"usd\") {\n      usd = value;\n      btc = value / buy_btc_usd_rate;\n      // btc = value / 26000;\n      ngn = wallet_btc_rate * btc;\n      // ghs = buy_btc_ghs_rate * btc;\n      setState((state) => ({ ...state, btc, usd, ngn, ghs }));\n    }\n    if (!value) {\n      setState((state) => ({ ...state, btc: 0, usd: 0, ngn: 0, ghs: 0 }));\n    }\n  };\n  // const [current_balance, setCurrent_balance] = useState(0);\n  const [buy_btc_usd_rate, setBtc_usd_rate] = useState(0);\n  const [buy_btc_ghs_rate, setBtc_ghs_rate] = useState(0);\n  const [buy_btc_ngn_rate, setBtc_ngn_rate] = useState(0);\n  const [wallet_btc_rate, setWallet_btc_rate] = useState(0);\n  const [open, setOpen] = useState(false);\n  const showPromiseConfirm = () => {\n    confirm({\n      title: `Buy ${state.btc} ${active.Currency.code}`,\n      icon: <ExclamationCircleOutlined style={{ color: \"#19a9de\" }} />,\n      content: `Confirm the purchase of ${state.btc} ${active.Currency.code}`,\n      onOk() {\n        setOpen(true);\n        return buyCoins({\n          amount: state.btc,\n          debitFiatWalletId: state.walletInfo.id,\n          creditCoinsWalletId: state.creditCoinsWalletId,\n        });\n      },\n      onCancel() {},\n    });\n  };\n  const currencyTicker = async (data) => {\n    AppFetch({\n      url: `/coins/tickers/${active.Currency.code.toLowerCase()}${data}`,\n      method: \"get\",\n      headers: {\n        \"public-request\": \"true\",\n      },\n    })\n      .then((response) => {\n        \n        setWallet_btc_rate(response.data.ticker.buy);\n      })\n      .catch((err) => {\n        notification.error({\n          message: \"Could not fetch tickers\",\n        });\n      });\n  };\n\n  return (\n    <div className={styles.transactionCard}>\n      {open && buyBTC && (\n        <SuccessfulModal onClick={() => history.push(\"/app\")} />\n      )}\n      <h2 className={styles.detailsCard__title}>Details</h2>\n      <div className={styles.detailsCard__list}>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>You are Buying</span>\n          <span className={styles.sub}>\n            {active.Currency.code} {state.btc}\n          </span>\n        </div>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>You will be debited</span>\n          <span className={styles.sub}>\n            {Money(state[state.wallet === \"NGN\" ? \"ngn\" : \"ghs\"], state.wallet)}\n          </span>\n        </div>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>Fees</span>\n          <span className={`${styles.sub} ${styles.light}`}>0</span>\n        </div>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>Should arrive</span>\n          <span className={`${styles.sub} ${styles.light}`}>In 5 Seconds</span>\n        </div>\n      </div>\n      <hr />\n      <br />\n      <div className={styles.transactionCard__holder__sub}>\n        <Input\n          labelClass={styles.largeMarginLabel}\n          label=\"Buy to\"\n          Dummy={{ text: `${active.Currency.code} wallet` }}\n        />\n        \n        <Select\n          labelClass={styles.largeMarginLabel}\n          hintClass={styles.largeMarginHint}\n          label=\"Pay from\"\n          placeholder=\"Choose wallet\"\n          value={state.wallet}\n          name=\"wallet\"\n          onSelect={(value) => {\n            currencyTicker(value.Currency.code.toLowerCase());\n            setState((state) => ({\n              ...state,\n              wallet: value.Currency.code,\n              walletBalance: value.balance,\n              debitFiatWalletId: value.id,\n              walletInfo: value,\n            }));\n          }}\n          // options={[\n          //   {\n          //     render: \"NGN wallet\",\n          //     value: \"NGN\",\n          //     disabled: rates?.availability?.buy?.value,\n          //   },\n          //   {\n          //     render: \"GHS wallet\",\n          //     value: \"GHS\",\n          //     disabled: rates?.availability?.buy?.value,\n          //   },\n          // ]}\n          options={balance.fiatWallets.map((item) => ({\n            render: `${item.Currency.code} wallet`,\n            value: item,\n          }))}\n          hint={`Current Balance ${Money(state.walletBalance, state.wallet)} `}\n        />\n\n        <div className={styles.transactionCard__holder}>\n          <Input\n            labelClass={styles.largeMarginLabel}\n            label={`Amount (${active.Currency.code})`}\n            type=\"number\"\n            value={isFinite(state.btc) ? state.btc : 0}\n            name=\"btc\"\n            onChange={handleChange}\n            hint={`Current rate ${Money(buy_btc_usd_rate, \"USD\")} / ${\n              active.Currency.code\n            }`}\n            placeholder=\"e.g 0.000011\"\n          />\n          <Input\n            labelClass={styles.largeMarginLabel}\n            label=\"Amount in USD\"\n            value={state.usd}\n            type=\"number\"\n            name=\"usd\"\n            onChange={handleChange}\n          />\n        </div>\n\n        <div className={styles.transactionCard__holder}>\n          {state?.wallet && (\n            <Input\n              labelClass={styles.largeMarginLabel}\n              label={`Amount in ${state.wallet}`}\n              type=\"number\"\n              value={isNaN(state.ngn) ? \"\" : state.ngn}\n              hint={`Current rate ${Money(wallet_btc_rate, state.wallet)} / ${\n                active.Currency.code\n              }`}\n              name=\"ngn\"\n              onChange={handleChange}\n            />\n          )}\n          {/* <Input\n            labelClass={styles.largeMarginLabel}\n            label=\"Amount in GHC\"\n            type=\"number\"\n            value={isNaN(state.ghs) ? 0 : state.ghs}\n            hint={`Current rate ${Money(buy_btc_ghs_rate, \"USD\")} / ${active.Currency.code}`}\n            name=\"ghs\"\n            onChange={handleChange}\n          /> */}\n        </div>\n        <Button\n          disabled={\n            parseInt(state.ngn, 10) < 499\n              ? true\n              : false || loading || !state.wallet\n          }\n          onClick={() => showPromiseConfirm()}\n          className={styles.sellPage__btn}\n          form=\"full\"\n        >\n          BUY\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport const SellSection = ({\n  balance,\n  rates,\n  state,\n  setState,\n  sellCoins,\n  sellBTC,\n  loading,\n  active,\n}) => {\n  // useEffect(() => {\n  //   // balance && balance.BTC && setBtc_current_balance(balance.BTC.balance);\n  //   balance &&\n  //     balance[state.wallet] &&\n  //     setWallet_current_balance(balance[state.wallet].balance);\n  // }, [balance, state.wallet]);\n  useEffect(() => {\n    \n    rates && rates.ticker && setSell_btc_usd_rate(rates.ticker.sell);\n    rates && rates.tickers && setSell_btc_ngn_rate(rates.tickers.BTCNGN.sell);\n    rates && rates.tickers && setSell_btc_ghs_rate(rates.tickers.BTCGHS.sell);\n  }, [rates]);\n  const handleChange = ({ target: { name, value } }) => {\n    // let ticker = rates && rates.tickers;\n    let btc, ngn, usd, ghs;\n    if (name === \"btc\") {\n      btc = value;\n      ngn = sell_btc_ngn_rate * value;\n      usd = sell_btc_usd_rate * value;\n      // usd = 26000 * value;\n      ghs = sell_btc_ghs_rate * value;\n      setState((state) => ({ ...state, btc, usd, ngn, ghs }));\n    } else if (name === \"ngn\") {\n      ngn = value;\n      btc = value / sell_btc_ngn_rate;\n      usd = sell_btc_usd_rate * value;\n      // usd = 26000 * btc;\n      ghs = sell_btc_ghs_rate * btc;\n      setState((state) => ({ ...state, btc, usd, ngn, ghs }));\n    } else if (name === \"usd\") {\n      usd = value;\n      btc = value / sell_btc_usd_rate;\n      // btc = value / 26000;\n      ngn = sell_btc_ngn_rate * btc;\n      ghs = sell_btc_ghs_rate * btc;\n      setState((state) => ({ ...state, btc, usd, ngn, ghs }));\n    } else if (name === \"ghs\") {\n      ghs = value;\n      btc = value / sell_btc_ghs_rate;\n      usd = sell_btc_usd_rate * value;\n      // usd = 26000 * btc;\n      ngn = sell_btc_ngn_rate * btc;\n      setState((state) => ({ ...state, btc, usd, ngn, ghs }));\n    }\n    if (!value) {\n      setState((state) => ({ ...state, btc: 0, usd: 0, ngn: 0, ghs: 0 }));\n    }\n  };\n  // const [btc_current_balance, setBtc_current_balance] = useState(0);\n  // const [wallet_current_balance, setWallet_current_balance] = useState(0);\n  const [sell_btc_usd_rate, setSell_btc_usd_rate] = useState(0);\n  const [sell_btc_ghs_rate, setSell_btc_ghs_rate] = useState(0);\n  const [sell_btc_ngn_rate, setSell_btc_ngn_rate] = useState(0);\n  const [wallet_btc_rate, setWallet_btc_rate] = useState(0);\n  const [open, setOpen] = useState(false);\n  const showPromiseConfirm = () => {\n    confirm({\n      title: `Sell ${isFinite(state.btc) ? state.btc : 0} ${\n        active.Currency.code\n      }`,\n      icon: <ExclamationCircleOutlined style={{ color: \"#19a9de\" }} />,\n      content: `Confirm the sales of ${state.btc} ${active.Currency.code}`,\n      onOk() {\n        setOpen(true);\n        return sellCoins({\n          amount: isFinite(state.btc) ? state.btc : 0,\n          cryptoWalletId: state.wallet,\n          fiatWalletId: state.fiatWalletId,\n        });\n      },\n      onCancel() {},\n    });\n  };\n  const currencyTicker = async (data) => {\n    AppFetch({\n      url: `/coins/tickers/${active.Currency.code.toLowerCase()}${data}`,\n      method: \"get\",\n      headers: {\n        \"public-request\": \"true\",\n      },\n    })\n      .then((response) => {\n        \n        setWallet_btc_rate(response.data.ticker.sell);\n      })\n      .catch((err) => {\n        notification.error({\n          message: \"Could not fetch tickers\",\n        });\n      });\n  };\n  return (\n    <div className={styles.transactionCard}>\n      {open && sellBTC && (\n        <SuccessfulModal onClick={() => history.push(\"/app\")} />\n      )}\n      <h2 className={styles.detailsCard__title}>Details</h2>\n      <div className={styles.detailsCard__list}>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>You are selling</span>\n          <span className={styles.sub}>\n            {Money(\n              isFinite(state.btc) ? state.btc : 0,\n              `${active.Currency.code}`\n            )}\n          </span>\n        </div>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>You will receive</span>\n          <span className={styles.sub}>\n            \n            {Money(\n              isNaN(state.wallet === \"NGN\" ? state.ngn : state.ghs)\n                ? 0\n                : state[state.wallet === \"NGN\" ? \"ngn\" : \"ghs\"],\n              state.wallet\n            )}\n          </span>\n        </div>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>Fees</span>\n          <span className={`${styles.sub} ${styles.light}`}>₦0</span>\n        </div>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>Should arrive</span>\n          <span className={`${styles.sub} ${styles.light}`}>In 5 Seconds</span>\n        </div>\n      </div>\n      <hr />\n      <br />\n      <div className={styles.transactionCard__holder__sub}>\n        <Input\n          labelClass={styles.largeMarginLabel}\n          hintClass={styles.largeMarginHint}\n          label=\"Sell from\"\n          Dummy={{ text: `${active.Currency.code} wallet` }}\n          hint={`Current Balance ${active.balance} `}\n        />\n        <Select\n          labelClass={styles.largeMarginLabel}\n          label=\"Recieve payment to\"\n          placeholder=\"Choose wallet\"\n          value={state.wallet}\n          name=\"wallet\"\n          onSelect={(value) =>{\n            currencyTicker(value.Currency.code.toLowerCase());\n            // setState((state) => ({ ...state, wallet: value }))\n            setState((state) => ({\n              ...state,\n              wallet: value.Currency.code,\n              walletBalance: value.balance,\n              fiatWalletId: value.id,\n              walletInfo: value,\n            }))\n          }}\n          // options={[\n          //   {\n          //     render: \"NGN wallet\",\n          //     value: \"NGN\",\n          //     disabled: rates?.availability?.sell?.value,\n          //   },\n          //   {\n          //     render: \"GHS wallet\",\n          //     value: \"GHS\",\n          //     disabled: rates?.availability?.sell?.value,\n          //   },\n          // ]}\n          // hint={`Current Balance ${Money(\n          //   wallet_current_balance,\n          //   state.wallet\n          // )} `}\n          options={balance.fiatWallets.map((item) => ({\n            render: `${item.Currency.code} wallet`,\n            value: item,\n          }))}\n          hint={`Current Balance ${Money(state.walletBalance, state.wallet)} `}\n        />\n\n        <div className={styles.transactionCard__holder}>\n          <Input\n            labelClass={styles.largeMarginLabel}\n            label={`Amount (${active.Currency.code})`}\n            value={isFinite(state.btc) ? state.btc : 0}\n            name=\"btc\"\n            onChange={handleChange}\n            hint={`Current rate ${Money(sell_btc_usd_rate, \"USD\")} / ${\n              active.Currency.code\n            }`}\n            hintClass={styles.largeMarginHint}\n            placeholder=\"e.g 0.000011\"\n          />\n          <Input\n            labelClass={styles.largeMarginLabel}\n            label=\"Amount in USD\"\n            value={isNaN(state.usd) ? 0 : state.usd.toLocaleString()}\n            name=\"usd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className={styles.transactionCard__holder}>\n          {state.wallet && (\n            <Input\n              labelClass={styles.largeMarginLabel}\n              label=\"Amount in NGN\"\n              value={isNaN(state.ngn) ? 0 : state.ngn.toLocaleString()}\n              hint={`Current rate ${Money(wallet_btc_rate, state.wallet)} / ${\n                active.Currency.code\n              }`}\n              name=\"ngn\"\n              onChange={handleChange}\n            />\n          )}\n          {/* <Input\n            labelClass={styles.largeMarginLabel}\n            label=\"Amount in GHC\"\n            value={isNaN(state.ghs) ? 0 : state.ghs.toLocaleString()}\n            hint={`Current rate ${Money(sell_btc_ghs_rate, \"USD\")} / ${\n              active.Currency.code\n            }`}\n            name=\"ghs\"\n            onChange={handleChange}\n          /> */}\n        </div>\n        <Button\n          disabled={\n            parseInt(state.ngn, 10) < 499\n              ? true\n              : false || loading || !state.wallet\n          }\n          onClick={() => showPromiseConfirm()}\n          className={styles.sellPage__btn}\n          form=\"full\"\n        >\n          SELL\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport const SendSection = ({\n  balance,\n  rates,\n  state,\n  setState,\n  sellCoinsExternal,\n  sellBTCExternal,\n  loading,\n  active,\n}) => {\n  // const [current_balance, setCurrent_balance] = useState(0);\n  const [sell_btc_usd_rate, setSell_btc_usd_rate] = useState(0);\n  const [sell_btc_ghs_rate, setSell_btc_ghs_rate] = useState(0);\n  const [sell_btc_ngn_rate, setSell_btc_ngn_rate] = useState(0);\n\n  // useEffect(() => {\n  //   balance && balance.BTC && setCurrent_balance(balance.BTC.balance);\n  // }, [balance]);\n\n  useEffect(() => {\n    rates && rates.ticker && setSell_btc_usd_rate(rates.ticker.buy);\n    rates && rates.tickers && setSell_btc_ngn_rate(rates.tickers.BTCNGN.sell);\n    rates && rates.tickers && setSell_btc_ghs_rate(rates.tickers.BTCGHS.sell);\n  }, [rates]);\n\n  const handleChange = ({ target: { name, value } }) => {\n    // let ticker = rates && rates.tickers;\n\n    let btc, ngn, usd, ghs;\n    if (name === \"btc\") {\n      btc = value;\n      ngn = sell_btc_ngn_rate * value;\n      usd = sell_btc_usd_rate * value;\n      // usd = 26000 * value;\n      ghs = sell_btc_ghs_rate * value;\n      setState((state) => ({ ...state, btc, usd, ngn, ghs }));\n    } else if (name === \"ngn\") {\n      ngn = value;\n      btc = value / sell_btc_ngn_rate;\n      usd = sell_btc_usd_rate * value;\n      // usd = 26000 * btc;\n      ghs = value / sell_btc_ghs_rate;\n      setState((state) => ({ ...state, btc, usd, ngn, ghs }));\n    } else if (name === \"usd\") {\n      usd = value;\n      btc = value / sell_btc_usd_rate;\n      // btc = value / 26000;\n      ngn = sell_btc_ngn_rate * btc;\n      ghs = sell_btc_ghs_rate * btc;\n      setState((state) => ({ ...state, btc, usd, ngn, ghs }));\n    } else if (name === \"ghs\") {\n      ghs = value;\n      btc = value / sell_btc_ghs_rate;\n      usd = sell_btc_usd_rate * value;\n      // usd = 26000 * btc;\n      ngn = sell_btc_ngn_rate * btc;\n      setState((state) => ({ ...state, btc, usd, ngn, ghs }));\n    }\n    if (!value) {\n      setState((state) => ({ ...state, btc: 0, usd: 0, ngn: 0, ghs: 0 }));\n    }\n  };\n\n  const handleAddress = ({ target: { name, value } }) => {\n    setState((state) => ({ ...state, [name]: value }));\n  };\n  const showPromiseConfirm = () => {\n    confirm({\n      title: `Transferring ${state.btc} BTC`,\n      icon: <ExclamationCircleOutlined style={{ color: \"#19a9de\" }} />,\n      content: `Confirm the transfer of ${state.btc} BTC to ${state.btcAddress}`,\n      onOk() {\n        return sellCoinsExternal({\n          amount: state.btc,\n          address: state.btcAddress,\n          cryptoWalletId: active.id,\n        });\n      },\n      onCancel() {},\n    });\n  };\n\n  return (\n    <div className={styles.transactionCard}>\n      {sellBTCExternal && (\n        <SuccessfulModal onClick={() => history.push(\"/app\")} />\n      )}\n      <h2 className={styles.detailsCard__title}>Details</h2>\n      <div className={styles.detailsCard__list}>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>You are sending</span>\n          <span className={styles.sub}>\n            {state.btc} {active.Currency.code}\n          </span>\n        </div>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>Amount in USD</span>\n          <span className={styles.sub}>{Money(state.usd, \"USD\")}</span>\n        </div>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>Fees</span>\n          <span className={`${styles.sub} ${styles.light}`}>US$ 0</span>\n        </div>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>Should arrive</span>\n          <span className={`${styles.sub} ${styles.light}`}>In 5 Seconds</span>\n        </div>\n      </div>\n      <hr />\n      <br />\n      <div className={styles.transactionCard__holder}>\n        <Input\n          labelClass={styles.largeMarginLabel}\n          hintClass={styles.largeMarginHint}\n          label=\"Send bitcoin from\"\n          Dummy={{ Icon: BitcoinInput, text: `${active.Currency.code} wallet` }}\n          hint={`Current Balance ${active.balance} `}\n        />\n        <Input\n          labelClass={styles.largeMarginLabel}\n          label=\"To\"\n          value={state.btcAddress}\n          name=\"btcAddress\"\n          onChange={handleAddress}\n          hint={\"Enter the wallet address to send to.\"}\n          hintClass={styles.largeMarginHint}\n          placeholder=\"Enter the wallet address\"\n        />\n      </div>\n      <div className={styles.transactionCard__holder}>\n        <Input\n          labelClass={styles.largeMarginLabel}\n          label={`Amount in ${active.Currency.code}`}\n          type=\"number\"\n          value={isNaN(state.btc) ? 0 : state.btc}\n          name=\"btc\"\n          onChange={handleChange}\n          hint={`Current rate ${Money(sell_btc_usd_rate, \"USD\")} / ${\n            active.Currency.code\n          }`}\n          hintClass={styles.largeMarginHint}\n          placeholder=\"\"\n        />\n        <Input\n          labelClass={styles.largeMarginLabel}\n          label=\"Amount in USD\"\n          type=\"number\"\n          value={isNaN(state.usd) ? 0 : state.usd.toLocaleString()}\n          name=\"usd\"\n          onChange={handleChange}\n          placeholder=\"e.g 500\"\n        />\n      </div>\n      {/* <div className={styles.transactionCard__holder}>\n        <Input\n          labelClass={styles.largeMarginLabel}\n          label=\"Amount in NGN\"\n          type=\"number\"\n          value={isNaN(state.ngn) ? 0 : state.ngn.toLocaleString()}\n          hint={`Current rate ${Money(sell_btc_ngn_rate, \"USD\")} / ${\n            active.Currency.code\n          }`}\n          name=\"ngn\"\n          onChange={handleChange}\n        />\n        <Input\n          labelClass={styles.largeMarginLabel}\n          label=\"Amount in GHC\"\n          type=\"number\"\n          value={isNaN(state.ghs) ? 0 : state.ghs.toLocaleString()}\n          hint={`Current rate ${Money(sell_btc_ghs_rate, \"USD\")} / ${\n            active.Currency.code\n          }`}\n          name=\"ghs\"\n          onChange={handleChange}\n        />\n      </div> */}\n      <Button\n        text=\"Send\"\n        disabled={\n          !state.btcAddress || parseInt(state.ngn, 10) < 499\n            ? true\n            : false || loading || !state.wallet\n        }\n        onClick={() => showPromiseConfirm()}\n        form=\"full\"\n      />\n    </div>\n  );\n};\n\nexport const RecieveSection = ({\n  btcRates,\n  active,\n  btcWalletAddress = \"\",\n  error = false,\n  title = \"Scan to copy BTC wallet address\",\n}) => {\n  return (\n    <div className={styles.transactionCard}>\n      <div className={styles.transactionCard__holder__sub}>\n        <div className={styles.scanSell} style={{ textAlign: \"center\" }}>\n          <h3 style={{ textTransform: \"capitalize\" }} className={styles.title}>\n            {`Scan to copy ${active.Currency.code} wallet address`}\n          </h3>\n          <br />\n          <div className={styles.barcode}>\n            {QRCode({ text: btcWalletAddress, size: 300 })}\n          </div>\n          <br />\n          <div\n            className={styles.copy}\n            style={{ display: \"flex\", justifyContent: \"center\" }}\n          >\n            <span style={{ border: \"1px  solid grey\", padding: 8 }}>\n              <small>{btcWalletAddress}</small>\n            </span>\n            <Clipboard\n              style={{ padding: 8 }}\n              component=\"div\"\n              data-clipboard-text={btcWalletAddress}\n              onSuccess={() =>\n                notification.success({\n                  message: `${active.Currency.code} address copied`,\n                  duration: 3,\n                })\n              }\n            >\n              <Copy title=\"copy btc address\" />\n            </Clipboard>\n          </div>\n          <br />\n          <div className={styles.info}>\n            Current exchange rate:{\" \"}\n            {Money(\n              (btcRates && btcRates.tickers && btcRates.tickers.BTCNGN.sell) ||\n                0,\n              \"NGN\"\n            )}\n            /1{active.Currency.code}\n          </div>\n          {error && <div className={styles.error}>error message</div>}\n        </div>\n      </div>\n    </div>\n  );\n}; // done\n","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/billPayment.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/withdrawals.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/home/components.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/buyGiftCard.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/pairTwoPair.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Modals/withdraw-modal-Initial.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Modals/transaction-info-modal.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/bills/components.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Modals/transaction-info-modal-big.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/rate/components.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/landing/components.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/sell-giftcard/components.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/on-boarding/components.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Modals/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/BillPayment.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/WithdrawalsService.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/BuyGiftCard.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/PairTwoPairService.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Modals/withdrawal-modal-3rd.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Modals/withdraw-modal-personal.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/buy-coin/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/upload/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/buy-coin/components.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/upload/upload.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Modals/addWalletModal.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Modals/addCryptoWallet.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/crypto/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/home/components2.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/transactions/fiatTrans.js",["856","857","858","859","860","861","862","863"],"import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Tabs } from \"antd\";\nimport { DashboardLayout } from \"../../components/layout\";\n// import { TableSort } from \"../../assets/svg\";\nimport { Money } from \"../../utils/helper\";\nimport styles from \"../styles.module.scss\";\nimport {\n  DepositsTab,\n  WithdrawalsTab,\n  GiftCardTradesTab,\n  BillPaymentTab,\n  PTwoPTab,\n  BuyGiftCardTab,\n} from \"./components\";\nimport TransactionModalBig, {\n  TransactionModalBillPayment,\n  TransactionModalBuyGiftCard,\n  TransactionModalP2P\n} from \"../../components/Modals/transaction-info-modal-big\";\nimport TransactionModal from \"../../components/Modals/transaction-info-modal\";\nimport {\n  getGiftCardTransactionHistory,\n  getGiftCardTransaction,\n} from \"../../redux/actions/giftCard\";\nimport {\n  getAllUserWithdrawalDetails,\n  getWithdrawalDetailsById,\n} from \"../../redux/actions/withdrawals\";\nimport {\n  getAllUserPaymentDetails,\n  getPaymentDetailsById,\n} from \"../../redux/actions/payment\";\nimport {\n  getAllUserBillPaymentDetails,\n  getBillPaymentDetailsById,\n} from \"../../redux/actions/billPayment\";\nimport {\n  getAllUserFiatP2PTransferDetails,\n  getFiatP2PTransferById,\n} from \"../../redux/actions/pairTwoPair\";\nimport { ArrowLeftOutlined } from \"@ant-design/icons\";\n\nconst Transactions = ({\n  goBack,\n  depositTransaction,\n  BillPaymentTrans,\n  pairTwoPairFiatTrans,\n  withdrawalTrans,\n  getWithdrawalTrans,\n  getDepositTrans,\n  getBillPaymentTrans,\n  getP2PTrans,\n  getP2PTransById,\n  getDepositById,\n  getBillPaymentById,\n  getWithdrawalById,\n  viewWithdrawalTrans,\n  viewDepositTrans,\n  viewBillPaymentTrans,\n  viewP2PTrans,\n  viewBuyGiftCardTrans,\n}) => {\n  const [depositTransDetails, setDepositTransDetails] = React.useState(false);\n  const [giftCardTransDetails, setGiftCardTransDetails] = React.useState(false);\n  const [billPaymentDetails, setBillPaymentDetails] = React.useState(false);\n  const [buyGiftCardDetails, setBuyGiftCardDetails] = React.useState(false);\n  const [\n    pairTwoPairFiatTransDetails,\n    setPairTwoPairFiatTransDetails,\n  ] = React.useState(false);\n  const [withdrawalTransDetails, setWithdrawalTransDetails] = React.useState(\n    false\n  );\n  const { TabPane } = Tabs;\n  function callback(key) {\n    console.log(key);\n  }\n  return (\n    <>\n    <div onClick={()=> goBack(true)} style={{display:\"flex\", flexDirection:\"row\", alignItems:'center'}}>\n      <ArrowLeftOutlined style={{fontSize:20}}/>\n      <span className={styles.gitcard__top__title}> Fiat Transactions</span>\n    </div>\n      {/* <span className={styles.gitcard__top__title}> Fiat Transactions</span> */}\n      {viewP2PTrans && (\n        <TransactionModalP2P\n          dateData={viewP2PTrans.createdAt}\n          amountSent={Money(viewP2PTrans?.amount_sent_object?.value, viewP2PTrans?.amountSent?.currency)}\n          amountReceived={Money(viewP2PTrans?.amount_received_object?.value, viewP2PTrans?.amountReceived?.currency)}\n          status={viewP2PTrans.status}\n          reference={viewP2PTrans.reference}\n          rate={`Transfer at ${viewP2PTrans.rate.value}`}\n          transferNote={viewP2PTrans?.note}\n          setIsModalVisible={setPairTwoPairFiatTransDetails}\n          isModalVisible={pairTwoPairFiatTransDetails}\n        />\n      )}\n      {viewBuyGiftCardTrans && (\n        <TransactionModalBuyGiftCard\n          dateData={viewBuyGiftCardTrans.createdAt}\n          amount={viewBuyGiftCardTrans.amount}\n          status={viewBuyGiftCardTrans.status}\n          cardValue={viewBuyGiftCardTrans?.cardDetails?.cardValue}\n          reference={viewBuyGiftCardTrans.reference}\n          referenceCurrency={viewBuyGiftCardTrans.referenceCurrency}\n          quan={viewBuyGiftCardTrans?.cardDetails?.quantity}\n          setIsModalVisible={setBuyGiftCardDetails}\n          isModalVisible={buyGiftCardDetails}\n          cardCurrency={viewBuyGiftCardTrans?.cardDetails?.cardCurrency}\n          cardSlug={viewBuyGiftCardTrans.cardSlug}\n          estimatedUSDValue={viewBuyGiftCardTrans?.cardDetails?.estimatedUSDValue}\n        />\n      )}\n      {viewDepositTrans && (\n        <TransactionModal\n          title={\"Deposit\"}\n          dateData={viewDepositTrans.created_at}\n          amount={viewDepositTrans.amount}\n          status={viewDepositTrans.status}\n          reference={viewDepositTrans.reference}\n          setIsModalVisible={setDepositTransDetails}\n          isModalVisible={depositTransDetails}\n        />\n      )}\n      {viewWithdrawalTrans && (\n        <TransactionModal\n          title={\"Withdrawal\"}\n          dateData={viewWithdrawalTrans.created_at}\n          amount={viewWithdrawalTrans.amount}\n          status={viewWithdrawalTrans.status}\n          reference={viewWithdrawalTrans.reference}\n          setIsModalVisible={setWithdrawalTransDetails}\n          isModalVisible={withdrawalTransDetails}\n        />\n      )}\n      {viewBillPaymentTrans && (\n        <TransactionModalBillPayment\n          setIsModalVisible={setBillPaymentDetails}\n          isModalVisible={billPaymentDetails}\n          dateData={viewBillPaymentTrans.created_at}\n          amount={viewBillPaymentTrans.amount}\n          status={viewBillPaymentTrans.status}\n          reference={viewBillPaymentTrans.reference}\n          title={\"Bill Payment\"}\n          transactionFee={viewBillPaymentTrans.transactionFee}\n          id={viewBillPaymentTrans.id}\n          referenceCurrency={viewBillPaymentTrans.referenceCurrency}\n          details={viewBillPaymentTrans.details}\n        />\n      )}\n      <div className={styles.transactions}>\n        <div className={styles.transactions__top}>\n          <div className={styles.transactions__top__sort}></div>\n        </div>\n        <div className={styles.transactions__tab}>\n          <Tabs defaultActiveKey=\"1\" onChange={callback}>\n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item__first}>\n                  <span>Deposits</span>\n                </div>\n              }\n              key=\"1\"\n            >\n              <DepositsTab\n                fetchTrans={getDepositTrans}\n                transaction={depositTransaction}\n                handleAction={(id) => {\n                  getDepositById({ transactionId: id });\n                  setDepositTransDetails(true);\n                }}\n              />\n            </TabPane>\n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>Withdrawals</span>\n                </div>\n              }\n              key=\"2\"\n            >\n              <WithdrawalsTab\n                fetchTrans={getWithdrawalTrans}\n                transaction={withdrawalTrans}\n                handleAction={(id) => {\n                  getWithdrawalById({ transactionId: id });\n                  setWithdrawalTransDetails(true);\n                }}\n              />\n            </TabPane>\n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>Bill Payment</span>\n                </div>\n              }\n              key=\"3\"\n            >\n              <BillPaymentTab\n                fetchTrans={getBillPaymentTrans}\n                transaction={BillPaymentTrans}\n                handleAction={(id) => {\n                  getBillPaymentById({ transactionId: id });\n                  setBillPaymentDetails(true);\n                }}\n              />\n            </TabPane>\n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>P2P Fiat Transactions</span>\n                </div>\n              }\n              key=\"6\"\n            >\n              <PTwoPTab\n                fetchTrans={getP2PTrans}\n                transaction={pairTwoPairFiatTrans}\n                handleAction={(id) => {\n                  getP2PTransById({ transactionId: id });\n                  setPairTwoPairFiatTransDetails(true);\n                }}\n              />\n            </TabPane>\n          </Tabs>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  user: state.user.user,\n  btcRates: state.btc.btcTicker,\n  balance: state.btc.balance,\n  btcTrans: state.btc.BTCTransaction,\n  buyTrans: state.btc.buyTransaction,\n  sellTrans: state.btc.sellTransaction,\n  sendTrans: state.btc.sendTransaction,\n  p2pTrans: state.btc.p2pTransaction,\n  BillPaymentTrans: state.billPayment.BillPaymentTransaction,\n  pairTwoPairFiatTrans: state.pairTwoPair.pairTwoPairFiatTransaction,\n  withdrawalTrans: state.withdrawals.WithdrawalTransaction,\n  depositTransaction: state.payment.DepositTransaction,\n  viewP2PTrans: state.pairTwoPair.pairTwoPairFiatTransactionDetails && state.pairTwoPair.pairTwoPairFiatTransactionDetails.transaction,\n  viewGiftCardTrans: state.giftCard.giftCardDetails,\n  viewWithdrawalTrans: state.withdrawals.withdrawalDetails,\n  viewDepositTrans: state.payment.depositTransactionDetails,\n  viewBillPaymentTrans: state.billPayment.billPaymentDetails,\n});\n\n// viewBTCTrans,\n//   viewBuyTrans,\n//   viewSellTrans,\n//   viewSendTrans,\n//   viewP2PCryptoTrans,\nconst mapDispatchToProps = (dispatch) => ({\n  getWithdrawalTrans: (data) => {\n    dispatch(getAllUserWithdrawalDetails(data));\n  },\n  getDepositTrans: (data) => {\n    dispatch(getAllUserPaymentDetails(data));\n  },\n  getBillPaymentTrans: (data) => {\n    dispatch(getAllUserBillPaymentDetails(data));\n  },\n  getP2PTrans: (data) => {\n    dispatch(getAllUserFiatP2PTransferDetails(data));\n  },\n  getP2PTransById: (data) => {\n    dispatch(getFiatP2PTransferById(data));\n  },\n  getBillPaymentById: (data) => {\n    dispatch(getBillPaymentDetailsById(data));\n  },\n  getWithdrawalById: (data) => {\n    dispatch(getWithdrawalDetailsById(data));\n  },\n  getDepositById: (data) => {\n    dispatch(getPaymentDetailsById(data));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Transactions);\n","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/transactions/cryptoTrans.js",["864","865","866","867","868","869","870"],"import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Tabs } from \"antd\";\nimport { DashboardLayout } from \"../../components/layout\";\n// import { TableSort } from \"../../assets/svg\";\nimport { Money } from \"../../utils/helper\";\nimport styles from \"../styles.module.scss\";\nimport {\n  DepositsTab,\n  WithdrawalsTab,\n  GiftCardTradesTab,\n  BTCTradesTab,\n  BillPaymentTab,\n  PTwoPTab,\n  BuyGiftCardTab,\n} from \"./components\";\nimport TransactionModalBig, {\n  TransactionModalBTC,\n  TransactionModalBillPayment,\n  TransactionModalBuyGiftCard,\n  TransactionModalP2P\n} from \"../../components/Modals/transaction-info-modal-big\";\nimport TransactionModal from \"../../components/Modals/transaction-info-modal\";\nimport {\n  getBTCTransactionHistory,\n  getBTCWalletDetailsById,\n  getCryptoBuyTransactionDetails,\n  getCryptoBuyTransactionHistory,\n  getCryptoP2PTransactionDetails,\n  getCryptoP2PTransactionHistory,\n  getCryptoSellTransactionDetails,\n  getCryptoSellTransactionHistory,\n  getCryptoSendTransactionDetails,\n  getCryptoSendTransactionHistory,\n} from \"../../redux/actions/btc\";\nimport {\n  getGiftCardTransactionHistory,\n  getGiftCardTransaction,\n} from \"../../redux/actions/giftCard\";\nimport {\n  getAllUserWithdrawalDetails,\n  getWithdrawalDetailsById,\n} from \"../../redux/actions/withdrawals\";\nimport {\n  getAllUserPaymentDetails,\n  getPaymentDetailsById,\n} from \"../../redux/actions/payment\";\nimport {\n  getAllUserBillPaymentDetails,\n  getBillPaymentDetailsById,\n} from \"../../redux/actions/billPayment\";\nimport {\n  getAllUserFiatP2PTransferDetails,\n  getFiatP2PTransferById,\n} from \"../../redux/actions/pairTwoPair\";\nimport {\n  getAllBuyCardTransaction,\n  getBuyCardTransaction,\n} from \"../../redux/actions/buyGiftCard\";\nimport { ArrowLeftOutlined } from \"@ant-design/icons\";\n\nconst Transactions = ({\n  goBack,\n  btcTrans,\n  buyTrans,\n  sellTrans,\n  sendTrans,\n  p2pTrans,\n  depositTransaction,\n  BillPaymentTrans,\n  pairTwoPairFiatTrans,\n  withdrawalTrans,\n  giftCardTrans,\n  getBTCTrans,\n  getBuyCryptoTrans,\n  getSellCryptoTrans,\n  getSendCryptoTrans,\n  getP2PCryptoTrans,\n  getBuyCryptoById,\n  getSellCryptoById,\n  getSendCryptoById,\n  getP2PCryptoById,\n  getGiftCardTrans,\n  getWithdrawalTrans,\n  getDepositTrans,\n  getBillPaymentTrans,\n  getP2PTrans,\n  getP2PTransById,\n  getGiftCardById,\n  getDepositById,\n  getBTCById,\n  getBillPaymentById,\n  getWithdrawalById,\n  viewWithdrawalTrans,\n  viewDepositTrans,\n  viewGiftCardTrans,\n  viewBTCTrans,\n  viewBuyTrans,\n  viewSellTrans,\n  viewSendTrans,\n  viewP2PCryptoTrans,\n  viewBillPaymentTrans,\n  viewP2PTrans,\n  getBuyGiftCardTrans,\n  getBuyGiftCardTransById,\n  BuyGiftCardTrans,\n  viewBuyGiftCardTrans,\n}) => {\n  const [depositTransDetails, setDepositTransDetails] = React.useState(false);\n  const [btcTransDetails, setBtcTransDetails] = React.useState(false);\n  const [buyCryptoTransDetails, setBuyCryptoTransDetails] = React.useState(false);\n  const [sellCryptoTransDetails, setSellCryptoTransDetails] = React.useState(false);\n  const [sendCryptoTransDetails, setSendCryptoTransDetails] = React.useState(false);\n  const [p2pCryptoTransDetails, setP2PCryptoTransDetails] = React.useState(false);\n  const [giftCardTransDetails, setGiftCardTransDetails] = React.useState(false);\n  const [billPaymentDetails, setBillPaymentDetails] = React.useState(false);\n  const [buyGiftCardDetails, setBuyGiftCardDetails] = React.useState(false);\n  const [\n    pairTwoPairFiatTransDetails,\n    setPairTwoPairFiatTransDetails,\n  ] = React.useState(false);\n  const [withdrawalTransDetails, setWithdrawalTransDetails] = React.useState(\n    false\n  );\n  const { TabPane } = Tabs;\n  function callback(key) {\n    console.log(key);\n  }\n  return (\n    <>\n    <div onClick={()=> goBack(true)} style={{display:\"flex\", flexDirection:\"row\", alignItems:'center'}}>\n    <ArrowLeftOutlined style={{fontSize:20}}/>\n      <span className={styles.gitcard__top__title}>Crypto Transactions</span>\n    </div>\n      {/* <span className={styles.gitcard__top__title}> Fiat Transactions</span> */}\n      {viewP2PTrans && (\n        <TransactionModalP2P\n          dateData={viewP2PTrans.createdAt}\n          amountSent={Money(viewP2PTrans?.amount_sent_object?.value, viewP2PTrans?.amountSent?.currency)}\n          amountReceived={Money(viewP2PTrans?.amount_received_object?.value, viewP2PTrans?.amountReceived?.currency)}\n          status={viewP2PTrans.status}\n          reference={viewP2PTrans.reference}\n          rate={`Transfer at ${viewP2PTrans.rate.value}`}\n          transferNote={viewP2PTrans?.note}\n          setIsModalVisible={setPairTwoPairFiatTransDetails}\n          isModalVisible={pairTwoPairFiatTransDetails}\n        />\n      )}\n      {viewBuyGiftCardTrans && (\n        <TransactionModalBuyGiftCard\n          dateData={viewBuyGiftCardTrans.createdAt}\n          amount={viewBuyGiftCardTrans.amount}\n          status={viewBuyGiftCardTrans.status}\n          cardValue={viewBuyGiftCardTrans?.cardDetails?.cardValue}\n          reference={viewBuyGiftCardTrans.reference}\n          referenceCurrency={viewBuyGiftCardTrans.referenceCurrency}\n          quan={viewBuyGiftCardTrans?.cardDetails?.quantity}\n          setIsModalVisible={setBuyGiftCardDetails}\n          isModalVisible={buyGiftCardDetails}\n          cardCurrency={viewBuyGiftCardTrans?.cardDetails?.cardCurrency}\n          cardSlug={viewBuyGiftCardTrans.cardSlug}\n          estimatedUSDValue={viewBuyGiftCardTrans?.cardDetails?.estimatedUSDValue}\n        />\n      )}\n      {viewDepositTrans && (\n        <TransactionModal\n          title={\"Deposit\"}\n          dateData={viewDepositTrans.created_at}\n          amount={viewDepositTrans.amount}\n          status={viewDepositTrans.status}\n          reference={viewDepositTrans.reference}\n          setIsModalVisible={setDepositTransDetails}\n          isModalVisible={depositTransDetails}\n        />\n      )}\n      {viewBTCTrans && (\n        <TransactionModalBTC\n          setIsModalVisible={setBtcTransDetails}\n          isModalVisible={btcTransDetails}\n          type={viewBTCTrans.type}\n          status={viewBTCTrans.status}\n          dateData={viewBTCTrans.createdAt}\n          transactionType={viewBTCTrans.transactionType}\n          reference={viewBTCTrans.reference}\n          rate={viewBTCTrans.rate.amount}\n          amount={viewBTCTrans.amount}\n          address={viewBTCTrans.address}\n          quidaxTransactionId={viewBTCTrans.quidaxTransactionId}\n          txid={viewBTCTrans.txid}\n          transactionFee={viewBTCTrans.transactionFee}\n        />\n      )}\n      {viewBuyTrans && (\n        <TransactionModalBTC\n          setIsModalVisible={setBuyCryptoTransDetails}\n          isModalVisible={buyCryptoTransDetails}\n          type={viewBuyTrans.type}\n          status={viewBuyTrans.status}\n          dateData={viewBuyTrans.createdAt}\n          transactionType={viewBuyTrans.transactionType}\n          reference={viewBuyTrans.reference}\n          rate={viewBuyTrans.rate.amount}\n          amount={viewBuyTrans.amount}\n          address={viewBuyTrans.address}\n          quidaxTransactionId={viewBuyTrans.quidaxTransactionId}\n          txid={viewBuyTrans.txid}\n          transactionFee={viewBuyTrans.transactionFee}\n        />\n      )}\n      {viewSellTrans && (\n        <TransactionModalBTC\n          setIsModalVisible={setSellCryptoTransDetails}\n          isModalVisible={sellCryptoTransDetails}\n          type={viewSellTrans.type}\n          status={viewSellTrans.status}\n          dateData={viewSellTrans.createdAt}\n          transactionType={viewSellTrans.transactionType}\n          reference={viewSellTrans.reference}\n          rate={viewSellTrans.rate.amount}\n          amount={viewSellTrans.amount}\n          address={viewSellTrans.address}\n          quidaxTransactionId={viewSellTrans.quidaxTransactionId}\n          txid={viewSellTrans.txid}\n          transactionFee={viewSellTrans.transactionFee}\n        />\n      )}\n       {viewSendTrans && (\n        <TransactionModalBTC\n          setIsModalVisible={setSendCryptoTransDetails}\n          isModalVisible={sendCryptoTransDetails}\n          type={viewSendTrans.type}\n          status={viewSendTrans.status}\n          dateData={viewSendTrans.createdAt}\n          transactionType={viewSendTrans.transactionType}\n          reference={viewSendTrans.reference}\n          rate={viewSendTrans.rate.amount}\n          amount={viewSendTrans.amount}\n          address={viewSendTrans.address}\n          quidaxTransactionId={viewSendTrans.quidaxTransactionId}\n          txid={viewSendTrans.txid}\n          transactionFee={viewSendTrans.transactionFee}\n        />\n      )}\n      {viewP2PCryptoTrans && (\n        <TransactionModalBTC\n          setIsModalVisible={setP2PCryptoTransDetails}\n          isModalVisible={p2pCryptoTransDetails}\n          type={viewP2PCryptoTrans.type}\n          status={viewP2PCryptoTrans.status}\n          dateData={viewP2PCryptoTrans.createdAt}\n          transactionType={viewP2PCryptoTrans.transactionType}\n          reference={viewP2PCryptoTrans.reference}\n          rate={viewP2PCryptoTrans.rate.amount}\n          amount={viewP2PCryptoTrans.amount}\n          address={viewP2PCryptoTrans.address}\n          quidaxTransactionId={viewP2PCryptoTrans.quidaxTransactionId}\n          txid={viewP2PCryptoTrans.txid}\n          transactionFee={viewP2PCryptoTrans.transactionFee}\n        />\n      )}\n      {viewGiftCardTrans && (\n        <TransactionModalBig\n          title=\"Gift Card\"\n          rate={viewGiftCardTrans.rate.amount}\n          Qua={viewGiftCardTrans.comments}\n          id={viewGiftCardTrans.id}\n          cardCode={viewGiftCardTrans.cardCode}\n          images={viewGiftCardTrans.images}\n          dateData={viewGiftCardTrans.created_at}\n          amount={viewGiftCardTrans.amount}\n          status={viewGiftCardTrans.status}\n          reference={viewGiftCardTrans.reference}\n          setIsModalVisible={setGiftCardTransDetails}\n          isModalVisible={giftCardTransDetails}\n        />\n      )}\n      {viewWithdrawalTrans && (\n        <TransactionModal\n          title={\"Withdrawal\"}\n          dateData={viewWithdrawalTrans.created_at}\n          amount={viewWithdrawalTrans.amount}\n          status={viewWithdrawalTrans.status}\n          reference={viewWithdrawalTrans.reference}\n          setIsModalVisible={setWithdrawalTransDetails}\n          isModalVisible={withdrawalTransDetails}\n        />\n      )}\n      {viewBillPaymentTrans && (\n        <TransactionModalBillPayment\n          setIsModalVisible={setBillPaymentDetails}\n          isModalVisible={billPaymentDetails}\n          dateData={viewBillPaymentTrans.created_at}\n          amount={viewBillPaymentTrans.amount}\n          status={viewBillPaymentTrans.status}\n          reference={viewBillPaymentTrans.reference}\n          title={\"Bill Payment\"}\n          transactionFee={viewBillPaymentTrans.transactionFee}\n          id={viewBillPaymentTrans.id}\n          referenceCurrency={viewBillPaymentTrans.referenceCurrency}\n          details={viewBillPaymentTrans.details}\n        />\n      )}\n      <div className={styles.transactions}>\n        <div className={styles.transactions__top}>\n          <div className={styles.transactions__top__sort}></div>\n        </div>\n        <div className={styles.transactions__tab}>\n          <Tabs defaultActiveKey=\"1\" onChange={callback}>\n            {/* <TabPane\n              tab={\n                <div className={styles.transactions__tab__item__first}>\n                  <span>Deposits</span>\n                </div>\n              }\n              key=\"1\"\n            >\n              <DepositsTab\n                fetchTrans={getDepositTrans}\n                transaction={depositTransaction}\n                handleAction={(id) => {\n                  getDepositById({ transactionId: id });\n                  setDepositTransDetails(true);\n                }}\n              />\n            </TabPane>\n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>Withdrawals</span>\n                </div>\n              }\n              key=\"2\"\n            >\n              <WithdrawalsTab\n                fetchTrans={getWithdrawalTrans}\n                transaction={withdrawalTrans}\n                handleAction={(id) => {\n                  getWithdrawalById({ transactionId: id });\n                  setWithdrawalTransDetails(true);\n                }}\n              />\n            </TabPane>\n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>Bill Payment</span>\n                </div>\n              }\n              key=\"3\"\n            >\n              <BillPaymentTab\n                fetchTrans={getBillPaymentTrans}\n                transaction={BillPaymentTrans}\n                handleAction={(id) => {\n                  getBillPaymentById({ transactionId: id });\n                  setBillPaymentDetails(true);\n                }}\n              />\n            </TabPane> */}\n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>Buy Crypto Transactions</span>\n                </div>\n              }\n              key=\"4\"\n            >\n              <BTCTradesTab\n                fetchTrans={getBuyCryptoTrans}\n                transaction={buyTrans}\n                handleAction={(id) => {\n                  getBuyCryptoById({ transactionId: id });\n                  setBuyCryptoTransDetails(true);\n                }}\n              />\n            </TabPane>\n\n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>Sell Crypto Transactions</span>\n                </div>\n              }\n              key=\"5\"\n            >\n              <BTCTradesTab\n                fetchTrans={getSellCryptoTrans}\n                transaction={sellTrans}\n                handleAction={(id) => {\n                  getSellCryptoById({ transactionId: id });\n                  setSellCryptoTransDetails(true);\n                }}\n              />\n            </TabPane>\n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>Send Crypto Transactions</span>\n                </div>\n              }\n              key=\"6\"\n            >\n              <BTCTradesTab\n                fetchTrans={getSendCryptoTrans}\n                transaction={sendTrans}\n                handleAction={(id) => {\n                  getSendCryptoById({ transactionId: id });\n                  setSendCryptoTransDetails(true);\n                }}\n              />\n            </TabPane>\n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>P2P Crypto Transactions</span>\n                </div>\n              }\n              key=\"7\"\n            >\n              <BTCTradesTab\n                fetchTrans={getP2PCryptoTrans}\n                transaction={p2pTrans}\n                handleAction={(id) => {\n                  getP2PCryptoById({ transactionId: id });\n                  setP2PCryptoTransDetails(true);\n                }}\n              />\n            </TabPane>\n            \n            {/* <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>Sell GiftCard Transactions</span>\n                </div>\n              }\n              key=\"8\"\n            >\n              <GiftCardTradesTab\n                fetchTrans={getGiftCardTrans}\n                transaction={giftCardTrans}\n                handleAction={(id) => {\n                  getGiftCardById({ transactionId: id });\n                  setGiftCardTransDetails(true);\n                }}\n              />\n            </TabPane>\n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>Buy GiftCard Transactions</span>\n                </div>\n              }\n              key=\"9\"\n            >\n              <BuyGiftCardTab\n                fetchTrans={getBuyGiftCardTrans}\n                transaction={BuyGiftCardTrans}\n                handleAction={(id) => {\n                  getBuyGiftCardTransById({ transactionId: id });\n                  setBuyGiftCardDetails(true);\n                }}\n              />\n            </TabPane>\n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>P2P Fiat Transactions</span>\n                </div>\n              }\n              key=\"10\"\n            >\n              <PTwoPTab\n                fetchTrans={getP2PTrans}\n                transaction={pairTwoPairFiatTrans}\n                handleAction={(id) => {\n                  getP2PTransById({ transactionId: id });\n                  setPairTwoPairFiatTransDetails(true);\n                }}\n              />\n            </TabPane>\n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>P2P Crypto Transactions</span>\n                </div>\n              }\n              key=\"11\"\n            >\n              <PTwoPTab\n                fetchTrans={getP2PTrans}\n                transaction={pairTwoPairFiatTrans}\n                handleAction={(id) => {\n                  getP2PTransById({ transactionId: id });\n                  setPairTwoPairFiatTransDetails(true);\n                }}\n              />\n            </TabPane> */}\n          </Tabs>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  user: state.user.user,\n  btcRates: state.btc.btcTicker,\n  balance: state.btc.balance,\n  btcTrans: state.btc.BTCTransaction,\n  buyTrans: state.btc.buyTransaction,\n  sellTrans: state.btc.sellTransaction,\n  sendTrans: state.btc.sendTransaction,\n  p2pTrans: state.btc.p2pTransaction,\n  giftCardTrans: state.giftCard.GiftCardTransaction,\n  BillPaymentTrans: state.billPayment.BillPaymentTransaction,\n  BuyGiftCardTrans: state.buyGiftCard.buyGiftCardTransaction,\n  pairTwoPairFiatTrans: state.pairTwoPair.pairTwoPairFiatTransaction,\n  withdrawalTrans: state.withdrawals.WithdrawalTransaction,\n  depositTransaction: state.payment.DepositTransaction,\n  viewP2PTrans: state.pairTwoPair.pairTwoPairFiatTransactionDetails && state.pairTwoPair.pairTwoPairFiatTransactionDetails.transaction,\n  viewBTCTrans: state.btc.btcDetails,\n  viewBuyTrans: state.btc.buyDetails,\n  viewSellTrans: state.btc.sellDetails,\n  viewSendTrans: state.btc.sendDetails,\n  viewP2PCryptoTrans: state.btc.p2pDetails,\n  viewGiftCardTrans: state.giftCard.giftCardDetails,\n  viewWithdrawalTrans: state.withdrawals.withdrawalDetails,\n  viewDepositTrans: state.payment.depositTransactionDetails,\n  viewBillPaymentTrans: state.billPayment.billPaymentDetails,\n  viewBuyGiftCardTrans: state.buyGiftCard.buyGiftCardTransactionDetails,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getBTCTrans: (data) => {\n    dispatch(getBTCTransactionHistory(data));\n  },\n  getBuyCryptoTrans: (data) => {\n    dispatch(getCryptoBuyTransactionHistory(data))\n  },\n  getSellCryptoTrans:(data) => {\n    dispatch(getCryptoSellTransactionHistory(data))\n  },\n  getSendCryptoTrans:(data) => {\n    dispatch(getCryptoSendTransactionHistory(data))\n  },\n  getP2PCryptoTrans:(data) => {\n    dispatch(getCryptoP2PTransactionHistory(data))\n  },\n  getBuyCryptoById:(data) => {\n    dispatch(getCryptoBuyTransactionDetails(data))\n  },\n  getSellCryptoById:(data) => {\n    dispatch(getCryptoSellTransactionDetails(data))\n  },\n  getSendCryptoById:(data) => {\n    dispatch(getCryptoSendTransactionDetails(data))\n  },\n  getP2PCryptoById:(data)=>{\n    dispatch(getCryptoP2PTransactionDetails(data))\n  },\n  getGiftCardTrans: (data) => {\n    dispatch(getGiftCardTransactionHistory(data));\n  },\n  getWithdrawalTrans: (data) => {\n    dispatch(getAllUserWithdrawalDetails(data));\n  },\n  getDepositTrans: (data) => {\n    dispatch(getAllUserPaymentDetails(data));\n  },\n  getBillPaymentTrans: (data) => {\n    dispatch(getAllUserBillPaymentDetails(data));\n  },\n  getP2PTrans: (data) => {\n    dispatch(getAllUserFiatP2PTransferDetails(data));\n  },\n  getBuyGiftCardTrans: (data) => {\n    dispatch(getAllBuyCardTransaction(data));\n  },\n  getBuyGiftCardTransById: (data) => {\n    dispatch(getBuyCardTransaction(data));\n  },\n  getP2PTransById: (data) => {\n    dispatch(getFiatP2PTransferById(data));\n  },\n  getBillPaymentById: (data) => {\n    dispatch(getBillPaymentDetailsById(data));\n  },\n  getBTCById: (data) => {\n    dispatch(getBTCWalletDetailsById(data));\n  },\n  getGiftCardById: (data) => {\n    dispatch(getGiftCardTransaction(data));\n  },\n  getWithdrawalById: (data) => {\n    dispatch(getWithdrawalDetailsById(data));\n  },\n  getDepositById: (data) => {\n    dispatch(getPaymentDetailsById(data));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Transactions);\n","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/transactions/giftCardTrans.js",["871","872","873","874","875","876","877","878","879"],"import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Tabs } from \"antd\";\nimport { DashboardLayout } from \"../../components/layout\";\n// import { TableSort } from \"../../assets/svg\";\nimport { Money } from \"../../utils/helper\";\nimport styles from \"../styles.module.scss\";\nimport {\n  DepositsTab,\n  WithdrawalsTab,\n  GiftCardTradesTab,\n  BillPaymentTab,\n  PTwoPTab,\n  BuyGiftCardTab,\n} from \"./components\";\nimport TransactionModalBig, {\n  TransactionModalBillPayment,\n  TransactionModalBuyGiftCard,\n  TransactionModalP2P\n} from \"../../components/Modals/transaction-info-modal-big\";\nimport TransactionModal from \"../../components/Modals/transaction-info-modal\";\nimport {\n  getGiftCardTransactionHistory,\n  getGiftCardTransaction,\n} from \"../../redux/actions/giftCard\";\nimport {\n  getAllBuyCardTransaction,\n  getBuyCardTransaction,\n} from \"../../redux/actions/buyGiftCard\";\nimport { ArrowLeftOutlined } from \"@ant-design/icons\";\n\nconst Transactions = ({\n  goBack,\n  giftCardTrans,\n  getGiftCardTrans,\n  getGiftCardById,\n  viewGiftCardTrans,\n  getBuyGiftCardTrans,\n  getBuyGiftCardTransById,\n  BuyGiftCardTrans,\n  viewBuyGiftCardTrans,\n}) => {\n//   const [depositTransDetails, setDepositTransDetails] = React.useState(false);\n  const [giftCardTransDetails, setGiftCardTransDetails] = React.useState(false);\n//   const [billPaymentDetails, setBillPaymentDetails] = React.useState(false);\n  const [buyGiftCardDetails, setBuyGiftCardDetails] = React.useState(false);\n  const { TabPane } = Tabs;\n  function callback(key) {\n    console.log(key);\n  }\n  return (\n    <>\n    <div onClick={()=> goBack(true)} style={{display:\"flex\", flexDirection:\"row\", alignItems:'center'}}>\n      <ArrowLeftOutlined style={{fontSize:20}}/>\n      <span className={styles.gitcard__top__title}> Gift Card Transactions</span>\n    </div>\n      {/* <span className={styles.gitcard__top__title}> Fiat Transactions</span> */}\n      \n      {viewBuyGiftCardTrans && (\n        <TransactionModalBuyGiftCard\n          dateData={viewBuyGiftCardTrans.createdAt}\n          amount={viewBuyGiftCardTrans.amount}\n          status={viewBuyGiftCardTrans.status}\n          cardValue={viewBuyGiftCardTrans?.cardDetails?.cardValue}\n          reference={viewBuyGiftCardTrans.reference}\n          referenceCurrency={viewBuyGiftCardTrans.referenceCurrency}\n          quan={viewBuyGiftCardTrans?.cardDetails?.quantity}\n          setIsModalVisible={setBuyGiftCardDetails}\n          isModalVisible={buyGiftCardDetails}\n          cardCurrency={viewBuyGiftCardTrans?.cardDetails?.cardCurrency}\n          cardSlug={viewBuyGiftCardTrans.cardSlug}\n          estimatedUSDValue={viewBuyGiftCardTrans?.cardDetails?.estimatedUSDValue}\n        />\n      )}\n      \n      {viewGiftCardTrans && (\n        <TransactionModalBig\n          title=\"Gift Card\"\n          rate={viewGiftCardTrans.rate.amount}\n          Qua={viewGiftCardTrans.comments}\n          id={viewGiftCardTrans.id}\n          cardCode={viewGiftCardTrans.cardCode}\n          images={viewGiftCardTrans.images}\n          dateData={viewGiftCardTrans.created_at}\n          amount={viewGiftCardTrans.amount}\n          status={viewGiftCardTrans.status}\n          reference={viewGiftCardTrans.reference}\n          setIsModalVisible={setGiftCardTransDetails}\n          isModalVisible={giftCardTransDetails}\n        />\n      )}\n      <div className={styles.transactions}>\n        <div className={styles.transactions__top}>\n          <div className={styles.transactions__top__sort}></div>\n        </div>\n        <div className={styles.transactions__tab}>\n          <Tabs defaultActiveKey=\"1\" onChange={callback}>\n            \n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>Sell GiftCard Transactions</span>\n                </div>\n              }\n              key=\"4\"\n            >\n              <GiftCardTradesTab\n                fetchTrans={getGiftCardTrans}\n                transaction={giftCardTrans}\n                handleAction={(id) => {\n                  getGiftCardById({ transactionId: id });\n                  setGiftCardTransDetails(true);\n                }}\n              />\n            </TabPane>\n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>Buy GiftCard Transactions</span>\n                </div>\n              }\n              key=\"5\"\n            >\n              <BuyGiftCardTab\n                fetchTrans={getBuyGiftCardTrans}\n                transaction={BuyGiftCardTrans}\n                handleAction={(id) => {\n                  getBuyGiftCardTransById({ transactionId: id });\n                  setBuyGiftCardDetails(true);\n                }}\n              />\n            </TabPane>\n          </Tabs>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  user: state.user.user,\n  balance: state.btc.balance,\n  giftCardTrans: state.giftCard.GiftCardTransaction,\n  BuyGiftCardTrans: state.buyGiftCard.buyGiftCardTransaction,\n  withdrawalTrans: state.withdrawals.WithdrawalTransaction,\n  viewGiftCardTrans: state.giftCard.giftCardDetails,\n  viewBuyGiftCardTrans: state.buyGiftCard.buyGiftCardTransactionDetails,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  getGiftCardTrans: (data) => {\n    dispatch(getGiftCardTransactionHistory(data));\n  },\n  getBuyGiftCardTrans: (data) => {\n    dispatch(getAllBuyCardTransaction(data));\n  },\n  getBuyGiftCardTransById: (data) => {\n    dispatch(getBuyCardTransaction(data));\n  },\n  getGiftCardById: (data) => {\n    dispatch(getGiftCardTransaction(data));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Transactions);\n","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/index.js",["880","881"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Switch, Route } from \"react-router-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ConnectedRouter } from \"connected-react-router\";\nimport store, { history } from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport {\n  SignIn,\n  SignUp,\n  Verification,\n  Landing,\n  // About,\n  AboutRates,\n} from \"./pages\";\nimport { PrivateRoute } from \"./utils/PrivateRoute\";\nimport { WaitingComponent } from \"./utils/helper\";\n\nconst App = React.lazy(() => import(\"./App\"));\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <Switch>\n        <PrivateRoute allow path=\"/verification\" component={Verification} />\n        <Route exact path=\"/\">\n          {/* <Landing /> */}\n          <SignIn />\n        </Route>\n        {/* <Route path=\"/rates\">\n          <AboutRates />\n        </Route> */}\n        <Route path=\"/signin\">\n          <SignIn />\n        </Route>\n        <Route path=\"/signup\">\n          <SignUp />\n        </Route>\n        <Route path=\"/app\">\n          {/* <App /> */}\n          {WaitingComponent(App)}\n        </Route>\n        {/* <PrivateRoute path=\"/app\" component={WaitingComponent(App)} /> */}\n      </Switch>\n    </ConnectedRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["882","883"],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/reportWebVitals.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/App.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/utils/PrivateRoute.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/utils/helper.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/store/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/actions/giftCard.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/actions/payment.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/actions/bank.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/actions/user.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/actions/btc.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/actions/Auths.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/configs/AppConfig.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/constants/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/assets/svg/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/assets/png/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/Loading/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/services/GeneralService.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/services/PaymentService.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/services/BtcTransactionService.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/services/BankService.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/services/GiftCardService.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/services/AuthService.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/services/Referral.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/configs/EnvironmentConfig.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/on-boarding/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/sign-in/index.js",["884"],"import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { Modal, Input as AntInput } from \"antd\";\nimport { AuthHeader } from \"../../components/header\";\nimport Input from \"../../components/input\";\nimport Button from \"../../components/button\";\nimport styles from \"../styles.module.scss\";\nimport { loginUser, resetPassword, completeResetPassword } from \"../../redux/actions/Auths\";\n\nconst SignIn = (props) => {\n  const history = useHistory();\n  const [resetCode, setResetCode] = useState(\"\");\n  const [resetEmail, handleResetEmail] = useState(\"\");\n  const [email, handleEmail] = useState(\"\");\n  const [password, handlePassword] = useState(\"\");\n  const [newPassword, handleNewPassword] = useState(\"\");\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [switchReset, setSwitch] = useState(true);\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  const login = (e) => {\n    if (e) {\n      e.preventDefault();\n    }\n    props.submitLogin({\n      email,\n      password,\n    });\n  };\n\n  const resetPassword = (e) => {\n    props.ResetPasswordViaEmail({\n      email: resetEmail,\n    });\n    setSwitch(false)\n  };\n\n  const completeResetPassword = (e) => {\n    props.completeResetPassword({\n      email: resetEmail,\n      resetCode,\n      newPassword\n    });\n    handleCancel();\n    setSwitch(true);\n  };\n\n  return (\n    <div className={styles.allFont}>\n      <Modal\n        footer={null}\n        title=\"Reset Password\"\n        visible={isModalVisible}\n        onCancel={handleCancel}\n      >\n        {switchReset ? (\n          <div>\n            <Input\n              className={styles.auth__content__input__body}\n              inputClass={styles.auth__content__input}\n              placeholder=\"Email\"\n              onChange={(e) => handleResetEmail(e.target.value)}\n              value={resetEmail}\n              type=\"email\"\n              pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,9}$\"\n              required={true}\n              label=\"Please enter your registered email.\"\n            />\n            <Button\n              className={styles.auth__content__button}\n              form=\"full\"\n              onClick={(e) => resetPassword(e)}\n              text=\"Submit\"\n            />\n          </div>\n        ) : (\n          <div>\n            \n            <Input\n              className={styles.auth__content__input__body}\n              inputClass={styles.auth__content__input}\n              placeholder=\"123456\"\n              onChange={(e) => setResetCode(e.target.value)}\n              value={resetCode}\n              type=\"number\"\n              required={true}\n              label=\"Please enter the OTP sent to your email.\"\n            />\n            <Input\n              className={styles.auth__content__input__body}\n              inputClass={styles.auth__content__input}\n              placeholder=\"New Password\"\n              onChange={(e) => handleNewPassword(e.target.value)}\n              value={newPassword}\n              type=\"password\"\n              required={true}\n              label=\"New Password\"\n            />\n            <Button\n              className={styles.auth__content__button}\n              form=\"full\"\n              onClick={(e) => completeResetPassword(e)}\n              text=\"Submit\"\n            />\n          </div>\n        )}\n      </Modal>\n      <AuthHeader form=\"signin\">\n        <form className={styles.auth__content} onSubmit={(e) => login(e)}>\n          <h2 className={styles.auth__content__title}>Welcome back!</h2>\n          <h3 className={styles.auth__content__subTitle}>\n            Sign in to your Astro account\n          </h3>\n          \n          <Input\n            className={styles.auth__content__input__body}\n            inputClass={styles.auth__content__input}\n            placeholder=\"Email\"\n            onChange={(e) => handleEmail(e.target.value)}\n            value={email}\n            pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,9}$\"\n            type=\"email\"\n            required={true}\n            label=\"Email\"\n            style={{borderRadius:10}}\n          />\n          <Input\n            className={styles.auth__content__input__body}\n            inputClass={styles.auth__content__input}\n            placeholder=\"Password\"\n            onChange={(e) => handlePassword(e.target.value)}\n            value={password}\n            type=\"password\"\n            required={true}\n            label=\"Password\"\n            style={{borderRadius:10}}\n          />\n          <div  onClick={showModal} style={{cursor: \"pointer\"}} className={styles.auth__content__forgot}>Forgot Password?</div>\n          <Button\n            className={styles.auth__content__button}\n            form=\"full\"\n            type=\"submit\"\n            text=\"Login\"\n          />\n          <div\n            onClick={() => {\n              history.push(\"/signup\");\n            }}\n            className={styles.auth__content__alt}\n          >\n            <span>New to Astro? </span>\n            <span className={styles.auth__content__alt__link}>Sign Up</span>\n          </div>\n        </form>\n      </AuthHeader>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({});\n\nconst mapDispatchToProps = (dispatch) => ({\n  submitLogin: (data) => {\n    dispatch(loginUser(data));\n  },\n  ResetPasswordViaEmail: (data) => {\n    dispatch(resetPassword(data));\n  },\n  completeResetPassword: (data) => {\n    dispatch(completeResetPassword(data));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignIn);\n","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/rate/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/coin/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/sign-up/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/profile/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/home/index.js",["885","886","887","888","889","890","891","892","893"],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/transactions/index.js",["894","895"],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/Verification/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/landing/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/airtime/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/about-rates/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/btc/index.js",["896","897"],"import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\n// import { DashboardLayout } from \"../../components/layout\";\nimport {\n  ArrowLeftOutlined,\n  DownloadOutlined,\n  UploadOutlined,\n} from \"@ant-design/icons\";\nimport {\n  SellSection,\n  BuySection,\n  SendSection,\n  RecieveSection,\n} from \"./components\";\nimport styles from \"../styles.module.scss\";\nimport {\n  getBTCCurrentMarketTicker,\n  initialBTCBuyTransaction,\n  receiveBTCIntoWallet,\n  initialBTCSellTransaction,\n  initialBTCSellToExternalWalletTransaction,\n} from \"../../redux/actions/btc\";\nimport { getUserWallets } from \"../../redux/actions/Auths\";\nimport * as SVG from \"../../assets/svg\";\n\nconst BuyCoin = ({\n  active,\n  handleBack,\n  getBTCRates,\n  balance,\n  btcRates,\n  buyCoins,\n  buyBTC,\n  btcWalletAddress = \"\",\n  receiveBTC,\n  loading,\n  sellCoins,\n  sellBTC,\n  sellCoinsExternal,\n  sellBTCExternal,\n  fiatWallets,\n}) => {\n  const [state, setState] = useState({\n    btc: 0,\n    usd: 0,\n    ngn: 0,\n    ghs: 0,\n    walletBalance: 0,\n    creditCoinsWalletId:active.id\n  });\n  const [mode, setMode] = useState(\"buy\");\n  React.useEffect(() => {\n    const interval = setInterval(async () => {\n      getBTCRates({coin:active.Currency.code});\n    }, 60000);\n    return () => clearInterval(interval);\n  }, [getBTCRates]);\n  React.useEffect(() => {\n    receiveBTC({cryptoWalletId:active.id});\n    getBTCRates({coin:active.Currency.code});\n  }, [receiveBTC, getBTCRates]);\n  return (\n    <>\n      <div className={styles.gitcard__form}>\n        <div\n          className={styles.gitcard__form__holder}\n          style={{ alignItems: \"flex-start\" }}\n        >\n          <div onClick={handleBack} className={styles.gitcard__form__link}>\n            <SVG.ArrowLeft /> {active.Currency.name}\n          </div>\n          <div\n            className={styles.gitcard__form__body__image}\n            style={{\n              border: \"1px solid #fff\",\n              // boxShadow: \"-3px 4px 20px #00000026\",\n              position: \"relative\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            {active.icon}\n          </div>\n        </div>\n        {/* <div onClick={handleBack} className={styles.gitcard__form__link}>\n     <SVG.ArrowLeft /> Bitcoin\n     </div> */}\n        {/* <span className={styles.gitcard__top__title}></span> */}\n      \n        <div className={styles.sellPage}>\n          <div className={styles.sellPage__left}>\n            <div className={styles.sellPage__select}>\n              <div\n                onClick={() => {\n                  setMode(\"buy\");\n                  setState({\n                    ...state,\n                    btc: 0,\n                    usd: 0,\n                    ngn: 0,\n                    ghs: 0,\n                    walletBalance: 0,\n                  });\n                }}\n                className={`${styles.actionBtn} ${styles.btcButton} ${\n                  mode === \"buy\" && styles.active\n                }`}\n              >\n                <div className={`${styles.selling}`}>\n                  <ArrowLeftOutlined style={{ color: \"#fff\" }} />\n                </div>\n                <span>Buy</span>\n              </div>\n              <div\n                onClick={() => {\n                  setMode(\"sell\");\n                  setState({\n                    ...state,\n                    btc: 0,\n                    usd: 0,\n                    ngn: 0,\n                    ghs: 0,\n                    walletBalance: 0,\n                  });\n                }}\n                className={`${styles.actionBtn} ${styles.btcButton} ${\n                  mode === \"sell\" && styles.active\n                }`}\n              >\n                <div className={`${styles.buying}`}>\n                  <ArrowLeftOutlined style={{ color: \"#fff\" }} rotate={180} />\n                </div>\n                <span>Sell</span>\n              </div>\n\n              <div\n                onClick={() => {\n                  setMode(\"recieve\");\n                  setState({\n                    ...state,\n                    btc: 0,\n                    usd: 0,\n                    ngn: 0,\n                    ghs: 0,\n                    walletBalance: 0,\n                  });\n                }}\n                className={`${styles.actionBtn} ${styles.btcButton} ${\n                  mode === \"recieve\" && styles.active\n                }`}\n              >\n                <div className={`${styles.sell}`}>\n                  <DownloadOutlined style={{ color: \"#fff\" }} />\n                </div>\n                <span>Recieve</span>\n              </div>\n              <div\n                onClick={() => {\n                  setMode(\"send\");\n                  setState({\n                    ...state,\n                    btc: 0,\n                    usd: 0,\n                    ngn: 0,\n                    ghs: 0,\n                    walletBalance: 0,\n                  });\n                }}\n                className={`${styles.actionBtn} ${styles.btcButton} ${\n                  mode === \"send\" && styles.active\n                }`}\n              >\n                <div className={`${styles.buy}`}>\n                  <UploadOutlined style={{ color: \"#fff\" }} />\n                </div>\n                <span>Send</span>\n              </div>\n            </div>\n\n            <div className={styles.sellPage__top}>\n              {mode === \"buy\" && (\n                <BuySection\n                  balance={balance}\n                  rates={btcRates}\n                  fiatWallets={fiatWallets}\n                  {...{ state, setState, buyCoins, buyBTC, loading, active }}\n                />\n              )}\n\n              {mode === \"sell\" && (\n                <SellSection\n                  balance={balance}\n                  rates={btcRates}\n                  fiatWallets={fiatWallets}\n                  {...{ state, setState, sellCoins, sellBTC, loading, active }}\n                />\n              )}\n              {mode === \"send\" && (\n                <SendSection\n                  balance={balance}\n                  rates={btcRates}\n                  {...{\n                    state,\n                    setState,\n                    sellCoinsExternal,\n                    sellBTCExternal,\n                    loading,\n                    active\n                  }}\n                />\n              )}\n\n              {mode === \"recieve\" && (\n                <RecieveSection\n                  btcWalletAddress={btcWalletAddress}\n                  btcRates={btcRates}\n                  active={active}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  balance: state.btc.balance,\n  btcTrans: state.btc.latestBTCTransaction,\n  btcRates: state.btc.btcTicker,\n  buyBTC: state.btc.buyBTC,\n  btcWalletAddress: state.btc.btcWalletAddress,\n  loading: state.btc.loading,\n  sellBTC: state.btc.sellBTC,\n  sellBTCExternal: state.btc.sellBTCExternal,\n  btcTicker: state.btc.btcTicker\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  receiveBTC: (data) => {\n    dispatch(receiveBTCIntoWallet(data));\n  },\n  getBTCRates: (data) => {\n    dispatch(getBTCCurrentMarketTicker(data));\n  },\n  buyCoins: (data) => {\n    dispatch(initialBTCBuyTransaction(data));\n  },\n  sellCoins: (data) => {\n    dispatch(initialBTCSellTransaction(data));\n  },\n  sellCoinsExternal: (data) => {\n    dispatch(initialBTCSellToExternalWalletTransaction(data));\n  },\n  getBalance: () => {\n    dispatch(getUserWallets());\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BuyCoin);\n","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/about/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/bills/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/buy-giftcard/index.js",["898"],"import React, { useState, useEffect, useCallback } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Row, Col, Card, Drawer, Typography, Badge, Modal } from \"antd\";\nimport { ExclamationCircleOutlined, LoadingOutlined } from \"@ant-design/icons\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport _ from \"lodash\";\n\nimport { DashboardLayout } from \"../../components/layout\";\nimport Button from \"../../components/button\";\nimport Select from \"../../components/select\";\nimport Input from \"../../components/input\";\nimport styles from \"../styles.module.scss\";\nimport {\n  EmptyEntryWithTitle,\n  SuccessfulModal,\n} from \"../transactions/components\";\nimport {\n  getBuyCardsByCountries,\n  getBuyCardsBySearch,\n  getBuyCardsCardDetail,\n  initialBuyGiftCard,\n} from \"../../redux/actions/buyGiftCard\";\nimport { Money } from \"../../utils/helper\";\nimport { getBTCWalletDetails } from \"../../redux/actions/btc\";\n\nfunction getImgUrl(data) {\n  return `https://www.bitrefill.com/content/cn/b_rgb%3A${\n    (data?.logoBackground && data?.logoBackground?.replace(\"#\", \"\")) || \"FFFFFF\"\n  }%2Cc_pad%2Ch_212%2Cw_350/v${data?.logoVersion}/${data?.logoImage}.jpg`;\n}\n\nconst { Title, Text } = Typography;\nconst { confirm } = Modal;\n\nconst BuyGiftCard = (props) => {\n  // eslint-disable-next-line\n  const delayedQuery = useCallback(\n    _.debounce(\n      (q) => props.getBuyCardsBySearch({ country: \"\", searchQuery: q }),\n      500\n    ),\n    []\n  );\n  let location = useLocation();\n  const { pathname } = location;\n  const history = useHistory();\n  const [active, setActive] = useState(null);\n  const [open, setOpen] = useState(false);\n  const [state, setState] = useState({\n    country: \"usa\",\n    searchQuery: \"\",\n  });\n  const [card, setCard] = useState({});\n  useEffect(() => {\n    const url = new URL(window.location.href);\n    const slug = url.searchParams.get(\"slug\");\n    if (slug) {\n      props.getSingleCard({ card: slug });\n      setActive(true);\n    }\n    // eslint-disable-next-line\n  }, []);\n  useEffect(() => {\n    props.getBuyCardsByCountries();\n    props.getBalance();\n    props.getBuyCardsBySearch({ searchQuery: \"\", country: \"usa\" });\n    // eslint-disable-next-line\n  }, []);\n  function createMarkup() {\n    return { __html: props?.buyGiftCardDetails?.descriptions?.en || \"\" };\n  }\n  function extraInfo() {\n    return { __html: props?.buyGiftCardDetails?.extraInfo || \"\" };\n  }\n\n  const showPromiseConfirm = () => {\n    confirm({\n      title: `Purchase of Gift card`,\n      icon: <ExclamationCircleOutlined style={{ color: \"#19a9de\" }} />,\n      content: `Confirm the Purchase of ${Money(\n        card?.cardValue,\n        props?.buyGiftCardDetails?.currency\n      )} ${props?.buyGiftCardDetails?.name} Gift card`,\n      onOk() {\n        return handleSubmit();\n      },\n      onCancel() {},\n    });\n  };\n\n  const handleSubmit = async () => {\n    const payload = {\n      cardSlug: props?.buyGiftCardDetails?.slug,\n      cardCurrency: props?.buyGiftCardDetails?.currency,\n      cardValue: card.cardValue,\n      email: card.email || props?.user?.email,\n      amount: card.amount === \"null\" ? null : card.amount,\n      quantity: parseInt(card.quantity),\n      isCustom: false,\n      fiatWalletId: card.walletId,\n    };\n\n    await props.buyGiftCard(payload);\n    setOpen(true);\n    setActive(false);\n    setCard({});\n  };\n  return (\n    <DashboardLayout>\n      {open && props.initBuyGiftCardTransaction && (\n        <SuccessfulModal\n          title={`Your ${props?.buyGiftCardDetails?.name} (${props?.buyGiftCardDetails?.currency}) card purchase has been received. Please check your mail and the 'Transactions' tab for trade progress.`}\n          onClick={() => history.push(\"/app\")}\n          walletBalance={props.balance}\n        />\n      )}\n      <div className={styles.gitcard}>\n        <div style={{ marginLeft: 20, marginRight: 20 }}>\n          <div>\n            <Row>\n              <span\n                className={styles.gitcard__top__title}\n                style={{ marginLeft: 0 }}\n              >\n                Buy Gift cards{\" \"}\n              </span>\n            </Row>\n            <Row\n              style={{\n                marginTop: 10,\n                display: \"flex\",\n                flexWrap: \"wrap\",\n                justifyContent: \"space-between\",\n                alignItems: \"flex-end\",\n              }}\n            >\n              <Col\n                xs={24}\n                sm={24}\n                md={6}\n                lg={4}\n                xl={4}\n                className=\"gutter-row ml-4\"\n                span={6}\n              >\n                <Input\n                  name=\"search\"\n                  value={state.searchQuery}\n                  onChange={(e) => {\n                    delayedQuery(e.target.value);\n                    setState((state) => ({\n                      country: \"\",\n                      searchQuery: e.target.value,\n                    }));\n                  }}\n                  label=\"Search card\"\n                  placeholder=\"Steam\"\n                />\n              </Col>\n              <Col\n                xs={24}\n                sm={24}\n                md={6}\n                lg={6}\n                xl={6}\n                className=\"gutter-row ml-4\"\n                span={6}\n              >\n                <Select\n                  label=\"Select Country\"\n                  value={state.country}\n                  onSelect={(value) => {\n                    setState((state) => ({\n                      ...state,\n                      country: value,\n                    }));\n                    props.getBuyCardsBySearch({ ...state, country: value });\n                  }}\n                  name=\"country\"\n                  options={\n                    props.buyCardCountries &&\n                    props.buyCardCountries.map((item) => ({\n                      value: item.alpha2,\n                      render: (\n                        <div\n                          className={styles.countryOption}\n                          style={{ display: \"flex\", alignItems: \"center\" }}\n                        >\n                          <span>\n                            {item.icon}&emsp;{item.name}\n                          </span>\n                        </div>\n                      ),\n                    }))\n                  }\n                />\n              </Col>\n            </Row>\n          </div>\n          {!props.loading ? (\n            <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n              {props.buyGiftCards && props.buyGiftCards.length < 1 ? (\n                <div style={{ width: \"100%\" }}>\n                  <EmptyEntryWithTitle title=\"GiftCard\" action={false} />\n                </div>\n              ) : (\n                props.buyGiftCards &&\n                props.buyGiftCards.map((item, key) => {\n                  return (\n                    <Col\n                      key={key}\n                      xs={24}\n                      sm={24}\n                      md={12}\n                      lg={8}\n                      xl={6}\n                      className=\"gutter-row\"\n                      style={{ marginBottom: 20 }}\n                    >\n                      <Badge.Ribbon\n                        color={item.outOfStock ? \"#f50\" : \"\"}\n                        text={item.outOfStock ? \"Out Of Stock\" : \"Available\"}\n                      >\n                        <Card\n                          hoverable\n                          bordered={false}\n                          onClick={\n                            item?.outOfStock\n                              ? () => {}\n                              : () => {\n                                  props.getSingleCard({ card: item.slug });\n                                  history.push(`${pathname}?slug=${item.slug}`);\n                                  setActive(true);\n                                }\n                          }\n                          style={{\n                            width: \"100%\",\n                            border: \"1px solid #00000026\",\n                          }}\n                          cover={\n                            <img\n                              alt={\"card\" + key}\n                              style={\n                                item.logoNoMargin\n                                  ? {\n                                      width: \"100%\",\n                                      height: 200,\n                                      backgroundColor: item.logoBackground,\n                                    }\n                                  : {\n                                      width: \"100%\",\n                                      height: 200,\n                                      padding: \"30px\",\n                                      backgroundColor: item.logoBackground,\n                                    }\n                              }\n                              src={getImgUrl(item)}\n                            />\n                          }\n                        >\n                          <p\n                            style={{\n                              margin: 0,\n                              textAlign: \"center\",\n                              fontSize: \"1.3em\",\n                            }}\n                          >\n                            <strong>\n                              <p>{item.name}</p>\n                            </strong>\n                          </p>\n                        </Card>\n                      </Badge.Ribbon>\n                    </Col>\n                  );\n                })\n              )}\n            </Row>\n          ) : (\n            <div className={styles.buygiftcardloader}>\n              <LoadingOutlined />\n            </div>\n          )}\n        </div>\n        {active && (\n          <Drawer\n            title={state?.title}\n            width={\"60vw\"}\n            placement=\"right\"\n            onClose={() => {\n              setActive(false);\n              history.push(`${pathname}`);\n            }}\n            visible={props.buyGiftCardDetails ? active : false}\n            style={{ width: \"100vw\" }}\n          >\n            <div\n              className={styles.sellPage}\n              style={{\n                alignItems: \"center\",\n                flexDirection: \"column\",\n                margin: \"auto\",\n                maxWidth: 900,\n              }}\n            >\n              <Title level={3}>\n                {props?.buyGiftCardDetails?.name} (\n                {props?.buyGiftCardDetails?.currency})\n              </Title>\n              <img\n                alt={\"card\"}\n                style={\n                  props?.buyGiftCardDetails?.logoNoMargin\n                    ? {\n                        width: 300,\n                        height: 200,\n                        marginTop: 20,\n                        marginBottom: 20,\n                        boxShadow: \"-3px 4px 20px #00000026\",\n                        backgroundColor:\n                          props?.buyGiftCardDetails?.logoBackground,\n                      }\n                    : {\n                        width: 300,\n                        height: 200,\n                        marginTop: 20,\n                        marginBottom: 20,\n                        padding: \"30px\",\n                        boxShadow: \"-3px 4px 20px #00000026\",\n                        backgroundColor:\n                          props?.buyGiftCardDetails?.logoBackground,\n                      }\n                }\n                src={getImgUrl(props?.buyGiftCardDetails)}\n              />\n              <div style={{ marginTop: 30, marginBottom: 30 }}>\n                <Text>\n                  <div dangerouslySetInnerHTML={createMarkup()} />\n                </Text>\n              </div>\n              <div>\n                {props?.balance?.fiatWallets && (\n                  <Select\n                    labelClass={styles.largeMarginLabel}\n                    label=\"Select Wallet\"\n                    value={card.referenceCurrency}\n                    onSelect={(value) => {\n                      setCard((card) => ({\n                        ...card,\n                        referenceCurrency: value.Currency.code,\n                        walletId: value.id,\n                      }));\n                    }}\n                    name=\"wallet\"\n                    options={props.balance.fiatWallets.map((item) => ({\n                      render: `${item.Currency.code}`,\n                      value: item,\n                    }))}\n                  />\n                )}\n                <Input\n                  className={`${styles.input}`}\n                  value={card.quantity}\n                  label=\"Quantity\"\n                  placeholder=\"minimum is 1\"\n                  labelClass={styles.largeMarginLabel}\n                  onChange={(e) => {\n                    // console.log('user ni', props.user)\n                    setCard((card) => ({\n                      ...card,\n                      quantity: e.target.value,\n                    }));\n                  }}\n                  type=\"number\"\n                />\n                <Input\n                  className={`${styles.input}`}\n                  defaultValue={props?.user?.email}\n                  value={card.email}\n                  label=\"Email\"\n                  placeholder=\"Enter the email to send gift card to\"\n                  labelClass={styles.largeMarginLabel}\n                  onChange={(e) => {\n                    setCard((card) => ({\n                      ...card,\n                      email: e.target.value,\n                    }));\n                  }}\n                  type=\"email\"\n                />\n                <Select\n                  labelClass={styles.largeMarginLabel}\n                  hintClass={styles.largeMarginHint}\n                  label=\"Select amount\"\n                  value={`${card.cardValue}.${card.amount}`}\n                  name=\"amount\"\n                  onSelect={(value) =>\n                    setCard((card) => ({\n                      ...card,\n                      cardValue: value?.split(\".\")[0],\n                      amount: value?.split(\".\")[1],\n                    }))\n                  }\n                  options={props?.buyGiftCardDetails?.packages.map((item) => ({\n                    render: `${props?.buyGiftCardDetails?.currency} ${\n                      item.value\n                    } - Price: ${Money(item.usdPrice, \"USD\")}`,\n                    value: `${item.value}.${item.amount}`,\n                  }))}\n                  hint={<p dangerouslySetInnerHTML={extraInfo()} />}\n                />\n                <Button\n                  className={`${styles.gitcard__form__body__input}`}\n                  text=\"Buy\"\n                  form=\"full\"\n                  disabled={\n                    card.quantity == 0 ||\n                    !card.quantity ||\n                    !card.amount ||\n                    !card.cardValue ||\n                    !card.referenceCurrency\n                  }\n                  onClick={() => showPromiseConfirm()}\n                />\n              </div>\n            </div>\n          </Drawer>\n        )}\n      </div>\n    </DashboardLayout>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  user: state.user.user,\n  balance: state.btc.balance,\n  buyCardCountries: state.buyGiftCard.buyCardCountries,\n  buyGiftCards: state.buyGiftCard.buyGiftCards,\n  loading: state.buyGiftCard.loading,\n  buyGiftCardDetails: state.buyGiftCard.buyGiftCardDetails,\n  initBuyGiftCardTransaction: state.buyGiftCard.initBuyGiftCardTransaction,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getBuyCardsByCountries: () => {\n    dispatch(getBuyCardsByCountries());\n  },\n  getBuyCardsBySearch: (data) => {\n    dispatch(getBuyCardsBySearch(data));\n  },\n  getSingleCard: (data) => {\n    dispatch(getBuyCardsCardDetail(data));\n  },\n  buyGiftCard: (data) => {\n    dispatch(initialBuyGiftCard(data));\n  },\n  getBalance: () => {\n    dispatch(getBTCWalletDetails());\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BuyGiftCard);\n","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/sell-giftcard/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/settings/index.js",["899"],"import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Clipboard from \"react-clipboard.js\";\nimport { Switch } from \"antd\";\nimport Input from \"../../components/input\";\nimport Select from \"../../components/select\";\nimport Button from \"../../components/button\";\nimport { DashboardLayout } from \"../../components/layout\";\nimport { Copy } from \"../../assets/svg\";\nimport styles from \"../styles.module.scss\";\n\nimport {\n  changePassword,\n  getCryptoCurrencies,\n  getFiatCurrencies,\n  GetUserDetails,\n} from \"../../redux/actions/Auths\";\nimport { getBTCWalletDetails } from \"../../redux/actions/btc\";\nimport {\n  getUserBankAccount,\n  addUserBankAccount,\n  removeUserBankAccount,\n  getUserReferrals,\n  redeemUserReferralBonus,\n} from \"../../redux/actions/user\";\nimport {\n  getBankListByCountry,\n  verifyBankAccountDetails,\n  getBankBranchByID,\n} from \"../../redux/actions/bank\";\nimport { Table, Tag, Popconfirm, notification } from \"antd\";\nimport { date, Money } from \"../../utils/helper\";\nimport { EmptyEntryWithTitle } from \"../transactions/components\";\n\nexport const ReferralTable = ({ fetchTrans, transaction, handleAction }) => {\n  const [loading, setLoading] = useState(false);\n  const [pagination, setPagination] = useState({\n    current: 1,\n    pageSize: transaction && transaction.meta && transaction.meta.limit,\n    total: transaction && transaction.meta && transaction.meta.count,\n  });\n  React.useEffect(() => {\n    setPagination((pagination) => ({\n      current: pagination.current,\n      pageSize: transaction && transaction.meta && transaction.meta.limit,\n      total: transaction && transaction.meta && transaction.meta.count,\n    }));\n    setLoading(false);\n  }, [transaction]);\n\n  React.useEffect(() => {\n    fetchTrans({ skip: 0, limit: 10 });\n    // eslint-disable-next-line\n  }, []);\n\n  const handleTableChange = (pagination, filters, sorter) => {\n    fetch({\n      pagination,\n    });\n  };\n\n  const columns = [\n    {\n      title: \"Date\",\n      dataIndex: \"createdAt\",\n      render: (createdAt) => `${date(createdAt)}`,\n    },\n    {\n      title: \"Bonus Amount\",\n      dataIndex: \"bonus\",\n      key: \"x\",\n      render: (bonus) => <p>{Money(bonus.amount, bonus.currency)}</p>,\n    },\n    {\n      title: \"Redeemed\",\n      dataIndex: \"bonusRedeemed\",\n      key: \"x\",\n      render: (bonusRedeemed) => (\n        <Tag color={bonusRedeemed ? \"green\" : \"geekblue\"}>\n          {bonusRedeemed ? \"Yes\" : \"No\"}\n        </Tag>\n      ),\n    },\n    {\n      title: \"Date Redeemed\",\n      dataIndex: \"dateRedeemed\",\n      render: (dateRedeemed) => `${date(dateRedeemed)}`,\n    },\n    {\n      title: \"Friend Referred\",\n      dataIndex: \"userReferred\",\n      render: (userReferred) =>\n        `${userReferred && userReferred.lastName} ${\n          userReferred && userReferred.firstName\n        }`,\n    },\n    {\n      title: \"Action\",\n      dataIndex: \"id\",\n      key: \"x\",\n      render: (id, rec) => (\n        <Popconfirm\n          disabled={rec.bonusRedeemed}\n          title=\"You are about to redeem this bonus?\"\n          onConfirm={() => handleAction(id)}\n        >\n          {rec.bonusRedeemed ? \"Bonus already Redeemed\" : \"Redeem Bonus\"}\n        </Popconfirm>\n      ),\n    },\n  ];\n\n  const fetch = async (params = {}) => {\n    setLoading(true);\n    await fetchTrans({\n      skip: (params.pagination.current - 1) * params.pagination.pageSize,\n      limit: params.pagination.pageSize,\n    });\n    setPagination({\n      ...params.pagination,\n      total: transaction.meta && transaction.meta.count,\n    });\n  };\n  return (\n    <div style={{ overflowX: \"auto\" }}>\n      {transaction &&\n      transaction.transactions &&\n      transaction.transactions.length > 0 ? (\n        <Table\n          columns={columns}\n          // rowKey={(record) => record.login.uuid}\n          dataSource={transaction.transactions}\n          pagination={{\n            current: pagination.current,\n            pageSize: pagination.pageSize,\n            total: transaction.meta && transaction.meta.count,\n          }}\n          loading={loading}\n          onChange={handleTableChange}\n        />\n      ) : (\n        <EmptyEntryWithTitle title=\"Referrals\" />\n      )}\n    </div>\n  );\n};\n\nconst Profile = ({\n  user,\n  bankAccounts,\n  bankName,\n  verifyBankAccount,\n  getCurrentUser,\n  getUserBankDetails,\n  getBankList,\n  getBalance,\n  submitBankDetails,\n  removeUserBankDetails,\n  bankList,\n  changePassword,\n  getBankBranchList,\n  branchList,\n  getUserReferrals,\n  redeemReferralBonus,\n  userReferralTransaction,\n  cryptoCurrency,\n  fiatCurrency,\n  getMainFiatCurrency,\n  getMainCryptoCurrency,\n}) => {\n  useEffect(() => {\n    getCurrentUser();\n    // console.log(\"abh\", [...fiatCurrency, ...cryptoCurrency]);\n    getUserBankDetails();\n    getMainFiatCurrency();\n    getMainCryptoCurrency();\n    // getBankList();\n    getBalance();\n    // eslint-disable-next-line\n  }, []);\n  const INITIAL_STATE = {\n    accountNumber: \"\",\n    bankCode: \"\",\n    bvn: \"\",\n    accountName: \"\",\n    bankName: \"\",\n    isMobileMoney: false,\n    currency: \"\",\n    bankBranchCode: \"\",\n    bankBranchName: \"\",\n    accountType: {\n      value: \"\",\n      country: \"\",\n    },\n  };\n\n  const [state, setState] = useState(INITIAL_STATE);\n  const [pass, setNewPassword] = useState({\n    currentPassword: \"\",\n    newPassword: \"\",\n  });\n  const handlePasswordChange = ({ target: { name, value } }) => {\n    setNewPassword((pass) => ({ ...pass, [name]: value }));\n  };\n\n  const handleChange = ({ target: { name, value } }) => {\n    setState((state) => ({ ...state, [name]: value }));\n  };\n\n  useEffect(() => {\n    if (\n      state.accountType.value === \"ng-account\" &&\n      state.bankCode &&\n      state.accountNumber.length === 10 &&\n      !state.isMobileMoney\n    ) {\n      console.log(\"ng- account\");\n      verifyBankAccount({\n        bankCode: state.bankCode,\n        accountNumber: state.accountNumber,\n      });\n    } else if (\n      state.accountType.value === \"gh-account\" &&\n      state.bankCode &&\n      state.accountNumber.length === 12 &&\n      !state.isMobileMoney\n    ) {\n      console.log(\"gh - account\");\n      verifyBankAccount({\n        bankCode: state.bankCode,\n        accountNumber: state.accountNumber,\n      });\n    } else if (\n      state.accountType.value === \"gh-mobile\" &&\n      state.accountNumber.length === 11\n    ) {\n      console.log(\"mobile\");\n      verifyBankAccount({\n        bankCode: state.bankCode,\n        accountNumber: `233${state.accountNumber.substring(1,)}`,\n      });\n    }\n    // eslint-disable-next-line\n  }, [state.bankCode, state.accountNumber, verifyBankAccount]);\n  useEffect(() => {\n    if (branchList && branchList.length === 1) {\n      setState((state) => ({\n        ...state,\n        bankBranchName: branchList && branchList[0].branch_name,\n        bankBranchCode: branchList && branchList[0].branch_code,\n      }));\n    }\n  }, [branchList]);\n  useEffect(() => {\n    if (bankName && bankName.accountName) {\n      setState((state) => ({\n        ...state,\n        accountName: bankName && bankName.accountName,\n      }));\n    }\n  }, [bankName]);\n\n  const handleBankFormSubmit = (e) => {\n    if (e) {\n      e.preventDefault();\n    }\n    submitBankDetails({\n      ...state,\n      currencyId: state.currency === \"GH\" ? 2 : 1,\n      accountType: state.accountType,\n    });\n    setTimeout(() => {\n      setState((state) => ({\n        ...state,\n        currency: \"\",\n        accountNumber: \"\",\n        bankCode: \"\",\n        bvn: \"\",\n        accountName: \"\",\n        bankName: \"\",\n        bankBranchCode: \"\",\n        bankBranchName: \"\",\n        isMobileMoney: false,\n      }));\n    }, 2000);\n  };\n\n  const handleMobileMoneyBankCode = (value) => {\n    handleChange({ target: { name: \"bankCode\", value: value } });\n    handleChange({ target: { name: \"bankName\", value: \"\" } });\n    handleChange({ target: { name: \"accountName\", value: \"\" } });\n    handleChange({ target: { name: \"accountNumber\", value: \"\" } });\n    handleChange({ target: { name: \"accountNumber\", value: \"\" } });\n    handleChange({ target: { name: \"bankBranchCode\", value: \"\" } });\n    handleChange({ target: { name: \"bankBranchName\", value: \"\" } });\n  };\n\n  const handleBankCode = (value) => {\n    handleChange({ target: { name: \"bankCode\", value: value.split(\",\")[0] } });\n    handleChange({ target: { name: \"bankName\", value: value.split(\",\")[1] } });\n    handleChange({ target: { name: \"accountName\", value: \"\" } });\n    handleChange({ target: { name: \"accountNumber\", value: \"\" } });\n    handleChange({ target: { name: \"accountNumber\", value: \"\" } });\n    handleChange({ target: { name: \"bankBranchCode\", value: \"\" } });\n    handleChange({ target: { name: \"bankBranchName\", value: \"\" } });\n    if (state.currency === \"GH\") getBankBranchList({ id: value.split(\",\")[2] });\n  };\n  const handleDelAccount = (id) => {\n    removeUserBankDetails({ bankAccountId: id });\n  };\n  const handleChangePassword = (e) => {\n    if (e) {\n      e.preventDefault();\n    }\n    changePassword(pass);\n  };\n  return (\n    <DashboardLayout bg=\"#fff\">\n      <div className={styles.profile} style={{ margin: 0 }}>\n        <div className={styles.profilePersonal}>\n          <div\n            className={styles.profileSection}\n            style={{ marginBottom: 20, paddingBottom: 0 }}\n          >\n            <div className={styles.profileSectionLeft}>\n              <span className={styles.main}>Basic Information</span>\n            </div>\n          </div>\n          <div\n            className={styles.profilePersonalEntry}\n            style={{ lineHeight: 18, wordWrap: \"break-word\", width: \"auto\" }}\n          >\n            <span>Email</span>\n            <span>{user && user.email}</span>\n          </div>\n          <div\n            className={styles.profilePersonalEntry}\n            style={{ lineHeight: 18, wordWrap: \"break-word\", width: \"auto\" }}\n          >\n            <span>Name</span>\n            <span>{`${(user && user.Profile.first_name) || `-`} ${\n              (user && user.Profile.last_name) || `-`\n            }`}</span>\n          </div>\n          <div\n            className={styles.profilePersonalEntry}\n            style={{ lineHeight: 18, wordWrap: \"break-word\", width: \"auto\" }}\n          >\n            <span>Password</span>\n            <span>*********</span>\n          </div>\n          <div\n            className={styles.profilePersonalEntry}\n            style={{ lineHeight: 18, wordWrap: \"break-word\", width: \"auto\" }}\n          >\n            <span>Referral Code</span>\n            <span style={{ display: \"flex\", alignItems: \"center\" }}>\n              <small>{(user && user.referral_code) || \"---\"}</small>\n              <Clipboard\n                style={{ padding: 8 }}\n                component=\"div\"\n                data-clipboard-text={`${\n                  window && window.location && window.location.origin\n                }/signup?code=${user && user.referral_code}`}\n                onSuccess={() =>\n                  notification.success({\n                    message: \"copied\",\n                    duration: 1,\n                  })\n                }\n              >\n                <Copy title=\"copy referral link\" />\n              </Clipboard>\n            </span>\n          </div>\n        </div>\n        <div className={styles.profileBank}>\n          <div className={styles.profileSection}>\n            <div className={styles.profileSectionLeft}>\n              <span className={styles.main}>Bank Accounts</span>\n              <span className={styles.sub}>List of Bank Accounts </span>\n            </div>\n          </div>\n          <div\n            className={styles.profileBankContent}\n            style={{ maxHeight: 540, overflowY: \"auto\" }}\n          >\n            {bankAccounts && bankAccounts.length > 0 ? (\n              bankAccounts.map((item, index) => (\n                <div\n                  key={index}\n                  className={styles.profilePersonalEntry}\n                  style={{\n                    padding: \"15px 10px\",\n                    border: \"1px solid #c4c4c4\",\n                    maxWidth: 300,\n                    flexWrap: \"wrap\",\n                    flexDirection: \"column\",\n                    alignItems: \"flex-start\",\n                    width: \"100%\",\n                  }}\n                >\n                  <span\n                    style={{ width: \"100%\" }}\n                  >{`${item.account_number}`}</span>\n                  <span style={{ width: \"100%\" }}>{`${\n                    item.details.is_mobile_money\n                      ? \"Mobile Money Account\"\n                      : item.details.account_name\n                  }`}</span>\n                  <span style={{ width: \"100%\" }}>{`${\n                    item.details.is_mobile_money\n                      ? item.bank_code\n                      : item.details.bankName\n                  }`}</span>\n                  <Button\n                    className={styles.deleteButton}\n                    onClick={() => handleDelAccount(item.id)}\n                    style={{\n                      marginTop: 20,\n                      background: \"#e82127\",\n                      color: \"#fff\",\n                    }}\n                    text=\"Delete Bank Account\"\n                  />\n                </div>\n              ))\n            ) : (\n              <EmptyEntryWithTitle title=\"Bank Account\" />\n            )}\n          </div>\n          <div className={styles.profileSection}>\n            <div className={styles.profileSectionLeft}>\n              <span className={styles.sub}>\n                Add a primary bank account and trade easily{\" \"}\n              </span>\n            </div>\n          </div>\n          <form\n            onSubmit={(e) => handleBankFormSubmit(e)}\n            className={styles.profileBankContent}\n          >\n            <Select\n              labelClass={styles.profileBankInputLabel}\n              className={styles.profileBankInput}\n              label=\"Select Account Type\"\n              value={state.currency}\n              onSelect={(value) => {\n                setState((state) => ({\n                  ...state,\n                  currency: value.country,\n                  accountType: value,\n                  accountNumber: \"\",\n                  bankCode: \"\",\n                  bvn: \"\",\n                  accountName: \"\",\n                  bankName: \"\",\n                  bankBranchCode: \"\",\n                  bankBranchName: \"\",\n                  isMobileMoney: false,\n                }));\n                if (value !== \"US\") {\n                  getBankList({ country: value.country });\n                }\n              }}\n              name=\"select payment currency\"\n              // options={fiatCurrency.map((item)=> ({\n              //   render: item.name,\n              //   value:item.code.substring(0,2)\n              // }))}\n              options={[\n                {\n                  render: \"Nigeria Accounts\",\n                  value: {\n                    country: \"NG\",\n                    value: \"ng-account\",\n                    name: \"Nigeria Account\",\n                  },\n                },\n                {\n                  render: \"Ghana Accounts\",\n                  value: {\n                    country: \"GH\",\n                    value: \"gh-account\",\n                    name: \"Ghana Account\",\n                  },\n                },\n                {\n                  render: \"Ghana Mobile Money\",\n                  value: {\n                    country: \"GH\",\n                    value: \"gh-mobile\",\n                    name: \"Ghana Mobile Money\",\n                  },\n                },\n              ]}\n            />\n            {/* {state.currency === \"GH\" && (\n              <div\n                className={styles.profileBankInput}\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  flex: \"1 1\",\n                  position: \"relative\",\n                  marginBottom: 15,\n                }}\n              >\n                <label\n                  style={{\n                    fontSize: 14,\n                    color: \"#0d0d0b\",\n                    fontWeight: \"450\",\n                    marginBottom: 6,\n                  }}\n                  className={styles.profileBankInputLabel}\n                >\n                  Mobile Money Account\n                </label>\n                <Switch\n                  checked={state.isMobileMoney}\n                  onChange={(value) => {\n                    setState((state) => ({\n                      ...state,\n                      isMobileMoney: value,\n                      bankName: \"\",\n                      bankBranchCode: \"\",\n                      bankBranchName: \"\",\n                      bankCode: \"\",\n                    }));\n                  }}\n                  checkedChildren=\"Yes\"\n                  unCheckedChildren=\"No\"\n                />\n              </div>\n            )} */}\n            {state.accountType.value === \"ng-account\" && (\n              <Select\n                name=\"bankCode\"\n                labelClass={styles.profileBankInputLabel}\n                className={styles.profileBankInput}\n                value={state.bankCode}\n                onSelect={(value) => handleBankCode(value)}\n                label=\"Bank Name\"\n                placeholder=\"Select your bank\"\n                options={bankList?.map((i) => ({\n                  value: `${i.code},${i.name}`,\n                  render: i.name,\n                }))}\n              />\n            )}\n            {state.accountType.value === \"gh-account\" && (\n              <Select\n                name=\"bankCode\"\n                className={styles.profileBankInput}\n                value={state.bankCode}\n                onSelect={(value) => handleBankCode(value)}\n                label=\"Bank\"\n                placeholder=\"Select your bank\"\n                options={bankList?.map((i) => ({\n                  value: `${i.code},${i.name},${i.id}`,\n                  render: i.name,\n                }))}\n              />\n            )}\n            {state.accountType.value === \"gh-account\" && (\n              <Select\n                name=\"bankBranchName\"\n                labelClass={styles.profileBankInputLabel}\n                className={styles.profileBankInput}\n                value={`${state.bankBranchCode},${state.bankBranchName}`}\n                onSelect={(value) => {\n                  setState((state) => ({\n                    ...state,\n                    bankBranchName: value.split(\",\")[1],\n                    bankBranchCode: value.split(\",\")[0],\n                  }));\n                }}\n                label=\"Bank Branch\"\n                placeholder=\"Select your bank branch\"\n                options={\n                  branchList &&\n                  branchList?.map((i) => ({\n                    value: `${i.branch_code},${i.branch_name}`,\n                    render: i.branch_name,\n                  }))\n                }\n              />\n            )}\n            {state.accountType.value === \"gh-mobile\" && (\n              <Select\n                name=\"bankCode\"\n                className={styles.profileBankInput}\n                value={state.bankCode}\n                onSelect={(value) => handleMobileMoneyBankCode(value)}\n                label=\"Mobile Network\"\n                placeholder=\"Select your bank\"\n                options={[\n                  { render: \"MTN\", value: \"MTN\" },\n                  { render: \"AIRTEL\", value: \"AIRTEL\" },\n                  { render: \"TIGO\", value: \"TIGO\" },\n                  { render: \"VODAFONE\", value: \"VODAFONE\" },\n                ]}\n              />\n            )}\n            {state.currency && state.accountType.value !== \"gh-mobile\" && (\n              <Input\n                name=\"accountNumber\"\n                value={state.accountNumber}\n                labelClass={styles.profileBankInputLabel}\n                className={styles.profileBankInput}\n                onChange={handleChange}\n                label=\"Account Number\"\n                placeholder=\"e.g 01236548\"\n                maxLength=\"15\"\n                hint=\"Please ensure to input the correct account number\"\n              />\n            )}\n            {state.accountType.value === \"gh-mobile\" && (\n              <Input\n                name=\"accountNumber\"\n                value={state.accountNumber}\n                labelClass={styles.profileBankInputLabel}\n                className={styles.profileBankInput}\n                onChange={handleChange}\n                label=\"Mobile Number\"\n                placeholder=\"e.g 01236548\"\n                maxLength=\"11\"\n                hint=\"Please ensure to input the correct account number\"\n              />\n            )}\n            {state.accountType.value !== \"gh-mobile\" && (\n              <Input\n                name=\"accountName\"\n                value={state.accountName}\n                labelClass={styles.profileBankInputLabel}\n                className={styles.profileBankInput}\n                onChange={handleChange}\n                label=\"Account Name\"\n                placeholder=\"Enter your account name\"\n                readOnly={true}\n                disabled\n              />\n            )}\n\n            <div className={styles.btnPair}>\n              <Button\n                disabled={\n                  !state.accountNumber || !state.currency || !state.bankCode\n                }\n                text=\"Save\"\n                type=\"submit\"\n                form=\"full\"\n              />\n            </div>\n          </form>\n        </div>\n        <div className={styles.profileBank}>\n          <div className={styles.profileSection}>\n            <div className={styles.profileSectionLeft}>\n              <span className={styles.main}>Referral</span>\n              <span className={styles.sub}>Redeem Your Referrals</span>\n            </div>\n          </div>\n          <ReferralTable\n            fetchTrans={getUserReferrals}\n            transaction={userReferralTransaction}\n            handleAction={(id) => {\n              redeemReferralBonus({ referralId: id });\n            }}\n          />\n        </div>\n        <div className={styles.profileSecurity}>\n          <div className={styles.profileSection}>\n            <div className={styles.profileSectionLeft}>\n              <span className={styles.main}>Security</span>\n              <span className={styles.sub}>Change password</span>\n            </div>\n          </div>\n          <form\n            onSubmit={handleChangePassword}\n            className={styles.profileSecurityContent}\n          >\n            <Input\n              placeholder=\"Current Password\"\n              label=\"Current Password\"\n              name=\"currentPassword\"\n              onChange={handlePasswordChange}\n              required={true}\n              minLength={\"8\"}\n              type=\"password\"\n              pattern={\"^{8,}$\"}\n              value={pass.currentPassword}\n              labelClass={styles.profileBankInputLabel}\n              className={styles.input}\n            />\n            <Input\n              placeholder=\"New Password\"\n              label=\"New Password\"\n              name=\"newPassword\"\n              onChange={handlePasswordChange}\n              required={true}\n              minLength={\"8\"}\n              type=\"password\"\n              pattern={\"^{8,}$\"}\n              value={pass.newPassword}\n              labelClass={styles.profileBankInputLabel}\n              className={styles.input}\n            />\n            <div className={styles.btnPair} style={{ marginTop: 20 }}>\n              <Button form=\"full\" type=\"submit\" text=\"Change Password\" />\n            </div>\n          </form>\n        </div>\n      </div>\n    </DashboardLayout>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  user: state.user.user,\n  fiatCurrency: state.user.fiatCurrency,\n  cryptoCurrency: state.user.cryptoCurrency,\n  balance: state.btc.balance,\n  branchList: state.bank.bankBranchList,\n  bankList: state.bank.bankList,\n  bankName: state.bank.bankDetails,\n  bankAccounts: state.bank.bankAccounts,\n  UserReferrals: state.user.userReferralTransaction,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getCurrentUser: () => {\n    dispatch(GetUserDetails());\n  },\n  getMainFiatCurrency: () => {\n    dispatch(getFiatCurrencies());\n  },\n  getMainCryptoCurrency: () => {\n    dispatch(getCryptoCurrencies());\n  },\n  getUserBankDetails: () => {\n    dispatch(getUserBankAccount());\n  },\n  getBankBranchList: (data) => {\n    dispatch(getBankBranchByID(data));\n  },\n  getBankList: (data) => {\n    dispatch(getBankListByCountry(data));\n  },\n  getBalance: () => {\n    dispatch(getBTCWalletDetails());\n  },\n  verifyBankAccount: (data) => {\n    dispatch(verifyBankAccountDetails(data));\n  },\n  submitBankDetails: (data) => {\n    dispatch(addUserBankAccount(data));\n  },\n  removeUserBankDetails: (data) => {\n    dispatch(removeUserBankAccount(data));\n  },\n  changePassword: (data) => {\n    dispatch(changePassword(data));\n  },\n  getUserReferrals: (data) => {\n    dispatch(getUserReferrals(data));\n  },\n  redeemReferralBonus: (data) => {\n    dispatch(redeemUserReferralBonus(data));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);\n","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/crypto/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/reducer/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/services/FetchInterceptor.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/sell-giftcard/components.js",["900","901","902","903","904","905"],"import React, { useState, useEffect } from \"react\";\nimport { Progress, Modal, notification } from \"antd\";\nimport { CloseCircleOutlined } from \"@ant-design/icons\";\nimport Input from \"../../components/input\";\nimport Select from \"../../components/select\";\nimport Button from \"../../components/button\";\nimport Upload from \"../../components/upload\";\nimport * as SVG from \"../../assets/svg\";\nimport { SuccessfulModal } from \"../transactions/components\";\nimport {\n  // countryOptions,\n  processImageToCloudinary,\n  Money,\n} from \"../../utils/helper\";\nimport { history } from \"../../redux/store\";\n\nimport styles from \"../styles.module.scss\";\nimport { connect } from \"react-redux\";\nimport {\n  getGiftCardCodes,\n  getGiftCardDetails,\n  initialGiftCardSale,\n  uploadFileToBucket,\n} from \"../../redux/actions/giftCard\";\n\n// const getHumanForm = (name) =>\n//   name\n//     .replace(\"-\", \" \")\n//     .split(\" \")\n//     .map((word) => `${word[0].toUpperCase()}${word.slice(1)}`)\n//     .join(\" \");\n\nconst getTerm = (item) => {\n  switch (item) {\n    case \"itunes\":\n      return (\n        <div>\n          <p>\n            This trade is for itunes/apple $50 - $500 (Physical Gift Card and\n            ecodes are accepted)\n          </p>\n          <p>iTunes gift card codes start with X and are 16-digits.</p>\n          <p>\n            $500 can be done as apple or itunes, Apple store rate is higher but\n            takes longer time, please upload via apple store section if you\n            would love to redeem $500 as apple.\n          </p>\n          <p>\n            confirm that all info (Card value, Card quantity,country, etc.) are\n            accurately uploaded before submission. You will not be able to\n            update or modify this once a transaction has been submitted and\n            confirmed.\n          </p>\n          <p>\n            Make sure that the gift card is properly scratched and the code is\n            clear and complete. You do not require a receipt for this trade, you\n            can upload it if you have.\n          </p>\n          <p>\n            Giftcards uploaded in a wrong section will be forwarded to the right\n            column and credited at the current rate in that section.\n          </p>\n          <p>\n            {\" \"}\n            This trade will take only a few minutes. a notification will be sent\n            to you after confirmation\n          </p>\n          <p> If you need to ask a question, pls reach us via the live chat.</p>\n        </div>\n      );\n    case \"walmart\":\n      return (\n        <div>\n          <p>\n            This trade is for WALMART gift card physical cards only , NO ECODES\n            ARE ACCEPTED\n          </p>\n          <p>All denominations from $100 - 1000 are accepted</p>\n          <p>\n            Please confirm that all info (Card value, Card quantity,country,\n            etc.) are accurately uploaded before submission. You will not be\n            able to update or modify this once a transaction has been submitted\n            and confirmed.\n          </p>\n          <p>\n            Make sure that the gift card is properly scratched and the code is\n            clear and complete. You do not require a receipt for this trade, you\n            can upload it if you have.\n          </p>\n          <p>\n            Giftcards uploaded in a wrong section will be forwarded to the right\n            column and credited at the current rate in that section.\n          </p>\n          <p>\n            Walmart normally takes a while to load , pls be patient . a\n            notification will be sent to you after confirmation\n          </p>\n          <p> If you need to ask a question, pls reach us via the live chat.</p>\n        </div>\n      );\n    case \"apple\":\n      return (\n        <div>\n          <p>\n            1. This trade is for USA Apple Store Gift Card Physical Card\n            purchased from the store and NOT ecode.\n          </p>\n          <p>2. The minimum accepted value for this trade is $400. </p>\n          <p>\n            3 We start redeeming apple store cards at 8 am USA time , 1 pm\n            Ghana, 2pm Nigerian time.\n          </p>\n          <p>Apple store gift card codes start with X and are 16-digits.</p>\n          <p>\n            confirm that all info (Card value, Card quantity,country, etc.) are\n            accurately uploaded before submission. You will not be able to\n            update or modify this once a transaction has been submitted and\n            confirmed.\n          </p>\n          <p>\n            Make sure that the gift card is properly scratched and the code is\n            clear and complete. You do not require a receipt for this trade, you\n            can upload it if you have.\n          </p>\n          <p>\n            Giftcards uploaded in a wrong section will be forwarded to the right\n            column and credited at the current rate in that section\n          </p>\n          <p>\n            Apple store normally takes a while to load , pls be patient . a\n            notification will be sent to you after confirmation\n          </p>\n          <p> If you need to ask a question, pls reach us via the live chat.</p>\n        </div>\n      );\n    case \"nike\":\n      return (\n        <div>\n          <p>\n            This Trade is for USA NIKE Gift Card Physical Card Only, Ecodes are\n            not accepted.\n          </p>\n          <p>\n            confirm that all info (Card value, Card quantity,country, etc.) are\n            accurately uploaded before submission. You will not be able to\n            update or modify this once a transacton has been submitted and\n            confirmed.\n          </p>\n          <p>\n            Make sure that the gift card is properly scratched and the code is\n            clear and complete.You do not require a receipt for this trade, you\n            can upload it if you have.\n          </p>\n          <p>\n            Giftcards uploaded in a wrong section will be forwarded to the right\n            column and credited at the current rate in that section.\n          </p>\n          <p>\n            {\" \"}\n            Nike gift cards normally takes a while to load , pls be patient . a\n            notification will be sent to you after confirmation\n          </p>\n          <p> If you need to ask a question, pls reach us via the live chat.</p>\n        </div>\n      );\n    case \"visa\":\n      return (\n        <div>\n          <p>\n            This transaction is for physical VISA gift card starting with either\n            of these 4 codes 4358,4034,5113,4912,4852.{\" \"}\n          </p>\n          <p>\n            Please upload a receipt with the front and back photos of the cards\n          </p>\n          <p>\n            confirm that all info (Card value, Card quantity,country, etc.) are\n            accurately uploaded before submission. You will not be able to\n            update or modify this once a transacton has been submitted and\n            confirmed.\n          </p>\n          <p>\n            Make sure that the gift card is properly scratched and the code is\n            clear and complete. You do not require a receipt for this trade, you\n            can upload it if you have.\n          </p>\n          <p>\n            Giftcards uploaded in a wrong section will be forwarded to the right\n            column and credited at the current rate in that section.\n          </p>\n          <p>\n            {\" \"}\n            This trade will take quite a while,pls be patient. a notification\n            will be sent to you after confirmation\n          </p>\n          <p> If you need to ask a question, pls reach us via the live chat.</p>\n        </div>\n      );\n    case \"amex-gold\":\n      return (\n        <div>\n          <p>\n            1. This transaction is for USA American Express Gift Card Physical\n            Card Gold color purchased from the store and NOT ecode.{\" \"}\n          </p>\n          <p>\n            2. The acceptable denomination for this trade is between $50 - $500.\n            The total amount can be more, but denomination of each gift card\n            must not be less than $50 and more than $500\n          </p>\n          <p>\n            3. Kindly upload receipts with the card front and back photos\n            showing all codes\n          </p>\n          <p>\n            confirm that all info (Card value, Card quantity,country, etc.) are\n            accurately uploaded before submission. You will not be able to\n            update or modify this once a transacton has been submitted and\n            confirmed.\n          </p>\n          <p>\n            Make sure that the gift card is properly scratched and the code is\n            clear and complete.\n          </p>\n          <p>\n            Giftcards uploaded in a wrong section will be forwarded to the right\n            column and credited at the current rate in that section.\n          </p>\n          <p>\n            This trade will take quite a while,pls be patient. a notification\n            will be sent to you after confirmation\n          </p>\n          <p> If you need to ask a question, pls reach us via the live chat.</p>\n        </div>\n      );\n    case \"amazon\":\n      return (\n        <div>\n          <p>\n            1. This transaction is for USA Amazon Gift Card With ll reciepts.\n            You are to upload pictures of receipt(s) and card(s).\n          </p>\n          <p>\n            2. Ensure that your pictures are clear and the card number of your\n            receipt and gift card correspond. If the payment receipt doesnt have\n            serial number pls add the activation receipt.\n          </p>\n          <p>\n            confirm that all info (Card value, Card quantity,country, etc.) are\n            accurately uploaded before submission. You will not be able to\n            update or modify this once a transacton has been submitted and\n            confirmed.\n          </p>\n          <p>\n            Make sure that the gift card is properly scratched and the code is\n            clear and complete. You do not require a receipt for this trade, you\n            can upload it if you have.\n          </p>\n          <p>\n            Giftcards uploaded in a wrong section will be forwarded to the right\n            column and credited at the current rate in that section.\n          </p>\n          <p>\n            This trade will take only a few minutes. a notification will be sent\n            to you after confirmation\n          </p>\n          <p>If you need to ask a question, pls reach us via the live chat.</p>\n        </div>\n      );\n    case \"onevanilla\":\n      return (\n        <div>\n          <p>\n            {\" \"}\n            This trade is for USA OneVanilla Visa/Mastercard Gift Card Physical\n            Card bought from the store starting with either of the following 4\n            digits: 4847, 4358, 4941, 4097, 4142, 4118 5432, 5164, 5432 and 5113\n          </p>\n          <p>\n            Pls upload front and back pictures of card showing all codes with\n            the receipt too\n          </p>\n          <p>\n            WE DO NOT ACCEPT MYVANILLA GIFT CARDS … ONLY ONEVANILLA IS ACCEPTED\n          </p>\n          <p>MYVANILLA TRADES WILL NOT BE PAID FOR</p>\n          <p>Ecodes are not accepted</p>\n          <p>Please upload receipts along with the cards.</p>\n          <p>\n            OneVanilla Visa/Mastercard gift cards transactions can take a while.\n            Please be patient and wait for confirmation from our admin.\n          </p>\n          <p>A notification will be sent to you after confirmation</p>\n          <p>If you need to ask a question, click the live chat button</p>\n        </div>\n      );\n    case \"nordstrom\":\n      return (\n        <div>\n          <p>1. This trade is for USA Nordstrom Gift Card </p>\n          <p>2. Make sure that the code is complete, correct and valid.</p>\n          <p>\n            3. Nordstrom gift cards have a 16 digit card number and 8 access\n            number\n          </p>\n          <p>\n            confirm that all info (Card value, Card quantity,country, etc.) are\n            accurately uploaded before submission. You will not be able to\n            update or modify this once a transacton has been submitted and\n            confirmed.\n          </p>\n          <p>\n            Make sure that the gift card is properly scratched and the code is\n            clear and complete. You do not require a receipt for this trade, you\n            can upload it if you have.\n          </p>\n          <p>\n            Giftcards uploaded in a wrong section will be forwarded to the right\n            column and credited at the current rate in that section.\n          </p>\n          <p>\n            {\" \"}\n            This trade will take quite a while,pls be patient. a notification\n            will be sent to you after confirmation\n          </p>\n          <p> If you need to ask a question, pls reach us via the live chat.</p>\n        </div>\n      );\n    case \"sephora\":\n      return (\n        <div>\n          <p>\n            1. This trade is for USA Sephora and JC penney Gift Card Physical\n            Card physical and ecode\n          </p>\n          <p>2. All denominations accepted</p>\n          <p>\n            3. Sephora gift cards have a 16 digit card number and 8 access\n            number\n          </p>\n          <p>\n            confirm that all info (Card value, Card quantity,country, etc.) are\n            accurately uploaded before submission. You will not be able to\n            update or modify this once a transacton has been submitted and\n            confirmed.\n          </p>\n          <p>\n            Make sure that the gift card is properly scratched and the code is\n            clear and complete. You do not require a receipt for this trade, you\n            can upload it if you have.\n          </p>\n          <p>\n            Giftcards uploaded in a wrong section will be forwarded to the right\n            column and credited at the current rate in that section.\n          </p>\n          <p>\n            This trade will take only a few minutes. a notification will be sent\n            to you after confirmation\n          </p>\n          <p> If you need to ask a question, pls reach us via the live chat.</p>\n        </div>\n      );\n    case \"google-play\":\n      return (\n        <div>\n          <p>\n            This trade is for Google Play Cards (Physical Gift Card and ecodes\n            are accepted)\n          </p>\n          <p>\n            We need more info to redeem your card’ is a possible error with\n            google play cards. We cannot do anything about it if this happens\n            with your card(s)\n          </p>\n          <p>\n            confirm that all info (Card value, Card quantity,country, etc.) are\n            accurately uploaded before submission. You will not be able to\n            update or modify this once a transacton has been submitted and\n            confirmed.\n          </p>\n          <p>\n            Make sure that the gift card is properly scratched and the code is\n            clear and complete. You do not require a receipt for this trade, you\n            can upload it if you have.\n          </p>\n          <p>\n            Giftcards uploaded in a wrong section will be forwarded to the right\n            column and credited at the current rate in that section.\n          </p>\n          <p>\n            This trade will take only a few minutes. a notification will be sent\n            to you after confirmation\n          </p>\n          <p> If you need to ask a question, pls reach us via the live chat.</p>\n        </div>\n      );\n    case \"ebay\":\n      return (\n        <div>\n          <p>\n            This trade is for ebay USD (Physical Gift Card and ecodes are\n            accepted)\n          </p>\n          <p>\n            “We cant find a gift card with that number”, “No balance on this\n            card” are common errors related to ebay gift cards, please we do not\n            have a solution for issues like these as of now\n          </p>\n          <p>\n            confirm that all info (Card value, Card quantity,country, etc.) are\n            accurately uploaded before submission. You will not be able to\n            update or modify this once a transacton has been submitted and\n            confirmed.\n          </p>\n          <p>\n            Make sure that the gift card is properly scratched and the code is\n            clear and complete. You do not require a receipt for this trade, you\n            can upload it if you have.\n          </p>\n          <p>\n            Giftcards uploaded in a wrong section will be forwarded to the right\n            column and credited at the current rate in that section.\n          </p>\n          <p>\n            This trade will take only a few minutes. a notification will be sent\n            to you after confirmation\n          </p>\n          <p>If you need to ask a question, pls reach us via the live chat.</p>\n        </div>\n      );\n    case \"steam\":\n      return (\n        <div>\n          <p>1. This trade is for Steam Wallet Physical Gift Card and ecodes</p>\n          <p>2. All denominations are accepted</p>\n          <p>3. Steam Wallet Physical Gift Card has 15-digits. </p>\n          <p>\n            confirm that all info (Card value, Card quantity,country, etc.) are\n            accurately uploaded before submission. You will not be able to\n            update or modify this once a transacton has been submitted and\n            confirmed.\n          </p>\n          <p>\n            Make sure that the gift card is properly scratched and the code is\n            clear and complete. You do not require a receipt for this trade, you\n            can upload it if you have.\n          </p>\n          <p>\n            Giftcards uploaded in a wrong section will be forwarded to the right\n            column and credited at the current rate in that section.\n          </p>\n          <p>\n            This trade will take only a few minutes. a notification will be sent\n            to you after confirmation\n          </p>\n          <p>If you need to ask a question, pls reach us via the live chat.</p>\n        </div>\n      );\n    default:\n      return (\n        <div>\n          <p>\n            This trade is for ebay\n          </p>\n          <p>\n            confirm that all info (Card value, Card quantity,country, etc.) are\n            accurately uploaded before submission. You will not be able to\n            update or modify this once a transacton has been submitted and\n            confirmed.\n          </p>\n          <p>\n            Make sure that the gift card is properly scratched and the code is\n            clear and complete. You do not require a receipt for this trade, you\n            can upload it if you have.\n          </p>\n          <p>\n            Giftcards uploaded in a wrong section will be forwarded to the right\n            column and credited at the current rate in that section.\n          </p>\n          <p>\n            This trade will take only a few minutes. a notification will be sent\n            to you after confirmation\n          </p>\n          <p>If you need to ask a question, pls reach us via the live chat.</p>\n        </div>\n      );\n      break;\n  }\n};\n\nconst GiftCardForm = ({\n  active,\n  handleBack,\n  SellGiftCard,\n  soldGiftCard,\n  loading,\n  getCardDetails,\n  cardDetails,\n  userWallets,\n  fiatCurrency,\n}) => {\n  const INITIAL_STATE = {\n    country: \"\",\n    cardCurrencyId: \"\",\n    giftCardId: \"\",\n    cardType: \"\",\n    fiatCurrencyId: \"\",\n    value: null,\n    amount: 0,\n    number: 1,\n    total: 0,\n    file: [],\n    wallet: \"\",\n    remark: \"\",\n  };\n  // const INITIAL_STATE2 = {};\n\n  const [details, setDetails] = useState(INITIAL_STATE);\n  // const [state, setState] = useState(INITIAL_STATE2);\n  // const [rate, setRate] = useState({});\n  const [progress, setProgress] = useState();\n  const [open, setOpen] = useState(false);\n  const [openTerm, setOpenTerm] = useState(true);\n  // const [canTrade, SetCanTrade] = useState(false);\n  const [uploadLoading, setUploadLoading] = useState(false);\n  const [total, setTotal] = useState(0);\n  const [rate_selected, setRate_selected] = useState(\"\");\n\n  useEffect(() => {\n    getCardDetails({ cardCode: active.uid });\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    let fiatCurrencyUsed = fiatCurrency.filter(\n      (item) => item.code === details.wallet\n    )[0];\n    details && details.cardType && details.cardType === \"physical\"\n      ? setTotal(\n          details.amount &&\n            details.value.physical[details.amount] *\n              details.amount *\n              parseFloat(fiatCurrencyUsed.we_buy, 10)\n        )\n      : details.cardType === \"ecode\"\n      ? setTotal(\n          details.amount &&\n            details.value.ecode[details.amount] *\n              details.amount *\n              parseFloat(fiatCurrencyUsed.we_buy, 10)\n        )\n      : setTotal(0);\n\n    // getCardDetails({ cardCode: active.uid });\n    // eslint-disable-next-line\n  }, [details]);\n\n  // React.useEffect(() => {\n  //   if (rate.rate) {\n  //     setDetails((details) => ({\n  //       ...details,\n  //       total: rate.rate[details.wallet] * details.amount,\n  //     }));\n  //   }\n  // }, [rate, details.wallet, details.country, details.cardType]);\n\n  // const onCountryChange = (value) => {\n  //   setDetails((details) => ({\n  //     ...details,\n  //     country: value,\n  //     cardType: \"\",\n  //     amount: \"\",\n  //   }));\n  // };\n\n  // const onCardTypeChange = (value) => {\n  //   SetCanTrade(\n  //     active[details.country.toLowerCase()].filter((i) =>\n  //       value.includes(i[0])\n  //     )[0][1]?.isAvailable\n  //   );\n  //   if (\n  //     !active[details.country.toLowerCase()].filter((i) =>\n  //       value.includes(i[0])\n  //     )[0][1]?.isAvailable\n  //   ) {\n  //     return notification.error({\n  //       message: \"Unavailable Card Type\",\n  //       description: `${getHumanForm(value)} is currently unavailable`,\n  //     });\n  //   }\n  //   setRate(\n  //     active[details.country.toLowerCase()].filter((i) =>\n  //       value.includes(i[0])\n  //     )[0][1]\n  //   );\n  //   setDetails((details) => ({ ...details, cardType: value, amount: 0 }));\n  // };\n\n  // const onAmountChange = (value) => {\n  //   setDetails((details) => ({\n  //     ...details,\n  //     amount: value,\n  //     total: rate.rate[details.wallet] * value,\n  //   }));\n  // };\n\n  // const onNumberChange = ({ target: { value } }) => {\n  //   setDetails((details) => ({\n  //     ...details,\n  //     number: value,\n  //     total: rate.rate.NGN * value * details.amount,\n  //   }));\n  // };\n\n  const onHandleFile = (file) => {\n    setDetails((details) => ({ ...details, file: [...details.file, file] }));\n  };\n\n  const onWalletChange = (value) => {\n    let fiatCurrencyUsed = fiatCurrency.filter(\n      (item) => item.code === value.Currency.code\n    )[0];\n    setDetails((details) => ({\n      ...details,\n      wallet: value.Currency.code,\n      fiatCurrencyId: value.id,\n      country: \"\",\n      cardType: \"\",\n      amount: \"\",\n    }));\n    setRate_selected(fiatCurrencyUsed.we_buy);\n  };\n\n  const handleDelete = (index) => {\n    let file = details.file;\n    file = file.filter((f, i) => i !== index);\n    setDetails((details) => ({ ...details, file }));\n  };\n\n  const handleSubmit = async () => {\n    setUploadLoading(true);\n    if (details.file.length === 0) {\n      return;\n    }\n    const resFile = await Promise.all(\n      details.file.map((i) =>\n        processImageToCloudinary(i, console.log, setProgress)\n      )\n    );\n    const payload = {\n      sellerRemarks: details.remark,\n      imageURLs: resFile,\n      amount: parseInt(details.amount),\n      fiatCurrencyId: details.fiatCurrencyId,\n      cardType: details.cardType,\n      cardCurrencyId: details.cardCurrencyId,\n      giftCardId: active._id,\n    };\n    if (resFile[0] === \"error\") {\n      return notification.error({\n        message: \"Could not upload Image\",\n        duration:2.5,\n      });\n    } else {\n      await SellGiftCard(payload);\n    }\n\n    // console.log('payloads',payload)\n\n    setOpen(true);\n    setUploadLoading(false);\n  };\n\n  const handleOk = () => {\n    setOpenTerm(false);\n  };\n\n  const handleCancel = () => {\n    setOpenTerm(false);\n  };\n\n  return (\n    <div className={styles.gitcard__form}>\n      {open && soldGiftCard && (\n        <SuccessfulModal\n          title={\n            \"Your card has been received, kindly wait 10-15 minutes, check the progress of trade on the 'Transactions' tab\"\n          }\n          onClick={() => history.push(\"/app\")}\n        />\n      )}\n\n      {/* <Modal\n        header={null}\n        footer={null}\n        visible={openTerm}\n        onOk={handleOk}\n        onCancel={handleCancel}\n      >\n        <h3>Trade Terms</h3>\n        {getTerm(active.name)}\n      </Modal> */}\n      <div\n        className={styles.gitcard__form__holder}\n        style={{ alignItems: \"flex-start\" }}\n      >\n        <div onClick={handleBack} className={styles.gitcard__form__link}>\n          <SVG.ArrowLeft /> Giftcard\n        </div>\n        <div\n          className={styles.gitcard__form__body__image}\n          style={{\n            border: \"1px solid #805b5b26\",\n            boxShadow: \"-3px 4px 20px #00000026\",\n            position: \"relative\",\n          }}\n        >\n          <img src={active.image} height=\"151.692\" width=\"241\" alt=\"card\" />\n        </div>\n      </div>\n\n      <div className={styles.gitcard__form__body}>\n        <div className={styles.gitcard__form__body__holder}>\n          <div className={styles.gitcard__form__left}>\n            <h2>\n              <strong>{active.displayName}</strong>\n            </h2>\n            <br />\n            <div style={{ marginBottom: 20 }}>\n              <Select\n                // options={[\n                //   { render: \"NGN wallet\", value: \"NGN\" },\n                //   { render: \"GHS wallet\", value: \"GHS\" },\n                // ]}\n                options={userWallets.fiatWallets.map((item) => ({\n                  render: `${item.Currency.code} wallet`,\n                  value: item,\n                }))}\n                value={details.wallet}\n                onSelect={onWalletChange}\n                className={`${styles.gitcard__form__body__input} ${styles.countryInput}`}\n                label=\"Select wallet to credit\"\n                labelClass={styles.label}\n              />\n            </div>\n            <br />\n            <div style={{ marginBottom: 20 }}>\n              <Select\n                options={\n                  cardDetails[0] &&\n                  cardDetails.map((item) => ({\n                    render: item.GiftCardCurrency.name,\n                    value: item,\n                  }))\n                }\n                value={details.country}\n                onSelect={(value) => {\n                  setDetails((state) => ({\n                    ...state,\n                    country: value.GiftCardCurrency.name,\n                    cardCurrencyId: value.card_currency_id,\n                    giftCardId: value.GiftCard.id,\n                    value,\n                    cardType: \"\",\n                    amount: \"\",\n                    number: 1,\n                    total: 0,\n                    file: [],\n                    // wallet: \"\",\n                    remark: \"\",\n                  }));\n                }}\n                className={`${styles.gitcard__form__body__input} ${styles.countryInput}`}\n                label=\"Select Card Currency\"\n                labelClass={styles.label}\n              />\n            </div>\n            <br />\n            <div style={{ marginBottom: 20 }}>\n              <Select\n                options={\n                  [\n                    {\n                      render: (\n                        <div\n                          className={styles.countryOption}\n                          style={{ display: \"flex\", alignItems: \"center\" }}\n                        >\n                          <SVG.CardTypePhysical />\n                          <span style={{ marginLeft: 10 }}>{\"Physical\"}</span>\n                        </div>\n                      ),\n                      value: \"physical\",\n                    },\n                    {\n                      render: (\n                        <div\n                          className={styles.countryOption}\n                          style={{ display: \"flex\", alignItems: \"center\" }}\n                        >\n                          <SVG.CardTypePhysical />\n                          <span style={{ marginLeft: 10 }}>{\"Ecode\"}</span>\n                        </div>\n                      ),\n                      value: \"ecode\",\n                    },\n                  ]\n\n                  // active[details.country.toLowerCase()].map((i) => ({\n                  //   value: i[0],\n                  //   name: getHumanForm(i[0]),\n                  //   render: (\n                  //     <div\n                  //       className={styles.countryOption}\n                  //       style={{ display: \"flex\", alignItems: \"center\" }}\n                  //     >\n                  //       <SVG.CardTypePhysical />\n                  //       <span style={{ marginLeft: 10 }}>\n                  //         {getHumanForm(i[0])}\n                  //       </span>\n                  //     </div>\n                  //   ),\n                  // }))\n                }\n                value={details.cardType}\n                onSelect={(value) => {\n                  setDetails((state) => ({\n                    ...state,\n                    cardType: value,\n                    // fiatCurrencyId: \"\",\n                    amount: \"\",\n                    number: 1,\n                    total: 0,\n                    file: [],\n                    // wallet: \"\",\n                    remark: \"\",\n                  }));\n                }}\n                className={`${styles.gitcard__form__body__input} ${styles.countryInput}`}\n                label=\"Card Type\"\n                labelClass={styles.label}\n              />\n            </div>\n            <br />\n            <div>\n              {details && details.cardType && (\n                <Select\n                  labelClass={styles.largeMarginLabel}\n                  hintClass={styles.largeMarginHint}\n                  label=\"Select amount\"\n                  value={details.amount}\n                  name=\"amount\"\n                  onSelect={(value) => {\n                    setDetails((state) => ({\n                      ...state,\n                      amount: value,\n                      remark: \"\",\n                    }));\n                  }}\n                  // options={props?.buyGiftCardDetails?.packages.map((item) => ({\n                  //   render: `${props?.buyGiftCardDetails?.currency} ${\n                  //     item.value\n                  //   } - Price: ${Money(item.usdPrice, \"USD\")}`,\n                  //   value: `${item.value}.${item.amount}`,\n                  // }))}\n                  options={\n                    details.cardType === \"physical\"\n                      ? Object.keys(details.value.physical).map((item) => ({\n                          render: `${\n                            details.value.GiftCardCurrency.code\n                          } ${item} - Price ${Money(\n                            details.value.physical[item] * item,\n                            \"USD\"\n                          )}`,\n                          value: item,\n                        }))\n                      : Object.keys(details.value.ecode).map((item) => ({\n                          render: `${\n                            details.value.GiftCardCurrency.code\n                          } ${item} - Price ${Money(\n                            details.value.physical[item] * item,\n                            \"USD\"\n                          )}`,\n                          value: item,\n                        }))\n                  }\n\n                  // hint={<p dangerouslySetInnerHTML={extraInfo()} />}\n                />\n              )}\n            </div>\n            <div className={styles.gitcard__form__upload}>\n              {progress && (\n                <span>{progress ? `uploading ${progress}%` : \"\"}</span>\n              )}\n              {progress && <Progress percent={progress} status=\"active\" />}\n              <Upload handleFile={onHandleFile} />\n              {details.file.length > 0 && (\n                <div>\n                  <p>Uploaded files</p>\n                  <ul>\n                    {details.file.map((file, index) => (\n                      <li key={index}>\n                        <span style={{ marginRight: 7 }}>{file.name}</span>\n                        <CloseCircleOutlined\n                          onClick={() => handleDelete(index)}\n                          style={{ cursor: \"pointer\" }}\n                        />\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n            </div>\n            <div>\n              <Input\n                label=\"Image Remark\"\n                placeholder=\"Enter image remark\"\n                value={details.remark}\n                type=\"text\"\n                onChange={(e) =>\n                  setDetails((details) => ({\n                    ...details,\n                    remark: e.target.value,\n                  }))\n                }\n                labelClass={styles.label}\n                className={`${styles.gitcard__form__body__input} ${styles.countryInput}`}\n              />\n            </div>\n            <br />\n            <br />\n          </div>\n          <div className={styles.gitcard__form__right}>\n            <div className={styles.gitcard__form__info}>\n              <h3>Info</h3>\n              <div>\n                <strong>Rate</strong>&emsp;\n                <span>\n                  {details && details.wallet} {rate_selected}\n                </span>\n              </div>\n              <div>\n                <strong>Value</strong>&emsp;\n                <span>\n                  {details && details.wallet} {total}\n                </span>\n              </div>\n            </div>\n            <Button\n              className={`${styles.gitcard__form__body__input}`}\n              text=\"Submit\"\n              form=\"full\"\n              disabled={\n                details.file.length === 0 ||\n                !details.amount ||\n                // !details.total ||\n                !details.cardType ||\n                !details.country ||\n                // loading ||\n                // !canTrade ||\n                uploadLoading\n              }\n              onClick={() => handleSubmit()}\n            />\n            <div>\n          <p>\n            This trade is for {active.displayName}\n          </p>\n          <p>\n            confirm that all info (Card value, Card quantity,country, etc.) are\n            accurately uploaded before submission. You will not be able to\n            update or modify this once a transacton has been submitted and\n            confirmed.\n          </p>\n          <p>\n            Make sure that the gift card is properly scratched and the code is\n            clear and complete. You do not require a receipt for this trade, you\n            can upload it if you have.\n          </p>\n          <p>\n            Giftcards uploaded in a wrong section will be forwarded to the right\n            column and credited at the current rate in that section.\n          </p>\n          <p>\n            This trade will take only a few minutes. a notification will be sent\n            to you after confirmation\n          </p>\n          <p>If you need to ask a question, pls reach us via the live chat.</p>\n        </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  // loading: state.giftCard.loading,\n  cardDetails: state.giftCard.cardDetails,\n  fileUrl: state.giftCard.fileUrl,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getCards: (data) => {\n    dispatch(getGiftCardCodes(data));\n  },\n  SellGiftCard: (data) => {\n    dispatch(initialGiftCardSale(data));\n  },\n  getCardDetails: (data) => {\n    dispatch(getGiftCardDetails(data));\n  },\n  uploadFile: (data) => {\n    dispatch(uploadFileToBucket(data));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GiftCardForm);\n","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/transactions/components.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/actions/buyGiftCard.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/Modals/addCryptoWallet.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/bills/components.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/history.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/button/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/layout/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/select/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/input/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/services/BuyGiftCard.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/actions/billPayment.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/home/components.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/Modals/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/upload/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/services/BillPayment.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/actions/pairTwoPair.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/layout/dashboard/index.js",["906","907","908","909","910","911","912","913","914","915","916"],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/layout/landing/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/upload/upload.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/services/PairTwoPairService.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/layout/dashboard/data.js",["917","918","919","920"],"import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport {\n  Home,\n  // Coin,\n  GiftCard,\n  // Wallet,\n  Transactions,\n  // RateIcon,\n  ArrowLeft,\n  Settings,\n  // Logout,\n} from \"../../../assets/svg\";\nimport {\n  TransactionOutlined,\n  ProjectOutlined,\n  SettingOutlined,\n  CreditCardOutlined,\n  GiftOutlined,\n  MoneyCollectOutlined,\n  HomeOutlined\n} from '@ant-design/icons';\n\nexport const Routes = {\n  BTC: \"/app/btc\",\n  CryptoView: \"/app/crypto\",\n  sellgiftcard: \"/app/sell-giftcard\",\n  buygiftcard: \"/app/buy-giftcard\",\n  airtime: \"/app/airtime\",\n  bills: \"/app/bills\",\n  transactions: \"/app/transactions\",\n  settings: \"/app/settings\",\n  onBoarding: \"/app/onboarding\",\n  home: \"/app\",\n  // profile: \"/app/profile\",\n};\n\nexport const navigation = [\n  { Icon: HomeOutlined, Name: \"Home\", route: Routes.home },\n  { Icon: GiftOutlined, Name: \"Sell Gift Cards\", route: Routes.sellgiftcard },\n  { Icon: CreditCardOutlined, Name: \"Buy Gift Cards\", route: Routes.buygiftcard },\n  { Icon: MoneyCollectOutlined, Name: \"Crypto\", route: Routes.CryptoView },\n  { Icon: TransactionOutlined, Name: \"Transactions\", route: Routes.transactions },\n  { Icon: ProjectOutlined, Name: \"Bills\", route: Routes.bills },\n  { Icon: SettingOutlined, Name: \"Settings\", route: Routes.settings },\n  // { Icon: Logout, Name: \"Log out\", route: \"\" },\n];\n\nconst Goback = ({ route, name }) => {\n  const history = useHistory();\n  return (\n    <div onClick={() => history.push(route)}>\n      <ArrowLeft /> {name}\n    </div>\n  );\n};\n\nexport const generateRoute = (path) => {\n  switch (path) {\n    case Routes.buyCoin:\n      return \"Buy Coins\";\n\n    case Routes.sellCoin:\n      return \"Sell Coins\";\n\n    case Routes.wallet:\n      return \"Wallet\";\n\n    case Routes.buygiftcard:\n      return \"Buy Giftcards\";\n\n    case Routes.sellgiftcard:\n      return \"Sell Giftcards\";\n\n    case Routes.transactions:\n      return \"Transactions\";\n\n    case Routes.rate:\n      return \"Rates\";\n\n    case Routes.home:\n      return \"Home\";\n\n    case `${Routes.wallet}/naira`:\n      return <Goback route=\"/app/wallet\" name=\"Back\" />;\n\n    case `${Routes.wallet}/btc`:\n      return <Goback route=\"/app/wallet\" name=\"Back\" />;\n    case `${Routes.wallet}/btc/send`:\n      return <Goback route=\"/app/wallet\" name=\"Back\" />;\n    case `${Routes.profile}`:\n      return \"Profile\";\n\n    default:\n      break;\n  }\n};\n","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/footer/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/header/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/header/landingHeader.js",["921","922","923","924","925","926","927","928"],"import React, { useState } from \"react\";\nimport { useHistory, Link, useLocation } from \"react-router-dom\";\nimport { MenuOutlined, CloseOutlined } from \"@ant-design/icons\";\nimport { LogoNav, AstroLogoWhite, AstroLogoFull } from \"../../assets/svg\";\nimport Button from \"../button\";\nimport styles from \"./style.module.scss\";\n\nconst LandingHeader = ({ form, type }) => {\n  const [show, setShow] = useState(false);\n  let location = useLocation();\n  const { pathname } = location;\n  const history = useHistory();\n  return (\n    <div\n      className={`${styles.landingHeader} ${form === \"white\" && styles.rev}`}\n    >\n      <div className={styles.landingHeaderLeft}>\n        <Link to=\"/\">\n          <AstroLogoWhite className={styles.landingHeaderLeftLogo} />\n        </Link>\n      </div>\n\n      <div onClick={() => {\n        // setShow(true)\n        console.log('pressed')\n        }} className={styles.Hamburger}>\n        <MenuOutlined style={{ color: \"transparent\", fontSize: \"24px\" }} />\n      </div>\n\n      {/* <div\n        className={`${styles.landingHeaderLeftLinks} ${\n          show && styles.mobile__nav\n        }`}\n      >\n        <div onClick={() => setShow(false)} className={styles.closeMemu}>\n          <CloseOutlined\n            style={{ color: \"#fff\", fontSize: \"30px\", marginBottom: \"30px\" }}\n          />\n        </div>\n        <div className={`${styles.landingHeaderLeftLinks} ${styles.links}`}>\n          <div\n            className={`${styles.landingHeaderLeftLinksItem}  ${\n              form === \"white\" && styles.rev\n            }  ${pathname === \"/rates\" && styles.active}`}\n            onClick={() => history.push(\"/rates\")}\n          >\n            Rates\n          </div>\n        </div>\n        {type === \"signup\" || !type ? (\n          <Button\n            onClick={() => history.push(\"/signin\")}\n            form=\"full\"\n            text=\"Login\"\n            className={`${styles.login} ${form === \"white\" && styles.rev}`}\n          />\n        ) : null}\n\n        {type !== \"signup\" ? (\n          <Button\n            onClick={() => history.push(\"/signup\")}\n            form=\"full\"\n            text=\"Sign up\"\n            className={styles.signup}\n          />\n        ) : null}\n      </div> */}\n    </div>\n  );\n};\n\nexport default LandingHeader;\n","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/header/authHeader.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/reducer/buyGiftCard.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/reducer/pairTwoPair.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/reducer/billPayment.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/reducer/payment.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/reducer/withdrawal.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/reducer/giftcard.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/reducer/bank.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/reducer/btc.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/reducer/auth.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/btc/components.js",["929","930","931","932","933","934","935","936","937","938"],"import React, { useEffect, useState } from \"react\";\nimport { notification, Modal } from \"antd\";\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\nimport Button from \"../../components/button\";\nimport Input from \"../../components/input\";\nimport Select from \"../../components/select\";\nimport styles from \"../styles.module.scss\";\nimport Clipboard from \"react-clipboard.js\";\nimport { Copy } from \"../../assets/svg\";\nimport { QRCode, Money } from \"../../utils/helper\";\nimport { BitcoinInput } from \"../../assets/svg\";\nimport { SuccessfulModal } from \"../transactions/components\";\nimport { history } from \"../../redux/store\";\nimport AppFetch from \"../../redux/services/FetchInterceptor\";\n// import { isNum } from \"react-toastify/dist/utils\";\n\nconst { confirm } = Modal;\n\nexport const BuySection = ({\n  balance,\n  rates,\n  state,\n  setState,\n  buyCoins,\n  buyBTC,\n  loading,\n  active,\n}) => {\n  useEffect(() => {\n    state.wallet = undefined\n  }, []);\n\n  useEffect(() => {\n    rates && rates.ticker && setBtc_usd_rate(rates.ticker.buy);\n    // rates && rates.tickers && setBtc_ngn_rate(rates.tickers.BTCNGN.buy);\n    // rates && rates.tickers && setBtc_ghs_rate(rates.tickers.BTCGHS.buy);\n  }, [rates]);\n  const handleChange = ({ target: { name, value } }) => {\n    // let ticker = rates && rates.tickers;\n    let btc, ngn, usd, ghs;\n    if (name === \"btc\") {\n      btc = value;\n      ngn = wallet_btc_rate * value;\n      usd = buy_btc_usd_rate * value;\n      // usd = 26000 * value;\n      // ghs = buy_btc_ghs_rate * value;\n      setState((state) => ({ ...state, btc, usd, ngn }));\n    } else if (name === \"ngn\") {\n      ngn = value;\n      btc = value / wallet_btc_rate;\n      usd = value / (wallet_btc_rate / buy_btc_usd_rate);\n      // usd = 26000 * btc;\n      // ghs = buy_btc_ghs_rate * btc;\n      setState((state) => ({ ...state, btc, usd, ngn }));\n    } else if (name === \"usd\") {\n      usd = value;\n      btc = value / buy_btc_usd_rate;\n      // btc = value / 26000;\n      ngn = wallet_btc_rate * btc;\n      // ghs = buy_btc_ghs_rate * btc;\n      setState((state) => ({ ...state, btc, usd, ngn, ghs }));\n    }\n    if (!value) {\n      setState((state) => ({ ...state, btc: \"\", usd: \"\", ngn: \"\", ghs: \"\" }));\n    }\n  };\n  // const [current_balance, setCurrent_balance] = useState(0);\n  const [buy_btc_usd_rate, setBtc_usd_rate] = useState(0);\n  const [buy_btc_ghs_rate, setBtc_ghs_rate] = useState(0);\n  const [buy_btc_ngn_rate, setBtc_ngn_rate] = useState(0);\n  const [wallet_btc_rate, setWallet_btc_rate] = useState(0);\n  const [open, setOpen] = useState(false);\n  const showPromiseConfirm = () => {\n    confirm({\n      title: `Buy ${state.btc} ${active.Currency.code}`,\n      icon: <ExclamationCircleOutlined style={{ color: \"#19a9de\" }} />,\n      content: `Confirm the purchase of ${state.btc} ${active.Currency.code}`,\n      onOk() {\n        setOpen(true);\n        return buyCoins({\n          amount: state.btc,\n          debitFiatWalletId: state.debitFiatWalletId,\n          creditCoinsWalletId: active.id,\n        });\n      },\n      onCancel() {},\n    });\n  };\n  const currencyTicker = async (data) => {\n    AppFetch({\n      url: `/coins/tickers/${active.Currency.code.toLowerCase()}${data}`,\n      method: \"get\",\n      headers: {\n        \"public-request\": \"true\",\n      },\n    })\n      .then((response) => {\n        setWallet_btc_rate(response.data.ticker.buy);\n      })\n      .catch((err) => {\n        notification.error({\n          message: \"Could not fetch tickers\",\n          duration:2.5,\n        });\n      });\n  };\n\n  return (\n    <div className={styles.transactionCard}>\n      {console.log('buy', active)}\n      {open && buyBTC && (\n        <SuccessfulModal onClick={() => history.push(\"/app\")} />\n      )}\n      <h2 className={styles.detailsCard__title}>Details</h2>\n      <div className={styles.detailsCard__list}>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>You are Buying</span>\n          <span className={styles.sub}>\n            {active.Currency.code} {state.btc}\n          </span>\n        </div>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>You will be debited</span>\n          <span className={styles.sub}>\n            {`${state.wallet ?? \"\"} `}{state[state.wallet === \"NGN\" ? \"ngn\" : \"ghs\"].toLocaleString()}\n          </span>\n        </div>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>Fees</span>\n          <span className={`${styles.sub} ${styles.light}`}>0</span>\n        </div>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>Should arrive</span>\n          <span className={`${styles.sub} ${styles.light}`}>In 5 Seconds</span>\n        </div>\n      </div>\n      <hr />\n      <br />\n      <div className={styles.transactionCard__holder__sub}>\n        <Input\n          labelClass={styles.largeMarginLabel}\n          label=\"Buy to\"\n          Dummy={{ text: `${active.Currency.code} wallet` }}\n        />\n\n        <Select\n          labelClass={styles.largeMarginLabel}\n          hintClass={styles.largeMarginHint}\n          label=\"Pay from\"\n          placeholder=\"Choose wallet\"\n          value={state.wallet}\n          name=\"wallet\"\n          onSelect={(value) => {\n            currencyTicker(value.Currency.code.toLowerCase());\n            setState((state) => ({\n              ...state,\n              wallet: value.Currency.code,\n              walletBalance: value.balance,\n              debitFiatWalletId: value.id,\n              walletInfo: value,\n            }));\n          }}\n          // options={[\n          //   {\n          //     render: \"NGN wallet\",\n          //     value: \"NGN\",\n          //     disabled: rates?.availability?.buy?.value,\n          //   },\n          //   {\n          //     render: \"GHS wallet\",\n          //     value: \"GHS\",\n          //     disabled: rates?.availability?.buy?.value,\n          //   },\n          // ]}\n          options={balance.fiatWallets\n            .filter((item) => item.Currency.code !== \"USD\")\n            .map((item) => ({\n              render: `${item.Currency.code} wallet`,\n              value: item,\n            }))}\n          hint={`Current Balance ${Money(state.walletBalance, state.wallet)} `}\n        />\n\n        <div className={styles.transactionCard__holder}>\n          <Input\n            labelClass={styles.largeMarginLabel}\n            label={`Amount (${active.Currency.code})`}\n            type=\"number\"\n            value={isFinite(state.btc) ? state.btc : 0}\n            name=\"btc\"\n            onChange={handleChange}\n            hint={`Current rate ${Money(buy_btc_usd_rate, \"USD\")} / ${\n              active.Currency.code\n            }`}\n            placeholder=\"e.g 0.000011\"\n          />\n          <Input\n            labelClass={styles.largeMarginLabel}\n            label=\"Amount in USD\"\n            value={state.usd}\n            type=\"number\"\n            name=\"usd\"\n            onChange={handleChange}\n          />\n        </div>\n\n        <div className={styles.transactionCard__holder}>\n          {state?.wallet == \"NGN\" && (\n            <Input\n              labelClass={styles.largeMarginLabel}\n              label={`Amount in ${state.wallet}`}\n              type=\"number\"\n              value={isNaN(state.ngn) ? \"\" : state.ngn}\n              hint={`Current rate ${Money(wallet_btc_rate, state.wallet)} / ${\n                active.Currency.code\n              }`}\n              name=\"ngn\"\n              onChange={handleChange}\n            />\n          )}\n          {state?.wallet == \"GHS\" && (\n            <Input\n              labelClass={styles.largeMarginLabel}\n              label={`Amount in ${state.wallet}`}\n              type=\"number\"\n              value={isNaN(state.ngn) ? \"\" : state.ngn}\n              hint={`Current rate ${Money(wallet_btc_rate, state.wallet)} / ${\n                active.Currency.code\n              }`}\n              name=\"ngn\"\n              onChange={handleChange}\n            />\n          )}\n        </div>\n        <Button\n          disabled={\n            parseInt(state.ngn, 10) < 499\n              ? true\n              : false || loading || !state.wallet\n          }\n          onClick={() => showPromiseConfirm()}\n          className={styles.sellPage__btn}\n          form=\"full\"\n        >\n          BUY\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport const SellSection = ({\n  balance,\n  rates,\n  state,\n  setState,\n  sellCoins,\n  sellBTC,\n  loading,\n  active,\n}) => {\n  useEffect(() => {\n    state.wallet = undefined\n  }, []);\n  // useEffect(() => {\n  //   // balance && balance.BTC && setBtc_current_balance(balance.BTC.balance);\n  //   balance &&\n  //     balance[state.wallet] &&\n  //     setWallet_current_balance(balance[state.wallet].balance);\n  // }, [balance, state.wallet]);\n  useEffect(() => {\n    rates && rates.ticker && setSell_btc_usd_rate(rates.ticker.sell);\n    rates && rates.tickers && setSell_btc_ngn_rate(rates.tickers.BTCNGN.sell);\n    rates && rates.tickers && setSell_btc_ghs_rate(rates.tickers.BTCGHS.sell);\n  }, [rates]);\n  const handleChange = ({ target: { name, value } }) => {\n    // let ticker = rates && rates.tickers;\n    let btc, ngn, usd, ghs;\n    if (name === \"btc\") {\n      btc = value;\n      ngn = wallet_btc_rate * btc;\n      usd = sell_btc_usd_rate * btc;\n      // usd = 26000 * value;\n      ghs = sell_btc_ghs_rate * btc;\n      setState((state) => ({ ...state, btc, usd, ngn, ghs }));\n    } else if (name === \"ngn\") {\n      ngn = value;\n      btc = value / wallet_btc_rate;\n      // usd = sell_btc_usd_rate * value;\n      usd = value / (wallet_btc_rate / sell_btc_usd_rate);\n      // usd = 26000 * btc;\n      ghs = sell_btc_ghs_rate * value;\n      setState((state) => ({ ...state, btc, usd, ngn, ghs }));\n    } else if (name === \"usd\") {\n      usd = value;\n      btc = value / sell_btc_usd_rate;\n      // btc = value / 26000;\n      ngn = wallet_btc_rate * btc;\n      ghs = wallet_btc_rate * btc;\n      setState((state) => ({ ...state, btc, usd, ngn, ghs }));\n    } else if (name === \"ghs\") {\n      ghs = value;\n      btc = value / wallet_btc_rate;\n      // usd = sell_btc_usd_rate * value;\n      usd = value / (wallet_btc_rate / sell_btc_usd_rate);\n      // usd = 26000 * btc;\n      ngn = wallet_btc_rate * value;\n      setState((state) => ({ ...state, btc, usd, ngn, ghs }));\n    }\n    if (!value) {\n      setState((state) => ({ ...state, btc: \"\", usd: \"\", ngn: \"\", ghs: \"\" }));\n    }\n  };\n  // const [btc_current_balance, setBtc_current_balance] = useState(0);\n  // const [wallet_current_balance, setWallet_current_balance] = useState(0);\n  const [sell_btc_usd_rate, setSell_btc_usd_rate] = useState(0);\n  const [sell_btc_ghs_rate, setSell_btc_ghs_rate] = useState(0);\n  const [sell_btc_ngn_rate, setSell_btc_ngn_rate] = useState(0);\n  const [wallet_btc_rate, setWallet_btc_rate] = useState(0);\n  const [open, setOpen] = useState(false);\n  const showPromiseConfirm = () => {\n    confirm({\n      title: `Sell ${isFinite(state.btc) ? state.btc : 0} ${\n        active.Currency.code\n      }`,\n      icon: <ExclamationCircleOutlined style={{ color: \"#19a9de\" }} />,\n      content: `Confirm the sales of ${state.btc} ${active.Currency.code}`,\n      onOk() {\n        setOpen(true);\n        return sellCoins({\n          amount: isFinite(state.btc) ? state.btc : 0,\n          cryptoWalletId: active.id,\n          fiatWalletId: state.fiatWalletId,\n        });\n      },\n      onCancel() {},\n    });\n  };\n  const currencyTicker = async (data) => {\n    AppFetch({\n      url: `/coins/tickers/${active.Currency.code.toLowerCase()}${data}`,\n      method: \"get\",\n      headers: {\n        \"public-request\": \"true\",\n      },\n    })\n      .then((response) => {\n        setWallet_btc_rate(response.data.ticker.sell);\n      })\n      .catch((err) => {\n        notification.error({\n          message: \"Could not fetch tickers\",\n          duration:2.5,\n        });\n      });\n  };\n  return (\n    <div className={styles.transactionCard}>\n      {console.log('sell', state.wallet)}\n      {open && sellBTC && (\n        <SuccessfulModal onClick={() => history.push(\"/app\")} />\n      )}\n      <h2 className={styles.detailsCard__title}>Details</h2>\n      <div className={styles.detailsCard__list}>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>You are selling</span>\n          <span className={styles.sub}>\n            {Money(\n              isFinite(state.btc) ? state.btc : 0,\n              `${active.Currency.code}`\n            )}\n          </span>\n        </div>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>You will receive</span>\n          <span className={styles.sub}>\n          {`${state.wallet ?? \"\"} `}{state[state.wallet === \"NGN\" ? \"ngn\" : \"ghs\"]}\n          </span>\n        </div>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>Fees</span>\n          <span className={`${styles.sub} ${styles.light}`}>0</span>\n        </div>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>Should arrive</span>\n          <span className={`${styles.sub} ${styles.light}`}>In 5 Seconds</span>\n        </div>\n      </div>\n      <hr />\n      <br />\n      <div className={styles.transactionCard__holder__sub}>\n        <Input\n          labelClass={styles.largeMarginLabel}\n          hintClass={styles.largeMarginHint}\n          label=\"Sell from\"\n          Dummy={{ text: `${active.Currency.code} wallet` }}\n          hint={`Current Balance ${active.balance} `}\n        />\n        <Select\n          labelClass={styles.largeMarginLabel}\n          label=\"Recieve payment to\"\n          placeholder=\"Choose wallet\"\n          value={state.wallet}\n          name=\"wallet\"\n          onSelect={(value) => {\n            currencyTicker(value.Currency.code.toLowerCase());\n            // setState((state) => ({ ...state, wallet: value }))\n            setState((state) => ({\n              ...state,\n              wallet: value.Currency.code,\n              walletBalance: value.balance,\n              fiatWalletId: value.id,\n              walletInfo: value,\n            }));\n          }}\n          // options={[\n          //   {\n          //     render: \"NGN wallet\",\n          //     value: \"NGN\",\n          //     disabled: rates?.availability?.sell?.value,\n          //   },\n          //   {\n          //     render: \"GHS wallet\",\n          //     value: \"GHS\",\n          //     disabled: rates?.availability?.sell?.value,\n          //   },\n          // ]}\n          // hint={`Current Balance ${Money(\n          //   wallet_current_balance,\n          //   state.wallet\n          // )} `}\n          options={balance.fiatWallets\n            .filter((item) => item.Currency.code !== \"USD\")\n            .map((item) => ({\n              render: `${item.Currency.code} wallet`,\n              value: item,\n            }))}\n          hint={`Current Balance ${Money(state.walletBalance, state.wallet)} `}\n        />\n\n        <div className={styles.transactionCard__holder}>\n          <Input\n            labelClass={styles.largeMarginLabel}\n            label={`Amount (${active.Currency.code})`}\n            value={isFinite(state.btc) ? state.btc : 0}\n            name=\"btc\"\n            onChange={handleChange}\n            hint={`Current rate ${Money(sell_btc_usd_rate, \"USD\")} / ${\n              active.Currency.code\n            }`}\n            hintClass={styles.largeMarginHint}\n            placeholder=\"e.g 0.000011\"\n          />\n          <Input\n            labelClass={styles.largeMarginLabel}\n            label=\"Amount in USD\"\n            value={isNaN(state.usd) ? 0 : state.usd.toLocaleString()}\n            name=\"usd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className={styles.transactionCard__holder}>\n          {state.wallet === \"NGN\" && (\n            <Input\n              labelClass={styles.largeMarginLabel}\n              label=\"Amount in NGN\"\n              value={isNaN(state.ngn) ? 0 : state.ngn.toLocaleString()}\n              hint={`Current rate ${Money(wallet_btc_rate, state.wallet)} / ${\n                active.Currency.code\n              }`}\n              name=\"ngn\"\n              onChange={handleChange}\n            />\n          )}\n          {state?.wallet == \"GHS\" && (\n            <Input\n              labelClass={styles.largeMarginLabel}\n              label={`Amount in ${state.wallet}`}\n              type=\"number\"\n              value={isNaN(state.ngn) ? \"\" : state.ngn}\n              hint={`Current rate ${Money(wallet_btc_rate, state.wallet)} / ${\n                active.Currency.code\n              }`}\n              name=\"ngn\"\n              onChange={handleChange}\n            />\n          )}\n          {/* <Input\n            labelClass={styles.largeMarginLabel}\n            label=\"Amount in GHC\"\n            value={isNaN(state.ghs) ? 0 : state.ghs.toLocaleString()}\n            hint={`Current rate ${Money(sell_btc_ghs_rate, \"USD\")} / ${\n              active.Currency.code\n            }`}\n            name=\"ghs\"\n            onChange={handleChange}\n          /> */}\n        </div>\n        <Button\n          disabled={\n            parseInt(state.ngn, 10) < 499\n              ? true\n              : false || loading || !state.wallet\n          }\n          onClick={() => showPromiseConfirm()}\n          className={styles.sellPage__btn}\n          form=\"full\"\n        >\n          SELL\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport const SendSection = ({\n  balance,\n  rates,\n  state,\n  setState,\n  sellCoinsExternal,\n  sellBTCExternal,\n  loading,\n  active,\n}) => {\n  // const [current_balance, setCurrent_balance] = useState(0);\n  const [sell_btc_usd_rate, setSell_btc_usd_rate] = useState(0);\n  const [sell_btc_ghs_rate, setSell_btc_ghs_rate] = useState(0);\n  const [sell_btc_ngn_rate, setSell_btc_ngn_rate] = useState(0);\n\n  // useEffect(() => {\n  //   balance && balance.BTC && setCurrent_balance(balance.BTC.balance);\n  // }, [balance]);\n\n  useEffect(() => {\n    rates && rates.ticker && setSell_btc_usd_rate(rates.ticker.buy);\n    rates && rates.tickers && setSell_btc_ngn_rate(rates.tickers.BTCNGN.sell);\n    rates && rates.tickers && setSell_btc_ghs_rate(rates.tickers.BTCGHS.sell);\n  }, [rates]);\n\n  const handleChange = ({ target: { name, value } }) => {\n    // let ticker = rates && rates.tickers;\n\n    let btc, ngn, usd, ghs;\n    if (name === \"btc\") {\n      btc = value;\n      ngn = sell_btc_ngn_rate * value;\n      usd = sell_btc_usd_rate * value;\n      // usd = 26000 * value;\n      ghs = sell_btc_ghs_rate * value;\n      setState((state) => ({ ...state, btc, usd, ngn, ghs }));\n    } else if (name === \"ngn\") {\n      ngn = value;\n      btc = value / sell_btc_ngn_rate;\n      usd = sell_btc_usd_rate * value;\n      // usd = 26000 * btc;\n      ghs = value / sell_btc_ghs_rate;\n      setState((state) => ({ ...state, btc, usd, ngn, ghs }));\n    } else if (name === \"usd\") {\n      usd = value;\n      btc = value / sell_btc_usd_rate;\n      // btc = value / 26000;\n      ngn = sell_btc_ngn_rate * btc;\n      ghs = sell_btc_ghs_rate * btc;\n      setState((state) => ({ ...state, btc, usd, ngn, ghs }));\n    } else if (name === \"ghs\") {\n      ghs = value;\n      btc = value / sell_btc_ghs_rate;\n      usd = sell_btc_usd_rate * value;\n      // usd = 26000 * btc;\n      ngn = sell_btc_ngn_rate * btc;\n      setState((state) => ({ ...state, btc, usd, ngn, ghs }));\n    }\n    if (!value) {\n      setState((state) => ({ ...state, btc: 0, usd: 0, ngn: 0, ghs: 0 }));\n    }\n  };\n\n  const handleAddress = ({ target: { name, value } }) => {\n    setState((state) => ({ ...state, [name]: value }));\n  };\n  const showPromiseConfirm = () => {\n    confirm({\n      title: `Transferring ${state.btc} BTC`,\n      icon: <ExclamationCircleOutlined style={{ color: \"#19a9de\" }} />,\n      content: `Confirm the transfer of ${state.btc} BTC to ${state.btcAddress}`,\n      onOk() {\n        return sellCoinsExternal({\n          amount: state.btc,\n          address: state.btcAddress,\n          cryptoWalletId: active.id,\n        });\n      },\n      onCancel() {},\n    });\n  };\n\n  return (\n    <div className={styles.transactionCard}>\n      {sellBTCExternal && (\n        <SuccessfulModal onClick={() => history.push(\"/app\")} />\n      )}\n      <h2 className={styles.detailsCard__title}>Details</h2>\n      <div className={styles.detailsCard__list}>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>You are sending</span>\n          <span className={styles.sub}>\n            {state.btc} {active.Currency.code}\n          </span>\n        </div>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>Amount in USD</span>\n          <span className={styles.sub}>{Money(state.usd, \"USD\")}</span>\n        </div>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>Fees</span>\n          <span className={`${styles.sub} ${styles.light}`}>US$ 0</span>\n        </div>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>Should arrive</span>\n          <span className={`${styles.sub} ${styles.light}`}>In 5 Seconds</span>\n        </div>\n      </div>\n      <hr />\n      <br />\n      <div className={styles.transactionCard__holder}>\n        <Input\n          labelClass={styles.largeMarginLabel}\n          hintClass={styles.largeMarginHint}\n          label=\"Send bitcoin from\"\n          Dummy={{ Icon: BitcoinInput, text: `${active.Currency.code} wallet` }}\n          hint={`Current Balance ${active.balance} `}\n        />\n        <Input\n          labelClass={styles.largeMarginLabel}\n          label=\"To\"\n          value={state.btcAddress}\n          name=\"btcAddress\"\n          onChange={handleAddress}\n          hint={\"Enter the wallet address to send to.\"}\n          hintClass={styles.largeMarginHint}\n          placeholder=\"Enter the wallet address\"\n        />\n      </div>\n      <div className={styles.transactionCard__holder}>\n        <Input\n          labelClass={styles.largeMarginLabel}\n          label={`Amount in ${active.Currency.code}`}\n          type=\"number\"\n          value={isNaN(state.btc) ? 0 : state.btc}\n          name=\"btc\"\n          onChange={handleChange}\n          hint={`Current rate ${Money(sell_btc_usd_rate, \"USD\")} / ${\n            active.Currency.code\n          }`}\n          hintClass={styles.largeMarginHint}\n          placeholder=\"\"\n        />\n        <Input\n          labelClass={styles.largeMarginLabel}\n          label=\"Amount in USD\"\n          type=\"number\"\n          value={isNaN(state.usd) ? 0 : state.usd}\n          name=\"usd\"\n          onChange={handleChange}\n          placeholder=\"e.g 500\"\n        />\n      </div>\n      {/* <div className={styles.transactionCard__holder}>\n        <Input\n          labelClass={styles.largeMarginLabel}\n          label=\"Amount in NGN\"\n          type=\"number\"\n          value={isNaN(state.ngn) ? 0 : state.ngn.toLocaleString()}\n          hint={`Current rate ${Money(sell_btc_ngn_rate, \"USD\")} / ${\n            active.Currency.code\n          }`}\n          name=\"ngn\"\n          onChange={handleChange}\n        />\n        <Input\n          labelClass={styles.largeMarginLabel}\n          label=\"Amount in GHC\"\n          type=\"number\"\n          value={isNaN(state.ghs) ? 0 : state.ghs.toLocaleString()}\n          hint={`Current rate ${Money(sell_btc_ghs_rate, \"USD\")} / ${\n            active.Currency.code\n          }`}\n          name=\"ghs\"\n          onChange={handleChange}\n        />\n      </div> */}\n      <Button\n        text=\"Send\"\n        disabled={\n          !state.btcAddress || state.btc > active.balance\n            ? true\n            : false \n        }\n        onClick={() => showPromiseConfirm()}\n        form=\"full\"\n      />\n    </div>\n  );\n};\n\nexport const RecieveSection = ({\n  btcRates,\n  active,\n  btcWalletAddress = \"\",\n  error = false,\n  title = \"Scan to copy BTC wallet address\",\n}) => {\n  return (\n    <div className={styles.transactionCard}>\n      <div className={styles.transactionCard__holder__sub}>\n        <div className={styles.scanSell} style={{ textAlign: \"center\" }}>\n          <h3 style={{ textTransform: \"capitalize\" }} className={styles.title}>\n            {`Scan to copy ${active.Currency.code} wallet address`}\n          </h3>\n          <br />\n          <div className={styles.barcode}>\n            {QRCode({ text: btcWalletAddress, size: 300 })}\n          </div>\n          <br />\n          <div\n            className={styles.copy}\n            style={{ display: \"flex\", justifyContent: \"center\" }}\n          >\n            <span style={{ border: \"1px  solid grey\", padding: 8 }}>\n              <small>{btcWalletAddress}</small>\n            </span>\n            <Clipboard\n              style={{ padding: 8 }}\n              component=\"div\"\n              data-clipboard-text={btcWalletAddress}\n              onSuccess={() =>\n                notification.success({\n                  message: `${active.Currency.code} address copied`,\n                  duration: 2.5,\n                })\n              }\n            >\n              <Copy title=\"copy btc address\" />\n            </Clipboard>\n          </div>\n          <br />\n          {/* <div className={styles.info}>\n            Current exchange rate:{\" \"}\n            {Money(\n              (btcRates && btcRates.tickers && btcRates.tickers.BTCNGN.sell) ||\n                0,\n              \"NGN\"\n            )}\n            /1{active.Currency.code}\n          </div> */}\n          {error && <div className={styles.error}>error message</div>}\n        </div>\n      </div>\n    </div>\n  );\n}; // done\n","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/landing/components.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/Modals/addWalletModal.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/transactions/giftCardTrans.js",["939","940","941","942","943","944","945","946","947"],"import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Tabs } from \"antd\";\nimport { DashboardLayout } from \"../../components/layout\";\n// import { TableSort } from \"../../assets/svg\";\nimport { Money } from \"../../utils/helper\";\nimport styles from \"../styles.module.scss\";\nimport {\n  DepositsTab,\n  WithdrawalsTab,\n  GiftCardTradesTab,\n  BillPaymentTab,\n  PTwoPTab,\n  BuyGiftCardTab,\n} from \"./components\";\nimport TransactionModalBig, {\n  TransactionModalBillPayment,\n  TransactionModalBuyGiftCard,\n  TransactionModalP2P\n} from \"../../components/Modals/transaction-info-modal-big\";\nimport TransactionModal from \"../../components/Modals/transaction-info-modal\";\nimport {\n  getGiftCardTransactionHistory,\n  getGiftCardTransaction,\n} from \"../../redux/actions/giftCard\";\nimport {\n  getAllBuyCardTransaction,\n  getBuyCardTransaction,\n} from \"../../redux/actions/buyGiftCard\";\nimport { ArrowLeftOutlined } from \"@ant-design/icons\";\n\nconst Transactions = ({\n  goBack,\n  giftCardTrans,\n  getGiftCardTrans,\n  getGiftCardById,\n  viewGiftCardTrans,\n  getBuyGiftCardTrans,\n  getBuyGiftCardTransById,\n  BuyGiftCardTrans,\n  viewBuyGiftCardTrans,\n}) => {\n//   const [depositTransDetails, setDepositTransDetails] = React.useState(false);\n  const [giftCardTransDetails, setGiftCardTransDetails] = React.useState(false);\n//   const [billPaymentDetails, setBillPaymentDetails] = React.useState(false);\n  const [buyGiftCardDetails, setBuyGiftCardDetails] = React.useState(false);\n  const { TabPane } = Tabs;\n  function callback(key) {\n    console.log(key);\n  }\n  return (\n    <>\n    <div onClick={()=> goBack(true)} style={{display:\"flex\", flexDirection:\"row\", alignItems:'center'}}>\n      <ArrowLeftOutlined style={{fontSize:20}}/>\n      <span className={styles.gitcard__top__title}> Gift Card Transactions</span>\n    </div>\n      {/* <span className={styles.gitcard__top__title}> Fiat Transactions</span> */}\n      \n      {viewBuyGiftCardTrans && (\n        <TransactionModalBuyGiftCard\n          dateData={viewBuyGiftCardTrans.created_at}\n          amount={viewBuyGiftCardTrans.amount}\n          status={viewBuyGiftCardTrans.status}\n          cardValue={viewBuyGiftCardTrans?.card_detail?.value}\n          reference={viewBuyGiftCardTrans.reference}\n          referenceCurrency={viewBuyGiftCardTrans.description}\n          quan={viewBuyGiftCardTrans?.card_detail?.quantity}\n          setIsModalVisible={setBuyGiftCardDetails}\n          isModalVisible={buyGiftCardDetails}\n          cardCurrency={viewBuyGiftCardTrans?.card_detail?.currency}\n          cardSlug={viewBuyGiftCardTrans.card_slug}\n          estimatedUSDValue={viewBuyGiftCardTrans?.card_detail?.estimatedUSDValue}\n        />\n      )}\n      \n      {viewGiftCardTrans && (\n        <TransactionModalBig\n          title=\"Gift Card\"\n          rate={viewGiftCardTrans.rate.amount}\n          Qua={viewGiftCardTrans.comments}\n          id={viewGiftCardTrans.id}\n          cardCode={viewGiftCardTrans.cardCode}\n          images={viewGiftCardTrans.images}\n          dateData={viewGiftCardTrans.created_at}\n          amount={viewGiftCardTrans.amount}\n          status={viewGiftCardTrans.status}\n          reference={viewGiftCardTrans.reference}\n          setIsModalVisible={setGiftCardTransDetails}\n          isModalVisible={giftCardTransDetails}\n        />\n      )}\n      <div className={styles.transactions}>\n        <div className={styles.transactions__top}>\n          <div className={styles.transactions__top__sort}></div>\n        </div>\n        <div className={styles.transactions__tab}>\n          <Tabs defaultActiveKey=\"1\" onChange={callback}>\n            \n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>Sell GiftCard Transactions</span>\n                </div>\n              }\n              key=\"4\"\n            >\n              <GiftCardTradesTab\n                fetchTrans={getGiftCardTrans}\n                transaction={giftCardTrans}\n                handleAction={(id) => {\n                  getGiftCardById({ transactionId: id });\n                  setGiftCardTransDetails(true);\n                }}\n              />\n            </TabPane>\n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>Buy GiftCard Transactions</span>\n                </div>\n              }\n              key=\"5\"\n            >\n              <BuyGiftCardTab\n                fetchTrans={getBuyGiftCardTrans}\n                transaction={BuyGiftCardTrans}\n                handleAction={(id) => {\n                  getBuyGiftCardTransById({ transactionId: id });\n                  setBuyGiftCardDetails(true);\n                }}\n              />\n            </TabPane>\n          </Tabs>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  user: state.user.user,\n  balance: state.btc.balance,\n  giftCardTrans: state.giftCard.GiftCardTransaction,\n  BuyGiftCardTrans: state.buyGiftCard.buyGiftCardTransaction,\n  withdrawalTrans: state.withdrawals.WithdrawalTransaction,\n  viewGiftCardTrans: state.giftCard.giftCardDetails,\n  viewBuyGiftCardTrans: state.buyGiftCard.buyGiftCardTransactionDetails,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  getGiftCardTrans: (data) => {\n    dispatch(getGiftCardTransactionHistory(data));\n  },\n  getBuyGiftCardTrans: (data) => {\n    dispatch(getAllBuyCardTransaction(data));\n  },\n  getBuyGiftCardTransById: (data) => {\n    dispatch(getBuyCardTransaction(data));\n  },\n  getGiftCardById: (data) => {\n    dispatch(getGiftCardTransaction(data));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Transactions);\n","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/transactions/fiatTrans.js",["948","949","950","951","952","953","954","955"],"import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Tabs } from \"antd\";\nimport { DashboardLayout } from \"../../components/layout\";\n// import { TableSort } from \"../../assets/svg\";\nimport { Money } from \"../../utils/helper\";\nimport styles from \"../styles.module.scss\";\nimport {\n  DepositsTab,\n  WithdrawalsTab,\n  GiftCardTradesTab,\n  BillPaymentTab,\n  PTwoPTab,\n  BuyGiftCardTab,\n} from \"./components\";\nimport TransactionModalBig, {\n  TransactionModalBillPayment,\n  TransactionModalBuyGiftCard,\n  TransactionModalP2P,\n} from \"../../components/Modals/transaction-info-modal-big\";\nimport TransactionModal from \"../../components/Modals/transaction-info-modal\";\nimport {\n  getGiftCardTransactionHistory,\n  getGiftCardTransaction,\n} from \"../../redux/actions/giftCard\";\nimport {\n  getAllUserWithdrawalDetails,\n  getWithdrawalDetailsById,\n} from \"../../redux/actions/withdrawals\";\nimport {\n  getAllUserPaymentDetails,\n  getPaymentDetailsById,\n} from \"../../redux/actions/payment\";\nimport {\n  getAllUserBillPaymentDetails,\n  getBillPaymentDetailsById,\n} from \"../../redux/actions/billPayment\";\nimport {\n  getAllUserFiatP2PTransferDetails,\n  getFiatP2PTransferById,\n} from \"../../redux/actions/pairTwoPair\";\nimport {\n  ArrowLeftOutlined,\n  LoadingOutlined,\n  ReloadOutlined,\n} from \"@ant-design/icons\";\n\nconst Transactions = ({\n  goBack,\n  depositTransaction,\n  BillPaymentTrans,\n  pairTwoPairFiatTrans,\n  withdrawalTrans,\n  getWithdrawalTrans,\n  getDepositTrans,\n  getBillPaymentTrans,\n  getP2PTrans,\n  getP2PTransById,\n  getDepositById,\n  getBillPaymentById,\n  getWithdrawalById,\n  viewWithdrawalTrans,\n  viewDepositTrans,\n  viewBillPaymentTrans,\n  viewP2PTrans,\n  viewBuyGiftCardTrans,\n  fiatLoading,\n}) => {\n  const [depositTransDetails, setDepositTransDetails] = React.useState(false);\n  const [giftCardTransDetails, setGiftCardTransDetails] = React.useState(false);\n  const [billPaymentDetails, setBillPaymentDetails] = React.useState(false);\n  const [buyGiftCardDetails, setBuyGiftCardDetails] = React.useState(false);\n  const [pairTwoPairFiatTransDetails, setPairTwoPairFiatTransDetails] =\n    React.useState(false);\n  const [withdrawalTransDetails, setWithdrawalTransDetails] =\n    React.useState(false);\n  const { TabPane } = Tabs;\n  function callback(key) {\n    console.log(key);\n  }\n  return (\n    <>\n      <div\n        style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\" }}\n      >\n        <div\n          onClick={() => goBack(true)}\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n          }}\n        >\n          <ArrowLeftOutlined style={{ fontSize: 20 }} />\n          <span className={styles.gitcard__top__title}>\n            {\" \"}\n            Fiat Transactions{\" \"}\n          </span>\n        </div>\n        <div style={{display:'flex', alignItems:'center', marginLeft:20}}>\n          {\" \"}\n          {!fiatLoading ? (\n            <ReloadOutlined\n              onClick={() => getWithdrawalTrans({ skip: 0, limit: 10 })}\n              style={{ fontSize: 25 }}\n            />\n          ) : (\n            <LoadingOutlined style={{ fontSize: 25 }} />\n          )}\n        </div>\n      </div>\n\n      {/* <span className={styles.gitcard__top__title}> Fiat Transactions</span> */}\n      {viewP2PTrans && (\n        <TransactionModalP2P\n          dateData={viewP2PTrans.createdAt}\n          amountSent={Money(\n            viewP2PTrans?.amount_sent_object?.value,\n            viewP2PTrans?.amountSent?.currency\n          )}\n          amountReceived={Money(\n            viewP2PTrans?.amount_received_object?.value,\n            viewP2PTrans?.amountReceived?.currency\n          )}\n          status={viewP2PTrans.status}\n          reference={viewP2PTrans.reference}\n          rate={`Transfer at ${viewP2PTrans.rate.value}`}\n          transferNote={viewP2PTrans?.note}\n          setIsModalVisible={setPairTwoPairFiatTransDetails}\n          isModalVisible={pairTwoPairFiatTransDetails}\n        />\n      )}\n      {viewBuyGiftCardTrans && (\n        <TransactionModalBuyGiftCard\n          dateData={viewBuyGiftCardTrans.createdAt}\n          amount={viewBuyGiftCardTrans.amount}\n          status={viewBuyGiftCardTrans.status}\n          cardValue={viewBuyGiftCardTrans?.cardDetails?.cardValue}\n          reference={viewBuyGiftCardTrans.reference}\n          referenceCurrency={viewBuyGiftCardTrans.referenceCurrency}\n          quan={viewBuyGiftCardTrans?.cardDetails?.quantity}\n          setIsModalVisible={setBuyGiftCardDetails}\n          isModalVisible={buyGiftCardDetails}\n          cardCurrency={viewBuyGiftCardTrans?.cardDetails?.cardCurrency}\n          cardSlug={viewBuyGiftCardTrans.cardSlug}\n          estimatedUSDValue={\n            viewBuyGiftCardTrans?.cardDetails?.estimatedUSDValue\n          }\n        />\n      )}\n      {viewDepositTrans && (\n        <TransactionModal\n          title={\"Deposit\"}\n          dateData={viewDepositTrans.created_at}\n          amount={viewDepositTrans.amount}\n          status={viewDepositTrans.status}\n          reference={viewDepositTrans.reference}\n          setIsModalVisible={setDepositTransDetails}\n          isModalVisible={depositTransDetails}\n        />\n      )}\n      {viewWithdrawalTrans && (\n        <TransactionModal\n          title={\"Withdrawal\"}\n          dateData={viewWithdrawalTrans.created_at}\n          amount={viewWithdrawalTrans.amount}\n          status={viewWithdrawalTrans.status}\n          reference={viewWithdrawalTrans.reference}\n          setIsModalVisible={setWithdrawalTransDetails}\n          isModalVisible={withdrawalTransDetails}\n        />\n      )}\n      {viewBillPaymentTrans && (\n        <TransactionModalBillPayment\n          setIsModalVisible={setBillPaymentDetails}\n          isModalVisible={billPaymentDetails}\n          dateData={viewBillPaymentTrans.created_at}\n          amount={viewBillPaymentTrans.amount}\n          status={viewBillPaymentTrans.status}\n          reference={viewBillPaymentTrans.reference}\n          title={\"Bill Payment\"}\n          transactionFee={viewBillPaymentTrans.transactionFee}\n          id={viewBillPaymentTrans.id}\n          referenceCurrency={viewBillPaymentTrans.FiatCurrency.code}\n          details={viewBillPaymentTrans.detail}\n        />\n      )}\n      <div className={styles.transactions}>\n        <div className={styles.transactions__top}>\n          <div className={styles.transactions__top__sort}></div>\n        </div>\n        <div className={styles.transactions__tab}>\n          <Tabs defaultActiveKey=\"1\" onChange={callback}>\n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item__first}>\n                  <span>Deposits</span>\n                </div>\n              }\n              key=\"1\"\n            >\n              <DepositsTab\n                fetchTrans={getDepositTrans}\n                transaction={depositTransaction}\n                handleAction={(id) => {\n                  getDepositById({ transactionId: id });\n                  setDepositTransDetails(true);\n                }}\n              />\n            </TabPane>\n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>Withdrawals</span>\n                </div>\n              }\n              key=\"2\"\n            >\n              <WithdrawalsTab\n                fetchTrans={getWithdrawalTrans}\n                transaction={withdrawalTrans}\n                handleAction={(id) => {\n                  getWithdrawalById({ transactionId: id });\n                  setWithdrawalTransDetails(true);\n                }}\n              />\n            </TabPane>\n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>Bill Payment</span>\n                </div>\n              }\n              key=\"3\"\n            >\n              <BillPaymentTab\n                fetchTrans={getBillPaymentTrans}\n                transaction={BillPaymentTrans}\n                handleAction={(id) => {\n                  getBillPaymentById({ transactionId: id });\n                  setBillPaymentDetails(true);\n                }}\n              />\n            </TabPane>\n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>P2P Fiat Transactions</span>\n                </div>\n              }\n              key=\"6\"\n            >\n              <PTwoPTab\n                fetchTrans={getP2PTrans}\n                transaction={pairTwoPairFiatTrans}\n                handleAction={(id) => {\n                  getP2PTransById({ transactionId: id });\n                  setPairTwoPairFiatTransDetails(true);\n                }}\n              />\n            </TabPane>\n          </Tabs>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  user: state.user.user,\n  btcRates: state.btc.btcTicker,\n  balance: state.btc.balance,\n  btcTrans: state.btc.BTCTransaction,\n  buyTrans: state.btc.buyTransaction,\n  sellTrans: state.btc.sellTransaction,\n  sendTrans: state.btc.sendTransaction,\n  p2pTrans: state.btc.p2pTransaction,\n  BillPaymentTrans: state.billPayment.BillPaymentTransaction,\n  pairTwoPairFiatTrans: state.pairTwoPair.pairTwoPairFiatTransaction,\n  withdrawalTrans: state.withdrawals.WithdrawalTransaction,\n  fiatLoading: state.withdrawals.loading,\n  depositTransaction: state.payment.DepositTransaction,\n  viewP2PTrans:\n    state.pairTwoPair.pairTwoPairFiatTransactionDetails &&\n    state.pairTwoPair.pairTwoPairFiatTransactionDetails.transaction,\n  viewGiftCardTrans: state.giftCard.giftCardDetails,\n  viewWithdrawalTrans: state.withdrawals.withdrawalDetails,\n  viewDepositTrans: state.payment.depositTransactionDetails,\n  viewBillPaymentTrans: state.billPayment.BillPaymentTransactionDetails,\n});\n\n// viewBTCTrans,\n//   viewBuyTrans,\n//   viewSellTrans,\n//   viewSendTrans,\n//   viewP2PCryptoTrans,\nconst mapDispatchToProps = (dispatch) => ({\n  getWithdrawalTrans: (data) => {\n    dispatch(getAllUserWithdrawalDetails(data));\n  },\n  getDepositTrans: (data) => {\n    dispatch(getAllUserPaymentDetails(data));\n  },\n  getBillPaymentTrans: (data) => {\n    dispatch(getAllUserBillPaymentDetails(data));\n  },\n  getP2PTrans: (data) => {\n    dispatch(getAllUserFiatP2PTransferDetails(data));\n  },\n  getP2PTransById: (data) => {\n    dispatch(getFiatP2PTransferById(data));\n  },\n  getBillPaymentById: (data) => {\n    dispatch(getBillPaymentDetailsById(data));\n  },\n  getWithdrawalById: (data) => {\n    dispatch(getWithdrawalDetailsById(data));\n  },\n  getDepositById: (data) => {\n    dispatch(getPaymentDetailsById(data));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Transactions);\n","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/transactions/cryptoTrans.js",["956","957","958","959","960","961","962"],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/Modals/withdraw-modal-Initial.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/home/components2.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/actions/withdrawals.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/on-boarding/components.js",["963"],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/rate/components.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/buy-coin/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/sell-coin/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/Modals/transaction-info-modal.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/Modals/withdrawal-modal-3rd.js",["964","965"],"import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Modal } from \"antd\";\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\nimport ModalWrapper from \"./index\";\nimport styles from \"./styles.module.scss\";\nimport Input from \"../input\";\nimport Select from \"../select\";\nimport Button from \"../button\";\nimport * as actionTypes from \"../../redux/constants\";\nimport { Money } from \"../../utils/helper\";\nimport {\n  getBankListByCountry,\n  verifyBankAccountDetails,\n  getBankBranchByID,\n} from \"../../redux/actions/bank\";\nimport { initialWithdrawalByUser } from \"../../redux/actions/withdrawals\";\nimport generalService from \"../../redux/services/GeneralService\";\nimport fetch from \"../../redux/services/FetchInterceptor\";\nimport { getBTCWalletDetails } from \"../../redux/actions/btc\";\n\nconst { confirm } = Modal;\n\nconst WithDrawModal3rd = ({\n  setIsModalVisible,\n  isModalVisible,\n  showCloseAction,\n  loading,\n  bankList,\n  verifyBankAccount,\n  bankName,\n  getBankBranchList,\n  branchList,\n  getBankList,\n  submitBankDetails,\n  balance\n}) => {\n  const INITIAL_STATE = {\n    accountNumber: \"\",\n    bankCode: \"\",\n    bvn: \"\",\n    accountName: \"\",\n    bankName: \"\",\n    currency: \"\",\n    bankBranchCode: \"\",\n    bankBranchName: \"\",\n  };\n\n  const [state, setState] = useState(INITIAL_STATE);\n  const [acc, setAcc] = React.useState({\n    bankAccountId: \"\",\n    narration: \"\",\n    amount: \"\",\n    pin: \"\",\n    currency: \"\",\n  });\n  const [fee, setFee] = React.useState(0);\n  React.useEffect(() => {\n    if (state.currency && acc.amount && acc.amount >= 500) {\n      setFee(0)\n      function api() {\n        return fetch({\n          url: `/payments/outwards/get-transaction-fee`,\n          method: \"get\",\n          params: {\n            amount: acc.amount,\n            currencyId: state.currencyId,\n          },\n        });\n      }\n      api().then((res) => {\n        setFee(res.data.fee);\n      });\n    }\n  }, [state.currency, acc.amount, state.currencyId]);\n\n  useEffect(() => {\n    if (state.bankCode && state.accountNumber.length === 10) {\n      verifyBankAccount({\n        bankCode: state.bankCode,\n        accountNumber: state.accountNumber,\n      });\n    }\n  }, [state.bankCode, state.accountNumber, verifyBankAccount]);\n  useEffect(() => {\n    if (branchList && branchList.length === 1) {\n      setState((state) => ({\n        ...state,\n        bankBranchName: branchList && branchList[0].branch_name,\n        bankBranchCode: branchList && branchList[0].branch_code,\n      }));\n    }\n  }, [branchList]);\n  useEffect(() => {\n    if (bankName && bankName.accountName) {\n      setState((state) => ({\n        ...state,\n        accountName: bankName && bankName.accountName,\n      }));\n    }\n  }, [bankName]);\n\n  const handleChange = ({ target: { name, value } }) => {\n    setState((state) => ({ ...state, [name]: value }));\n  };\n\n  const handleBankCode = (value) => {\n    handleChange({ target: { name: \"bankCode\", value: value.split(\",\")[0] } });\n    handleChange({ target: { name: \"bankName\", value: value.split(\",\")[1] } });\n    handleChange({ target: { name: \"accountName\", value: \"\" } });\n    handleChange({ target: { name: \"accountNumber\", value: \"\" } });\n    handleChange({ target: { name: \"accountNumber\", value: \"\" } });\n    handleChange({ target: { name: \"bankBranchCode\", value: \"\" } });\n    if (state.currency === \"GH\") getBankBranchList({ id: value.split(\",\")[2] });\n  };\n\n  const handleFormSubmit = (e) => {\n    const userId = localStorage.getItem(actionTypes.AUTH_TOKEN_ID);\n    if (e) {\n      e.preventDefault();\n    }\n    // {\n    //   \"accountNumber\": \"0217712602\",\n    //   \"accountName\": \"BELLO MUBARAK AYOBAMI\",\n    //   \"bankCode\": \"058\",\n    //   \"bankName\": \"Guaranty Trust Bank\",\n    //   \"currency\": \"NGN\"\n    // }\n    let data = {};\n    data.accountNumber = state.accountNumber;\n    data.accountName = state.accountName;\n    data.bankCode = state.bankCode;\n    data.bankName = state.bankName;\n    data.currency = state.currency;\n    \n    confirm({\n      title: `Withdrawing ${Money(acc.amount, state.currency)}`,\n      icon: <ExclamationCircleOutlined style={{ color: \"#19a9de\" }} />,\n      content: `Confirm the withdrawal of ${Money(acc.amount, state.currency)} into ${\n        state.accountName\n      } ${state.accountNumber} ${state.bankName}`,\n      onOk() {\n        // return submitBankDetails({ ...acc, bankAccountId: bankAccount.id, currency: state.currency});\n      },\n      onCancel() {},\n    });\n  };\n  \n  return (\n    <ModalWrapper\n      showCloseAction={showCloseAction}\n      isModalVisible={isModalVisible}\n      setIsModalVisible={setIsModalVisible}\n      className={styles.slimModal}\n    >\n      <div className={styles.title}>Withdraw to 3rd party account</div>\n      <Select\n        labelClass={styles.profileBankInputLabel}\n        className={styles.profileBankInput}\n        label=\"Select Wallet\"\n        value={state.currency}\n        onSelect={(value) => {\n          \n          setState((state) => ({\n            ...state,\n            currency: value.Currency.code,\n            currencyId:value.Currency.id,\n            accountNumber: \"\",\n            bankCode: \"\",\n            bvn: \"\",\n            accountName: \"\",\n            bankName: \"\",\n            bankBranchCode: \"\",\n            bankBranchName: \"\",\n          }));\n          getBankList({ country: value.Currency.code.substring(0,2) });\n        }}\n        name=\"select payment currency\"\n        options={balance.fiatWallets.map((item)=> ({\n          render:`${item.Currency.name}`,\n          value:item\n        }))}\n      />\n      <Select\n        name=\"bankCode\"\n        value={state.bankCode}\n        onSelect={(value) => handleBankCode(value)}\n        label=\"Bank\"\n        placeholder=\"Select your bank\"\n        options={bankList?.map((i) => ({\n          value: `${i.code},${i.name}`,\n          render: i.name,\n        }))}\n      />\n      {state.currency === \"GHS\" && (\n        <Select\n          name=\"bankBranchName\"\n          labelClass={styles.profileBankInputLabel}\n          className={styles.profileBankInput}\n          value={`${state.bankBranchCode},${state.bankBranchName}`}\n          onSelect={(value) => {\n            setState((state) => ({\n              ...state,\n              bankBranchName: value.split(\",\")[1],\n              bankBranchCode: value.split(\",\")[0],\n            }));\n          }}\n          label=\"Bank Branch\"\n          placeholder=\"Select your bank branch\"\n          options={\n            branchList &&\n            branchList?.map((i) => ({\n              value: `${i.branch_code},${i.branch_name}`,\n              render: i.branch_name,\n            }))\n          }\n        />\n      )}\n      <Input\n        name=\"accountNumber\"\n        value={state.accountNumber}\n        onChange={handleChange}\n        label=\"Account Number\"\n        placeholder=\"e.g 01236548\"\n        pattern=\"\\d{10}$\"\n        maxLength=\"10\"\n        hint=\"Please ensure to input the correct account number\"\n      />\n      <Input\n        name=\"accountName\"\n        value={state.accountName}\n        onChange={handleChange}\n        label=\"Account Name\"\n        placeholder=\"Enter your account name\"\n        readOnly={true}\n        disabled\n      />\n      <Input\n        className={styles.largeMarginLabel}\n        label=\"Withdrawal amount\"\n        placeholder=\"Enter amount here\"\n        type=\"number\"\n        value={acc.amount}\n        min={500}\n        onChange={(e) => setAcc({ ...acc, amount: e.target.value })}\n        hint={state.currency && acc.amount ?\n          <span>\n            You will be charged <strong>{Money(fee, state.currency || \"\")}</strong> for this withdrawal.\n          </span> : null\n        }\n      />\n      <Input\n        className={styles.largeMarginLabel}\n        label=\"Narration\"\n        placeholder=\"Enter narration here\"\n        type=\"text\"\n        value={acc.narration}\n        onChange={(e) => setAcc({ ...acc, narration: e.target.value })}\n      />\n      <Input\n        className={styles.largeMarginLabel}\n        label=\"Enter Transaction Pin\"\n        placeholder=\"Enter Transaction Pin\"\n        type=\"password\"\n        maxlength={4}\n        value={acc.pin}\n        onChange={(e) => setAcc({ ...acc, pin: e.target.value })}\n      />\n      <Button\n        onClick={() => handleFormSubmit()}\n        disabled={\n          !state.accountNumber ||\n          !state.accountName ||\n          !state.bankCode ||\n          acc.amount < 500 ||\n          !fee ||\n          loading\n        }\n        className={styles.button}\n        text=\"Withdraw\"\n        form=\"full\"\n      />\n    </ModalWrapper>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  loading: state.withdrawals.loading,\n  bankList: state.bank.bankList,\n  bankName: state.bank.bankDetails,\n  bankLink: state.bank.bankList,\n  balance: state.btc.balance\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  verifyBankAccount: (data) => {\n    dispatch(verifyBankAccountDetails(data));\n  },\n  submitBankDetails: (data) => {\n    dispatch(initialWithdrawalByUser(data));\n  },\n  getBankBranchList: (data) => {\n    dispatch(getBankBranchByID(data));\n  },\n  getBankList: (data) => {\n    dispatch(getBankListByCountry(data));\n  },\n  getBalance: () => {\n    dispatch(getBTCWalletDetails())\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WithDrawModal3rd);\n","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/Modals/withdraw-modal-personal.js",["966"],"import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Modal } from \"antd\";\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\nimport ModalWrapper from \"./index\";\nimport styles from \"./styles.module.scss\";\nimport Input from \"../input\";\nimport Select from \"../select\";\nimport Button from \"../button\";\nimport { getUserBankAccount } from \"../../redux/actions/user\";\nimport { initialWithdrawalByUser } from \"../../redux/actions/withdrawals\";\nimport { Money } from \"../../utils/helper\";\nimport fetch from \"../../redux/services/FetchInterceptor\";\nimport { getBTCWalletDetails } from \"../../redux/actions/btc\";\nimport PinInput from \"react-pin-input\";\n\nconst { confirm } = Modal;\n\nconst WithDrawModalPersonal = ({\n  setIsModalVisible,\n  isModalVisible,\n  showCloseAction,\n  getUserBankDetails,\n  bankAccounts,\n  submitBankDetails,\n  loading,\n  getBalance,\n  balance\n}) => {\n  React.useEffect(() => {\n    getUserBankDetails();\n    getBalance()\n    // eslint-disable-next-line\n  }, []);\n  const [fee, setFee] = React.useState(0);\n  const [acc, setAcc] = React.useState({\n    bankAccountId: \"\",\n    narration: \"\",\n    amount: \"\",\n    currency: \"\",\n    pin: \"\",\n  });\n  React.useEffect(() => {\n    if (acc.currency && acc.amount && acc.amount >= 500) {\n      function api() {\n        setFee(0)\n        return fetch({\n          url: `/payments/outwards/get-transaction-fee`,\n          method: \"get\",\n          params: {\n            amount: acc.amount,\n            currencyId: acc.currencyId,\n          },\n        });\n      }\n      api().then((res) => {\n        setFee(res.data.fee);\n      });\n    }\n  }, [acc.currencyId, acc.amount, acc.currency]);\n\n  const showPromiseConfirm = () => {\n    const data =\n      bankAccounts &&\n      bankAccounts.filter((item) => item.id === acc.bankAccountId)[0];\n    confirm({\n      title: `Withdrawing ${Money(acc.amount, \"NGN\")}`,\n      icon: <ExclamationCircleOutlined style={{ color: \"#19a9de\" }} />,\n      content: `Confirm the withdrawal of ${Money(acc.amount, acc.currency)} into ${\n        data.details.account_name\n      } ${data.account_number} ${data.details.bankName}`,\n      onOk() {\n        return submitBankDetails({ ...acc });\n      },\n      onCancel() {},\n    });\n  };\n\n  return (\n    <ModalWrapper\n      showCloseAction={showCloseAction}\n      className={styles.slimModal}\n      isModalVisible={isModalVisible}\n      setIsModalVisible={setIsModalVisible}\n    >\n      <div className={styles.title}>Withdraw</div>\n      {console.log('bank accounts', bankAccounts)}\n      <Select\n        options={\n          bankAccounts &&\n          bankAccounts.map((item) => ({\n            value: item.id,\n            render: `${item.account_number} - ${item.details.bankName} - ${item.details.account_name}`,\n          }))\n        }\n        value={acc.bankAccountId}\n        onSelect={(e) => setAcc({ ...acc, bankAccountId: e })}\n        className={styles.largeMarginLabel}\n        label=\"Select Account to Transfer to\"\n      />\n      <Select\n        labelClass={styles.largeMarginLabel}\n        label=\"Select Wallet\"\n        value={acc.currency}\n        onSelect={(value) => {\n          setAcc((acc) => ({\n            ...acc,\n            currency: value.Currency.code,\n            currencyId:value.Currency.id,\n            fiatWalletId:value.id,\n            pin: \"\",\n            narration: \"\",\n            amount: 0,\n          }));\n        }}\n        name=\"select payment currency\"\n        // options={[\n        //   { render: \"NGN\", value: \"NGN\" },\n        //   { render: \"GHS\", value: \"GHS\" },\n        // ]}\n        options={balance.fiatWallets.map((item)=> ({\n          render:`${item.Currency.name}`,\n          value:item\n        }))}\n      />\n      <Input\n        className={styles.largeMarginLabel}\n        label=\"Withdrawal amount\"\n        placeholder=\"Enter amount here\"\n        type=\"number\"\n        value={acc.amount}\n        // min={500}\n        onChange={(e) => setAcc({ ...acc, amount: e.target.value, pin: \"\", narration: \"\" })}\n        hint={acc.currency && acc.amount ?\n          <span>\n            You will be charged <strong>{Money(fee, acc.currency || \"\")}</strong> for this withdrawal.\n          </span> : null\n        }\n      />\n      <Input\n        className={styles.largeMarginLabel}\n        label=\"Narration\"\n        placeholder=\"Enter narration here\"\n        type=\"text\"\n        value={acc.narration}\n        onChange={(e) => setAcc({ ...acc, narration: e.target.value })}\n      />\n      <Input\n        className={styles.largeMarginLabel}\n        label=\"Enter Transaction Pin\"\n        placeholder=\"Enter Transaction Pin\"\n        type=\"number\"\n        maxlength={4}\n        value={acc.pin}\n        onChange={(e) => setAcc({ ...acc, pin: e.target.value })}\n      />\n      \n      <Button\n        onClick={() => showPromiseConfirm()}\n        className={styles.button}\n        disabled={\n          !acc.bankAccountId || !acc.pin || !acc.amount || loading || !fee\n        }\n        text=\"Withdraw\"\n        form=\"full\"\n      />\n    </ModalWrapper>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  loading: state.withdrawals.loading,\n  bankAccounts: state.bank.bankAccounts,\n  balance:state.btc.balance\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getUserBankDetails: () => {\n    dispatch(getUserBankAccount());\n  },\n  submitBankDetails: (data) => {\n    dispatch(initialWithdrawalByUser(data));\n  },\n  getBalance: ()=> {\n    dispatch(getBTCWalletDetails())\n  }\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(WithDrawModalPersonal);\n","/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/redux/services/WithdrawalsService.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/components/Modals/transaction-info-modal-big.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/sell-coin/components.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/astro_users/src/pages/buy-coin/components.js",[],{"ruleId":"967","replacedBy":"968"},{"ruleId":"969","replacedBy":"970"},{"ruleId":"971","severity":1,"message":"972","line":407,"column":35,"nodeType":"973","messageId":"974","endLine":407,"endColumn":37},{"ruleId":"975","severity":1,"message":"976","line":57,"column":6,"nodeType":"977","endLine":57,"endColumn":19,"suggestions":"978"},{"ruleId":"975","severity":1,"message":"976","line":61,"column":6,"nodeType":"977","endLine":61,"endColumn":31,"suggestions":"979"},{"ruleId":"980","severity":1,"message":"981","line":9,"column":3,"nodeType":"982","messageId":"983","endLine":9,"endColumn":10},{"ruleId":"980","severity":1,"message":"981","line":4,"column":10,"nodeType":"982","messageId":"983","endLine":4,"endColumn":17},{"ruleId":"967","replacedBy":"984"},{"ruleId":"969","replacedBy":"985"},{"ruleId":"980","severity":1,"message":"986","line":71,"column":10,"nodeType":"982","messageId":"983","endLine":71,"endColumn":26},{"ruleId":"980","severity":1,"message":"987","line":71,"column":28,"nodeType":"982","messageId":"983","endLine":71,"endColumn":43},{"ruleId":"980","severity":1,"message":"988","line":72,"column":10,"nodeType":"982","messageId":"983","endLine":72,"endColumn":26},{"ruleId":"980","severity":1,"message":"989","line":72,"column":28,"nodeType":"982","messageId":"983","endLine":72,"endColumn":43},{"ruleId":"980","severity":1,"message":"990","line":4,"column":10,"nodeType":"982","messageId":"983","endLine":4,"endColumn":25},{"ruleId":"980","severity":1,"message":"991","line":11,"column":3,"nodeType":"982","messageId":"983","endLine":11,"endColumn":20},{"ruleId":"980","severity":1,"message":"992","line":14,"column":3,"nodeType":"982","messageId":"983","endLine":14,"endColumn":17},{"ruleId":"980","severity":1,"message":"993","line":16,"column":8,"nodeType":"982","messageId":"983","endLine":16,"endColumn":27},{"ruleId":"980","severity":1,"message":"994","line":23,"column":3,"nodeType":"982","messageId":"983","endLine":23,"endColumn":32},{"ruleId":"980","severity":1,"message":"995","line":24,"column":3,"nodeType":"982","messageId":"983","endLine":24,"endColumn":25},{"ruleId":"980","severity":1,"message":"996","line":65,"column":10,"nodeType":"982","messageId":"983","endLine":65,"endColumn":30},{"ruleId":"980","severity":1,"message":"997","line":65,"column":32,"nodeType":"982","messageId":"983","endLine":65,"endColumn":55},{"ruleId":"980","severity":1,"message":"990","line":4,"column":10,"nodeType":"982","messageId":"983","endLine":4,"endColumn":25},{"ruleId":"980","severity":1,"message":"998","line":9,"column":3,"nodeType":"982","messageId":"983","endLine":9,"endColumn":14},{"ruleId":"980","severity":1,"message":"999","line":10,"column":3,"nodeType":"982","messageId":"983","endLine":10,"endColumn":17},{"ruleId":"980","severity":1,"message":"991","line":11,"column":3,"nodeType":"982","messageId":"983","endLine":11,"endColumn":20},{"ruleId":"980","severity":1,"message":"1000","line":13,"column":3,"nodeType":"982","messageId":"983","endLine":13,"endColumn":17},{"ruleId":"980","severity":1,"message":"1001","line":14,"column":3,"nodeType":"982","messageId":"983","endLine":14,"endColumn":11},{"ruleId":"980","severity":1,"message":"992","line":15,"column":3,"nodeType":"982","messageId":"983","endLine":15,"endColumn":17},{"ruleId":"980","severity":1,"message":"990","line":4,"column":10,"nodeType":"982","messageId":"983","endLine":4,"endColumn":25},{"ruleId":"980","severity":1,"message":"1002","line":6,"column":10,"nodeType":"982","messageId":"983","endLine":6,"endColumn":15},{"ruleId":"980","severity":1,"message":"998","line":9,"column":3,"nodeType":"982","messageId":"983","endLine":9,"endColumn":14},{"ruleId":"980","severity":1,"message":"999","line":10,"column":3,"nodeType":"982","messageId":"983","endLine":10,"endColumn":17},{"ruleId":"980","severity":1,"message":"1000","line":12,"column":3,"nodeType":"982","messageId":"983","endLine":12,"endColumn":17},{"ruleId":"980","severity":1,"message":"1001","line":13,"column":3,"nodeType":"982","messageId":"983","endLine":13,"endColumn":11},{"ruleId":"980","severity":1,"message":"1003","line":17,"column":3,"nodeType":"982","messageId":"983","endLine":17,"endColumn":30},{"ruleId":"980","severity":1,"message":"1004","line":19,"column":3,"nodeType":"982","messageId":"983","endLine":19,"endColumn":22},{"ruleId":"980","severity":1,"message":"1005","line":21,"column":8,"nodeType":"982","messageId":"983","endLine":21,"endColumn":24},{"ruleId":"980","severity":1,"message":"1006","line":13,"column":3,"nodeType":"982","messageId":"983","endLine":13,"endColumn":10},{"ruleId":"980","severity":1,"message":"1007","line":15,"column":3,"nodeType":"982","messageId":"983","endLine":15,"endColumn":13},{"ruleId":"967","replacedBy":"1008"},{"ruleId":"969","replacedBy":"1009"},{"ruleId":"980","severity":1,"message":"1010","line":4,"column":26,"nodeType":"982","messageId":"983","endLine":4,"endColumn":34},{"ruleId":"980","severity":1,"message":"1011","line":6,"column":3,"nodeType":"982","messageId":"983","endLine":6,"endColumn":21},{"ruleId":"980","severity":1,"message":"1012","line":7,"column":3,"nodeType":"982","messageId":"983","endLine":7,"endColumn":21},{"ruleId":"980","severity":1,"message":"1013","line":8,"column":3,"nodeType":"982","messageId":"983","endLine":8,"endColumn":16},{"ruleId":"980","severity":1,"message":"1014","line":19,"column":3,"nodeType":"982","messageId":"983","endLine":19,"endColumn":22},{"ruleId":"980","severity":1,"message":"1015","line":20,"column":3,"nodeType":"982","messageId":"983","endLine":20,"endColumn":21},{"ruleId":"980","severity":1,"message":"1016","line":98,"column":28,"nodeType":"982","messageId":"983","endLine":98,"endColumn":47},{"ruleId":"980","severity":1,"message":"1017","line":101,"column":10,"nodeType":"982","messageId":"983","endLine":101,"endColumn":16},{"ruleId":"980","severity":1,"message":"1018","line":101,"column":18,"nodeType":"982","messageId":"983","endLine":101,"endColumn":27},{"ruleId":"980","severity":1,"message":"1019","line":113,"column":10,"nodeType":"982","messageId":"983","endLine":113,"endColumn":18},{"ruleId":"980","severity":1,"message":"1020","line":4,"column":3,"nodeType":"982","messageId":"983","endLine":4,"endColumn":19},{"ruleId":"980","severity":1,"message":"1021","line":5,"column":3,"nodeType":"982","messageId":"983","endLine":5,"endColumn":20},{"ruleId":"975","severity":1,"message":"976","line":57,"column":6,"nodeType":"977","endLine":57,"endColumn":19,"suggestions":"1022"},{"ruleId":"975","severity":1,"message":"1023","line":61,"column":6,"nodeType":"977","endLine":61,"endColumn":31,"suggestions":"1024"},{"ruleId":"971","severity":1,"message":"972","line":417,"column":35,"nodeType":"973","messageId":"974","endLine":417,"endColumn":37},{"ruleId":"980","severity":1,"message":"1025","line":4,"column":10,"nodeType":"982","messageId":"983","endLine":4,"endColumn":16},{"ruleId":"980","severity":1,"message":"1026","line":2,"column":20,"nodeType":"982","messageId":"983","endLine":2,"endColumn":25},{"ruleId":"980","severity":1,"message":"1027","line":33,"column":7,"nodeType":"982","messageId":"983","endLine":33,"endColumn":14},{"ruleId":"1028","severity":1,"message":"1029","line":487,"column":7,"nodeType":"1030","messageId":"1031","endLine":487,"endColumn":13},{"ruleId":"980","severity":1,"message":"1032","line":523,"column":10,"nodeType":"982","messageId":"983","endLine":523,"endColumn":18},{"ruleId":"980","severity":1,"message":"1033","line":675,"column":9,"nodeType":"982","messageId":"983","endLine":675,"endColumn":17},{"ruleId":"980","severity":1,"message":"1034","line":679,"column":9,"nodeType":"982","messageId":"983","endLine":679,"endColumn":21},{"ruleId":"980","severity":1,"message":"1035","line":3,"column":24,"nodeType":"982","messageId":"983","endLine":3,"endColumn":30},{"ruleId":"980","severity":1,"message":"1036","line":6,"column":3,"nodeType":"982","messageId":"983","endLine":6,"endColumn":21},{"ruleId":"980","severity":1,"message":"1037","line":7,"column":3,"nodeType":"982","messageId":"983","endLine":7,"endColumn":19},{"ruleId":"980","severity":1,"message":"1038","line":8,"column":3,"nodeType":"982","messageId":"983","endLine":8,"endColumn":21},{"ruleId":"980","severity":1,"message":"981","line":14,"column":3,"nodeType":"982","messageId":"983","endLine":14,"endColumn":10},{"ruleId":"980","severity":1,"message":"1039","line":15,"column":3,"nodeType":"982","messageId":"983","endLine":15,"endColumn":15},{"ruleId":"980","severity":1,"message":"1040","line":17,"column":3,"nodeType":"982","messageId":"983","endLine":17,"endColumn":16},{"ruleId":"980","severity":1,"message":"1041","line":26,"column":33,"nodeType":"982","messageId":"983","endLine":26,"endColumn":39},{"ruleId":"980","severity":1,"message":"1042","line":59,"column":10,"nodeType":"982","messageId":"983","endLine":59,"endColumn":19},{"ruleId":"980","severity":1,"message":"1043","line":59,"column":21,"nodeType":"982","messageId":"983","endLine":59,"endColumn":33},{"ruleId":"980","severity":1,"message":"1016","line":60,"column":28,"nodeType":"982","messageId":"983","endLine":60,"endColumn":47},{"ruleId":"980","severity":1,"message":"1044","line":5,"column":3,"nodeType":"982","messageId":"983","endLine":5,"endColumn":7},{"ruleId":"980","severity":1,"message":"1045","line":7,"column":3,"nodeType":"982","messageId":"983","endLine":7,"endColumn":11},{"ruleId":"980","severity":1,"message":"1046","line":9,"column":3,"nodeType":"982","messageId":"983","endLine":9,"endColumn":15},{"ruleId":"980","severity":1,"message":"1047","line":12,"column":3,"nodeType":"982","messageId":"983","endLine":12,"endColumn":11},{"ruleId":"980","severity":1,"message":"1048","line":3,"column":24,"nodeType":"982","messageId":"983","endLine":3,"endColumn":37},{"ruleId":"980","severity":1,"message":"981","line":4,"column":10,"nodeType":"982","messageId":"983","endLine":4,"endColumn":17},{"ruleId":"980","severity":1,"message":"1040","line":4,"column":35,"nodeType":"982","messageId":"983","endLine":4,"endColumn":48},{"ruleId":"980","severity":1,"message":"1049","line":5,"column":8,"nodeType":"982","messageId":"983","endLine":5,"endColumn":14},{"ruleId":"980","severity":1,"message":"1050","line":9,"column":10,"nodeType":"982","messageId":"983","endLine":9,"endColumn":14},{"ruleId":"980","severity":1,"message":"1051","line":9,"column":16,"nodeType":"982","messageId":"983","endLine":9,"endColumn":23},{"ruleId":"980","severity":1,"message":"1052","line":11,"column":11,"nodeType":"982","messageId":"983","endLine":11,"endColumn":19},{"ruleId":"980","severity":1,"message":"1053","line":12,"column":9,"nodeType":"982","messageId":"983","endLine":12,"endColumn":16},{"ruleId":"975","severity":1,"message":"1054","line":31,"column":6,"nodeType":"977","endLine":31,"endColumn":8,"suggestions":"1055"},{"ruleId":"980","severity":1,"message":"986","line":69,"column":10,"nodeType":"982","messageId":"983","endLine":69,"endColumn":26},{"ruleId":"980","severity":1,"message":"987","line":69,"column":28,"nodeType":"982","messageId":"983","endLine":69,"endColumn":43},{"ruleId":"980","severity":1,"message":"988","line":70,"column":10,"nodeType":"982","messageId":"983","endLine":70,"endColumn":26},{"ruleId":"980","severity":1,"message":"989","line":70,"column":28,"nodeType":"982","messageId":"983","endLine":70,"endColumn":43},{"ruleId":"971","severity":1,"message":"972","line":208,"column":26,"nodeType":"973","messageId":"974","endLine":208,"endColumn":28},{"ruleId":"971","severity":1,"message":"972","line":221,"column":26,"nodeType":"973","messageId":"974","endLine":221,"endColumn":28},{"ruleId":"975","severity":1,"message":"1054","line":264,"column":6,"nodeType":"977","endLine":264,"endColumn":8,"suggestions":"1056"},{"ruleId":"980","severity":1,"message":"1057","line":318,"column":10,"nodeType":"982","messageId":"983","endLine":318,"endColumn":27},{"ruleId":"971","severity":1,"message":"972","line":475,"column":26,"nodeType":"973","messageId":"974","endLine":475,"endColumn":28},{"ruleId":"980","severity":1,"message":"990","line":4,"column":10,"nodeType":"982","messageId":"983","endLine":4,"endColumn":25},{"ruleId":"980","severity":1,"message":"1002","line":6,"column":10,"nodeType":"982","messageId":"983","endLine":6,"endColumn":15},{"ruleId":"980","severity":1,"message":"998","line":9,"column":3,"nodeType":"982","messageId":"983","endLine":9,"endColumn":14},{"ruleId":"980","severity":1,"message":"999","line":10,"column":3,"nodeType":"982","messageId":"983","endLine":10,"endColumn":17},{"ruleId":"980","severity":1,"message":"1000","line":12,"column":3,"nodeType":"982","messageId":"983","endLine":12,"endColumn":17},{"ruleId":"980","severity":1,"message":"1001","line":13,"column":3,"nodeType":"982","messageId":"983","endLine":13,"endColumn":11},{"ruleId":"980","severity":1,"message":"1003","line":17,"column":3,"nodeType":"982","messageId":"983","endLine":17,"endColumn":30},{"ruleId":"980","severity":1,"message":"1004","line":19,"column":3,"nodeType":"982","messageId":"983","endLine":19,"endColumn":22},{"ruleId":"980","severity":1,"message":"1005","line":21,"column":8,"nodeType":"982","messageId":"983","endLine":21,"endColumn":24},{"ruleId":"980","severity":1,"message":"990","line":4,"column":10,"nodeType":"982","messageId":"983","endLine":4,"endColumn":25},{"ruleId":"980","severity":1,"message":"991","line":11,"column":3,"nodeType":"982","messageId":"983","endLine":11,"endColumn":20},{"ruleId":"980","severity":1,"message":"992","line":14,"column":3,"nodeType":"982","messageId":"983","endLine":14,"endColumn":17},{"ruleId":"980","severity":1,"message":"993","line":16,"column":8,"nodeType":"982","messageId":"983","endLine":16,"endColumn":27},{"ruleId":"980","severity":1,"message":"994","line":23,"column":3,"nodeType":"982","messageId":"983","endLine":23,"endColumn":32},{"ruleId":"980","severity":1,"message":"995","line":24,"column":3,"nodeType":"982","messageId":"983","endLine":24,"endColumn":25},{"ruleId":"980","severity":1,"message":"996","line":70,"column":10,"nodeType":"982","messageId":"983","endLine":70,"endColumn":30},{"ruleId":"980","severity":1,"message":"997","line":70,"column":32,"nodeType":"982","messageId":"983","endLine":70,"endColumn":55},{"ruleId":"980","severity":1,"message":"990","line":4,"column":10,"nodeType":"982","messageId":"983","endLine":4,"endColumn":25},{"ruleId":"980","severity":1,"message":"998","line":9,"column":3,"nodeType":"982","messageId":"983","endLine":9,"endColumn":14},{"ruleId":"980","severity":1,"message":"999","line":10,"column":3,"nodeType":"982","messageId":"983","endLine":10,"endColumn":17},{"ruleId":"980","severity":1,"message":"991","line":11,"column":3,"nodeType":"982","messageId":"983","endLine":11,"endColumn":20},{"ruleId":"980","severity":1,"message":"1000","line":13,"column":3,"nodeType":"982","messageId":"983","endLine":13,"endColumn":17},{"ruleId":"980","severity":1,"message":"1001","line":14,"column":3,"nodeType":"982","messageId":"983","endLine":14,"endColumn":11},{"ruleId":"980","severity":1,"message":"992","line":15,"column":3,"nodeType":"982","messageId":"983","endLine":15,"endColumn":17},{"ruleId":"980","severity":1,"message":"1025","line":7,"column":24,"nodeType":"982","messageId":"983","endLine":7,"endColumn":30},{"ruleId":"980","severity":1,"message":"1058","line":18,"column":8,"nodeType":"982","messageId":"983","endLine":18,"endColumn":22},{"ruleId":"980","severity":1,"message":"1059","line":118,"column":11,"nodeType":"982","messageId":"983","endLine":118,"endColumn":17},{"ruleId":"980","severity":1,"message":"1060","line":15,"column":8,"nodeType":"982","messageId":"983","endLine":15,"endColumn":16},"no-native-reassign",["1061"],"no-negated-in-lhs",["1062"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'active.Currency.code'. Either include it or remove the dependency array.","ArrayExpression",["1063"],["1064"],"no-unused-vars","'LogoNav' is defined but never used.","Identifier","unusedVar",["1061"],["1062"],"'buy_btc_ghs_rate' is assigned a value but never used.","'setBtc_ghs_rate' is assigned a value but never used.","'buy_btc_ngn_rate' is assigned a value but never used.","'setBtc_ngn_rate' is assigned a value but never used.","'DashboardLayout' is defined but never used.","'GiftCardTradesTab' is defined but never used.","'BuyGiftCardTab' is defined but never used.","'TransactionModalBig' is defined but never used.","'getGiftCardTransactionHistory' is defined but never used.","'getGiftCardTransaction' is defined but never used.","'giftCardTransDetails' is assigned a value but never used.","'setGiftCardTransDetails' is assigned a value but never used.","'DepositsTab' is defined but never used.","'WithdrawalsTab' is defined but never used.","'BillPaymentTab' is defined but never used.","'PTwoPTab' is defined but never used.","'Money' is defined but never used.","'TransactionModalBillPayment' is defined but never used.","'TransactionModalP2P' is defined but never used.","'TransactionModal' is defined but never used.","'Landing' is defined but never used.","'AboutRates' is defined but never used.",["1061"],["1062"],"'AntInput' is defined but never used.","'UserSwitchOutlined' is defined but never used.","'ArrowRightOutlined' is defined but never used.","'RightOutlined' is defined but never used.","'RightCircleOutlined' is defined but never used.","'LeftCircleOutlined' is defined but never used.","'setWindowDimensions' is assigned a value but never used.","'wallet' is assigned a value but never used.","'setWallet' is assigned a value but never used.","'headerId' is assigned a value but never used.","'BarChartOutlined' is defined but never used.","'PayCircleOutlined' is defined but never used.",["1065"],"React Hook React.useEffect has missing dependencies: 'active.Currency.code' and 'active.id'. Either include them or remove the dependency array.",["1066"],"'Switch' is defined but never used.","'Modal' is defined but never used.","'getTerm' is assigned a value but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'openTerm' is assigned a value but never used.","'handleOk' is assigned a value but never used.","'handleCancel' is assigned a value but never used.","'Avatar' is defined but never used.","'MenuUnfoldOutlined' is defined but never used.","'MenuFoldOutlined' is defined but never used.","'CreditCardOutlined' is defined but never used.","'AstroLogoNav' is defined but never used.","'AstroLogoFull' is defined but never used.","'Footer' is assigned a value but never used.","'collapsed' is assigned a value but never used.","'setCollapsed' is assigned a value but never used.","'Home' is defined but never used.","'GiftCard' is defined but never used.","'Transactions' is defined but never used.","'Settings' is defined but never used.","'CloseOutlined' is defined but never used.","'Button' is defined but never used.","'show' is assigned a value but never used.","'setShow' is assigned a value but never used.","'pathname' is assigned a value but never used.","'history' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array.",["1067"],["1068"],"'sell_btc_ngn_rate' is assigned a value but never used.","'generalService' is defined but never used.","'userId' is assigned a value but never used.","'PinInput' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"1069","fix":"1070"},{"desc":"1071","fix":"1072"},{"desc":"1069","fix":"1073"},{"desc":"1074","fix":"1075"},{"desc":"1076","fix":"1077"},{"desc":"1076","fix":"1078"},"Update the dependencies array to be: [active.Currency.code, getBTCRates]",{"range":"1079","text":"1080"},"Update the dependencies array to be: [receiveBTC, getBTCRates, active.Currency.code]",{"range":"1081","text":"1082"},{"range":"1083","text":"1080"},"Update the dependencies array to be: [receiveBTC, getBTCRates, active.id, active.Currency.code]",{"range":"1084","text":"1085"},"Update the dependencies array to be: [state]",{"range":"1086","text":"1087"},{"range":"1088","text":"1087"},[1291,1304],"[active.Currency.code, getBTCRates]",[1402,1427],"[receiveBTC, getBTCRates, active.Currency.code]",[1291,1304],[1428,1453],"[receiveBTC, getBTCRates, active.id, active.Currency.code]",[952,954],"[state]",[8584,8586]]