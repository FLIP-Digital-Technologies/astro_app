[{"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/index.js":"1","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/App.js":"2","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/reportWebVitals.js":"3","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/utils/helper.js":"4","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/utils/PrivateRoute.js":"5","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/index.js":"6","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/store/index.js":"7","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/btc.js":"8","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/user.js":"9","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/payment.js":"10","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/bank.js":"11","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/giftCard.js":"12","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/constants/index.js":"13","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/assets/png/index.js":"14","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/assets/svg/index.js":"15","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Loading/index.js":"16","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/BtcTransactionService.js":"17","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/Referral.js":"18","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/GeneralService.js":"19","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/PaymentService.js":"20","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/BankService.js":"21","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/GiftCardService.js":"22","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/on-boarding/index.js":"23","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/sell-giftcard/index.js":"24","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/sign-in/index.js":"25","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/sign-up/index.js":"26","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/buy-giftcard/index.js":"27","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/coin/index.js":"28","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/landing/index.js":"29","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/about/index.js":"30","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/Verification/index.js":"31","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/rate/index.js":"32","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/bills/index.js":"33","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/transactions/index.js":"34","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/airtime/index.js":"35","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/home/index.js":"36","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/btc/index.js":"37","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/about-rates/index.js":"38","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/profile/index.js":"39","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/settings/index.js":"40","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/index.js":"41","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/FetchInterceptor.js":"42","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/buyGiftCard.js":"43","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/pairTwoPair.js":"44","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/billPayment.js":"45","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/payment.js":"46","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/giftcard.js":"47","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/withdrawal.js":"48","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/btc.js":"49","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/bank.js":"50","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/auth.js":"51","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/history.js":"52","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/configs/AppConfig.js":"53","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/sell-coin/index.js":"54","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/transactions/components.js":"55","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/Auths.js":"56","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/configs/EnvironmentConfig.js":"57","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/layout/index.js":"58","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/button/index.js":"59","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/select/index.js":"60","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/AuthService.js":"61","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/input/index.js":"62","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/layout/landing/index.js":"63","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/layout/dashboard/index.js":"64","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/layout/dashboard/data.js":"65","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/footer/index.js":"66","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/header/index.js":"67","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/header/landingHeader.js":"68","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/header/authHeader.js":"69","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/sell-coin/components.js":"70","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/btc/components.js":"71","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/billPayment.js":"72","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/withdrawals.js":"73","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/home/components.js":"74","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/buyGiftCard.js":"75","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/pairTwoPair.js":"76","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Modals/withdraw-modal-Initial.js":"77","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Modals/transaction-info-modal.js":"78","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/bills/components.js":"79","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Modals/transaction-info-modal-big.js":"80","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/rate/components.js":"81","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/landing/components.js":"82","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/sell-giftcard/components.js":"83","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/on-boarding/components.js":"84","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Modals/index.js":"85","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/BillPayment.js":"86","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/WithdrawalsService.js":"87","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/BuyGiftCard.js":"88","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/PairTwoPairService.js":"89","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Modals/withdrawal-modal-3rd.js":"90","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Modals/withdraw-modal-personal.js":"91","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/buy-coin/index.js":"92","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/upload/index.js":"93","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/buy-coin/components.js":"94","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/upload/upload.js":"95","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Modals/addWalletModal.js":"96","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Modals/addCryptoWallet.js":"97","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/crypto/index.js":"98","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/home/components2.js":"99","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/transactions/fiatTrans.js":"100","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/transactions/cryptoTrans.js":"101","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/transactions/giftCardTrans.js":"102"},{"size":1619,"mtime":1617289183767,"results":"103","hashOfConfig":"104"},{"size":2729,"mtime":1619625712263,"results":"105","hashOfConfig":"104"},{"size":362,"mtime":1617289183778,"results":"106","hashOfConfig":"104"},{"size":18960,"mtime":1619637184725,"results":"107","hashOfConfig":"104"},{"size":655,"mtime":1617289183778,"results":"108","hashOfConfig":"104"},{"size":983,"mtime":1619625712274,"results":"109","hashOfConfig":"104"},{"size":1040,"mtime":1617289183778,"results":"110","hashOfConfig":"104"},{"size":12207,"mtime":1619625712280,"results":"111","hashOfConfig":"104"},{"size":7133,"mtime":1619637153710,"results":"112","hashOfConfig":"104"},{"size":3527,"mtime":1619637138659,"results":"113","hashOfConfig":"104"},{"size":1925,"mtime":1617289183776,"results":"114","hashOfConfig":"104"},{"size":5645,"mtime":1619637148387,"results":"115","hashOfConfig":"104"},{"size":21036,"mtime":1619625712282,"results":"116","hashOfConfig":"104"},{"size":2745,"mtime":1617289183669,"results":"117","hashOfConfig":"104"},{"size":5512,"mtime":1620204051549,"results":"118","hashOfConfig":"104"},{"size":570,"mtime":1617289183764,"results":"119","hashOfConfig":"104"},{"size":5643,"mtime":1619646934473,"results":"120","hashOfConfig":"104"},{"size":654,"mtime":1619625712287,"results":"121","hashOfConfig":"104"},{"size":3885,"mtime":1619625712286,"results":"122","hashOfConfig":"104"},{"size":1062,"mtime":1619625712287,"results":"123","hashOfConfig":"104"},{"size":1125,"mtime":1619625712284,"results":"124","hashOfConfig":"104"},{"size":4296,"mtime":1619625712286,"results":"125","hashOfConfig":"104"},{"size":3813,"mtime":1619625712275,"results":"126","hashOfConfig":"104"},{"size":4402,"mtime":1619637027979,"results":"127","hashOfConfig":"104"},{"size":5449,"mtime":1617289183770,"results":"128","hashOfConfig":"104"},{"size":6258,"mtime":1619625712277,"results":"129","hashOfConfig":"104"},{"size":15536,"mtime":1619636876375,"results":"130","hashOfConfig":"104"},{"size":449,"mtime":1617289183769,"results":"131","hashOfConfig":"104"},{"size":1208,"mtime":1617289183769,"results":"132","hashOfConfig":"104"},{"size":2675,"mtime":1617289183768,"results":"133","hashOfConfig":"104"},{"size":2742,"mtime":1619625712271,"results":"134","hashOfConfig":"104"},{"size":1834,"mtime":1617289183770,"results":"135","hashOfConfig":"104"},{"size":1607,"mtime":1619625712271,"results":"136","hashOfConfig":"104"},{"size":3330,"mtime":1619625712279,"results":"137","hashOfConfig":"104"},{"size":2252,"mtime":1617289183768,"results":"138","hashOfConfig":"104"},{"size":31178,"mtime":1620205542216,"results":"139","hashOfConfig":"104"},{"size":7611,"mtime":1619636332217,"results":"140","hashOfConfig":"104"},{"size":8321,"mtime":1617289183768,"results":"141","hashOfConfig":"104"},{"size":5793,"mtime":1617289183770,"results":"142","hashOfConfig":"104"},{"size":24545,"mtime":1619625712276,"results":"143","hashOfConfig":"104"},{"size":912,"mtime":1617289183777,"results":"144","hashOfConfig":"104"},{"size":2661,"mtime":1619625712285,"results":"145","hashOfConfig":"104"},{"size":4204,"mtime":1617289183777,"results":"146","hashOfConfig":"104"},{"size":4940,"mtime":1619625712283,"results":"147","hashOfConfig":"104"},{"size":3297,"mtime":1617289183777,"results":"148","hashOfConfig":"104"},{"size":2994,"mtime":1619625712283,"results":"149","hashOfConfig":"104"},{"size":4949,"mtime":1619625712283,"results":"150","hashOfConfig":"104"},{"size":2828,"mtime":1617289183777,"results":"151","hashOfConfig":"104"},{"size":10586,"mtime":1619625712283,"results":"152","hashOfConfig":"104"},{"size":3117,"mtime":1617289183777,"results":"153","hashOfConfig":"104"},{"size":7765,"mtime":1619625712282,"results":"154","hashOfConfig":"104"},{"size":84,"mtime":1617289183777,"results":"155","hashOfConfig":"104"},{"size":362,"mtime":1617289183767,"results":"156","hashOfConfig":"104"},{"size":1282,"mtime":1617289183770,"results":"157","hashOfConfig":"104"},{"size":53600,"mtime":1619625712278,"results":"158","hashOfConfig":"104"},{"size":10975,"mtime":1619637131952,"results":"159","hashOfConfig":"104"},{"size":776,"mtime":1619625712270,"results":"160","hashOfConfig":"104"},{"size":112,"mtime":1617289183766,"results":"161","hashOfConfig":"104"},{"size":487,"mtime":1617289183765,"results":"162","hashOfConfig":"104"},{"size":2186,"mtime":1617831584506,"results":"163","hashOfConfig":"104"},{"size":3200,"mtime":1619625712284,"results":"164","hashOfConfig":"104"},{"size":2825,"mtime":1619625712269,"results":"165","hashOfConfig":"104"},{"size":298,"mtime":1617289183766,"results":"166","hashOfConfig":"104"},{"size":5209,"mtime":1620205024675,"results":"167","hashOfConfig":"104"},{"size":2316,"mtime":1619625712270,"results":"168","hashOfConfig":"104"},{"size":2664,"mtime":1617289183765,"results":"169","hashOfConfig":"104"},{"size":114,"mtime":1617289183766,"results":"170","hashOfConfig":"104"},{"size":2170,"mtime":1620205421905,"results":"171","hashOfConfig":"104"},{"size":1124,"mtime":1617289183765,"results":"172","hashOfConfig":"104"},{"size":4814,"mtime":1617289183770,"results":"173","hashOfConfig":"104"},{"size":24916,"mtime":1619636846092,"results":"174","hashOfConfig":"104"},{"size":3614,"mtime":1617289183776,"results":"175","hashOfConfig":"104"},{"size":3615,"mtime":1619625712282,"results":"176","hashOfConfig":"104"},{"size":26613,"mtime":1619636900235,"results":"177","hashOfConfig":"104"},{"size":4720,"mtime":1617289183776,"results":"178","hashOfConfig":"104"},{"size":5025,"mtime":1619625712281,"results":"179","hashOfConfig":"104"},{"size":2099,"mtime":1619625712267,"results":"180","hashOfConfig":"104"},{"size":2202,"mtime":1619625712267,"results":"181","hashOfConfig":"104"},{"size":3653,"mtime":1619625712271,"results":"182","hashOfConfig":"104"},{"size":16650,"mtime":1617289183765,"results":"183","hashOfConfig":"104"},{"size":11370,"mtime":1617289183770,"results":"184","hashOfConfig":"104"},{"size":6508,"mtime":1620205174236,"results":"185","hashOfConfig":"104"},{"size":34022,"mtime":1619637020935,"results":"186","hashOfConfig":"104"},{"size":15746,"mtime":1619625712275,"results":"187","hashOfConfig":"104"},{"size":4724,"mtime":1617289183765,"results":"188","hashOfConfig":"104"},{"size":1147,"mtime":1619625712285,"results":"189","hashOfConfig":"104"},{"size":1414,"mtime":1619625712287,"results":"190","hashOfConfig":"104"},{"size":1976,"mtime":1619625712285,"results":"191","hashOfConfig":"104"},{"size":1706,"mtime":1619625712287,"results":"192","hashOfConfig":"104"},{"size":9490,"mtime":1619625712268,"results":"193","hashOfConfig":"104"},{"size":5392,"mtime":1619636801759,"results":"194","hashOfConfig":"104"},{"size":2333,"mtime":1617289183768,"results":"195","hashOfConfig":"104"},{"size":36,"mtime":1617289183767,"results":"196","hashOfConfig":"104"},{"size":5653,"mtime":1617289183768,"results":"197","hashOfConfig":"104"},{"size":1421,"mtime":1617289183767,"results":"198","hashOfConfig":"104"},{"size":2852,"mtime":1619625712266,"results":"199","hashOfConfig":"104"},{"size":2884,"mtime":1619625712266,"results":"200","hashOfConfig":"104"},{"size":6365,"mtime":1619693136385,"results":"201","hashOfConfig":"104"},{"size":7691,"mtime":1619625712273,"results":"202","hashOfConfig":"104"},{"size":9908,"mtime":1619625712279,"results":"203","hashOfConfig":"104"},{"size":20876,"mtime":1619637036869,"results":"204","hashOfConfig":"104"},{"size":5697,"mtime":1619625712279,"results":"205","hashOfConfig":"104"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},"1k71w5v",{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"208"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"280","messages":"281","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"208"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"208"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410","usedDeprecatedRules":"208"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"413","usedDeprecatedRules":"208"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"416","usedDeprecatedRules":"208"},"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/index.js",[],["417","418"],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/App.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/reportWebVitals.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/utils/helper.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/utils/PrivateRoute.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/store/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/btc.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/user.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/payment.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/bank.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/giftCard.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/constants/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/assets/png/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/assets/svg/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Loading/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/BtcTransactionService.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/Referral.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/GeneralService.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/PaymentService.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/BankService.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/GiftCardService.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/on-boarding/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/sell-giftcard/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/sign-in/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/sign-up/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/buy-giftcard/index.js",["419"],"import React, { useState, useEffect, useCallback } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Row, Col, Card, Drawer, Typography, Badge, Modal } from \"antd\";\nimport {ExclamationCircleOutlined} from \"@ant-design/icons\"\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport _ from \"lodash\";\n\nimport { DashboardLayout } from \"../../components/layout\";\nimport Button from \"../../components/button\";\nimport Select from \"../../components/select\";\nimport Input from \"../../components/input\";\nimport styles from \"../styles.module.scss\";\nimport {\n  EmptyEntryWithTitle,\n  SuccessfulModal,\n} from \"../transactions/components\";\nimport {\n  getBuyCardsByCountries,\n  getBuyCardsBySearch,\n  getBuyCardsCardDetail,\n  initialBuyGiftCard,\n} from \"../../redux/actions/buyGiftCard\";\nimport { Money } from \"../../utils/helper\";\nimport { getBTCWalletDetails } from \"../../redux/actions/btc\";\n\nfunction getImgUrl(data) {\n  return `https://www.bitrefill.com/content/cn/b_rgb%3A${\n    (data?.logoBackground && data?.logoBackground?.replace(\"#\", \"\")) || \"FFFFFF\"\n  }%2Cc_pad%2Ch_212%2Cw_350/v${data?.logoVersion}/${data?.logoImage}.jpg`;\n}\n\nconst { Title, Text } = Typography;\nconst { confirm } = Modal;\n\nconst BuyGiftCard = (props) => {\n  // eslint-disable-next-line\n  const delayedQuery = useCallback(\n    _.debounce(\n      (q) => props.getBuyCardsBySearch({ country: \"\", searchQuery: q }),\n      500\n    ),\n    []\n  );\n  let location = useLocation();\n  const { pathname } = location;\n  const history = useHistory();\n  const [active, setActive] = useState(null);\n  const [open, setOpen] = useState(false);\n  const [state, setState] = useState({\n    country: \"usa\",\n    searchQuery: \"\",\n  });\n  const [card, setCard] = useState({});\n  useEffect(() => {\n    const url = new URL(window.location.href);\n    const slug = url.searchParams.get(\"slug\");\n    if (slug) {\n      props.getSingleCard({ card: slug });\n      setActive(true);\n    }\n    // eslint-disable-next-line\n  }, []);\n  useEffect(() => {\n    props.getBuyCardsByCountries();\n    props.getBalance()\n    props.getBuyCardsBySearch({ searchQuery: \"\", country: \"usa\" });\n    // eslint-disable-next-line\n  }, []);\n  function createMarkup() {\n    return { __html: props?.buyGiftCardDetails?.descriptions?.en || \"\" };\n  }\n  function extraInfo() {\n    return { __html: props?.buyGiftCardDetails?.extraInfo || \"\" };\n  }\n\n  const showPromiseConfirm = () => {\n    \n\n    confirm({\n      title: `Purchase of Gift card`,\n      icon: <ExclamationCircleOutlined style={{ color: \"#19a9de\" }} />,\n      content: `Confirm the Purchase of ${Money(card?.cardValue, props?.buyGiftCardDetails?.currency)} ${props?.buyGiftCardDetails?.name} Gift card`,\n      onOk() {\n        return handleSubmit();\n      },\n      onCancel() {},\n    });\n  };\n\n  const handleSubmit = async () => {\n    const payload = {\n      cardSlug: props?.buyGiftCardDetails?.slug,\n      cardCurrency: props?.buyGiftCardDetails?.currency,\n      cardValue: card.cardValue,\n      email: card.email || props?.user?.email,\n      amount: card.amount === \"null\" ? null : card.amount,\n      quantity: parseInt(card.quantity ),\n      isCustom: false,\n      fiatWalletId: card.walletId,\n    };\n    \n    await props.buyGiftCard(payload);\n    setOpen(true);\n    setActive(false);\n    setCard({});\n  };\n  return (\n    <DashboardLayout>\n      {open && props.initBuyGiftCardTransaction && (\n        <SuccessfulModal\n          title={\n            `Your ${props?.buyGiftCardDetails?.name} (${props?.buyGiftCardDetails?.currency}) card purchase has been received. Please check your mail and the 'Transactions' tab for trade progress.`\n          }\n          onClick={() => history.push(\"/app\")}\n          walletBalance={props.balance}\n        />\n      )}\n      <div className={styles.gitcard}>\n        <div style={{ marginLeft: 20, marginRight: 20 }}>\n          <div>\n            <Row>\n              <span\n                className={styles.gitcard__top__title}\n                style={{ marginLeft: 0 }}\n              >\n                Buy Gift cards{\" \"}\n              </span>\n            </Row>\n            <Row\n              style={{\n                marginTop: 10,\n                display: \"flex\",\n                flexWrap: \"wrap\",\n                justifyContent: \"space-between\",\n                alignItems: \"flex-end\",\n              }}\n            >\n              <Col\n                xs={24}\n                sm={24}\n                md={6}\n                lg={4}\n                xl={4}\n                className=\"gutter-row ml-4\"\n                span={6}\n              >\n                <Input\n                  name=\"search\"\n                  value={state.searchQuery}\n                  onChange={(e) => {\n                    delayedQuery(e.target.value);\n                    setState((state) => ({\n                      country: \"\",\n                      searchQuery: e.target.value,\n                    }));\n                  }}\n                  label=\"Search card\"\n                  placeholder=\"Steam\"\n                />\n              </Col>\n              <Col\n                xs={24}\n                sm={24}\n                md={6}\n                lg={6}\n                xl={6}\n                className=\"gutter-row ml-4\"\n                span={6}\n              >\n                <Select\n                  label=\"Select Country\"\n                  value={state.country}\n                  onSelect={(value) => {\n                    setState((state) => ({\n                      ...state,\n                      country: value,\n                    }));\n                    props.getBuyCardsBySearch({ ...state, country: value });\n                  }}\n                  name=\"country\"\n                  options={\n                    props.buyCardCountries &&\n                    props.buyCardCountries.map((item) => ({\n                      value: item.alpha2,\n                      render: (\n                        <div\n                          className={styles.countryOption}\n                          style={{ display: \"flex\", alignItems: \"center\" }}\n                        >\n                          <span>\n                            {item.icon}&emsp;{item.name}\n                          </span>\n                        </div>\n                      ),\n                    }))\n                  }\n                />\n              </Col>\n            </Row>\n          </div>\n          <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n            {props.buyGiftCards && props.buyGiftCards.length < 1 ? (\n              <div style={{ width: \"100%\" }}>\n                <EmptyEntryWithTitle title=\"GiftCard\" action={false} />\n              </div>\n            ) : (\n              props.buyGiftCards &&\n              props.buyGiftCards.map((item, key) => {\n                return (\n                  <Col\n                    key={key}\n                    xs={24}\n                    sm={24}\n                    md={12}\n                    lg={8}\n                    xl={6}\n                    className=\"gutter-row\"\n                    style={{ marginBottom: 20 }}\n                  >\n                    <Badge.Ribbon\n                      color={item.outOfStock ? \"#f50\" : \"\"}\n                      text={item.outOfStock ? \"Out Of Stock\" : \"Available\"}\n                    >\n                      <Card\n                        hoverable\n                        bordered={false}\n                        onClick={\n                          item?.outOfStock\n                            ? () => {}\n                            : () => {\n                                props.getSingleCard({ card: item.slug });\n                                history.push(`${pathname}?slug=${item.slug}`);\n                                setActive(true);\n                              }\n                        }\n                        style={{ width: \"100%\", border: \"1px solid #00000026\" }}\n                        cover={\n                          <img\n                            alt={\"card\" + key}\n                            style={\n                              item.logoNoMargin\n                                ? {\n                                    width: \"100%\",\n                                    height: 200,\n                                    backgroundColor: item.logoBackground,\n                                  }\n                                : {\n                                    width: \"100%\",\n                                    height: 200,\n                                    padding: \"30px\",\n                                    backgroundColor: item.logoBackground,\n                                  }\n                            }\n                            src={getImgUrl(item)}\n                          />\n                        }\n                      >\n                        <p\n                          style={{\n                            margin: 0,\n                            textAlign: \"center\",\n                            fontSize: \"1.3em\",\n                          }}\n                        >\n                          <strong>\n                            <p>{item.name}</p>\n                          </strong>\n                        </p>\n                      </Card>\n                    </Badge.Ribbon>\n                  </Col>\n                );\n              })\n            )}\n          </Row>\n        </div>\n        {active && (\n          <Drawer\n            title={state?.title}\n            width={\"60vw\"}\n            placement=\"right\"\n            onClose={() => {\n              setActive(false);\n              history.push(`${pathname}`);\n            }}\n            visible={props.buyGiftCardDetails ? active : false}\n            style={{ width: \"100vw\" }}\n          >\n            <div\n              className={styles.sellPage}\n              style={{\n                alignItems: \"center\",\n                flexDirection: \"column\",\n                margin: \"auto\",\n                maxWidth: 900,\n              }}\n            >\n              <Title level={3}>\n                {props?.buyGiftCardDetails?.name} (\n                {props?.buyGiftCardDetails?.currency})\n              </Title>\n              <img\n                alt={\"card\"}\n                style={\n                  props?.buyGiftCardDetails?.logoNoMargin\n                    ? {\n                        width: 300,\n                        height: 200,\n                        marginTop: 20,\n                        marginBottom: 20,\n                        boxShadow: \"-3px 4px 20px #00000026\",\n                        backgroundColor:\n                          props?.buyGiftCardDetails?.logoBackground,\n                      }\n                    : {\n                        width: 300,\n                        height: 200,\n                        marginTop: 20,\n                        marginBottom: 20,\n                        padding: \"30px\",\n                        boxShadow: \"-3px 4px 20px #00000026\",\n                        backgroundColor:\n                          props?.buyGiftCardDetails?.logoBackground,\n                      }\n                }\n                src={getImgUrl(props?.buyGiftCardDetails)}\n              />\n              <div style={{ marginTop: 30, marginBottom: 30 }}>\n                <Text>\n                  <div dangerouslySetInnerHTML={createMarkup()} />\n                </Text>\n              </div>\n              <div>\n                {props?.balance?.fiatWallets && (<Select\n                  labelClass={styles.largeMarginLabel}\n                  label=\"Select Wallet\"\n                  value={card.referenceCurrency}\n                  onSelect={(value) => {\n                    setCard((card) => ({\n                      ...card,\n                      referenceCurrency: value.Currency.code,\n                      walletId:value.id\n                    }));\n                  }}\n                  name=\"wallet\"\n                  options={props.balance.fiatWallets.map((item)=>({\n                    render:`${item.Currency.code}`,\n                    value:item\n                  }))}\n                />)}\n                <Input\n                  className={`${styles.input}`}\n                  value={card.quantity}\n                  label=\"Quantity\"\n                  placeholder=\"minimum is 1\"\n                  labelClass={styles.largeMarginLabel}\n                  onChange={(e) => {\n                    // console.log('user ni', props.user)\n                    setCard((card) => ({\n                      ...card,\n                      quantity: e.target.value,\n                    }));\n                  }}\n                  type=\"number\"\n                />\n                <Input\n                  className={`${styles.input}`}\n                  defaultValue={props?.user?.email}\n                  value={card.email}\n                  label=\"Email\"\n                  placeholder=\"Enter the email to send gift card to\"\n                  labelClass={styles.largeMarginLabel}\n                  onChange={(e) => {\n                    setCard((card) => ({\n                      ...card,\n                      email: e.target.value,\n                    }));\n                  }}\n                  type=\"email\"\n                />\n                <Select\n                  labelClass={styles.largeMarginLabel}\n                  hintClass={styles.largeMarginHint}\n                  label=\"Select amount\"\n                  value={`${card.cardValue}.${card.amount}`}\n                  name=\"amount\"\n                  onSelect={(value) =>\n                    setCard((card) => ({\n                      ...card,\n                      cardValue: value?.split(\".\")[0],\n                      amount: value?.split(\".\")[1],\n                    }))\n                  }\n                  options={props?.buyGiftCardDetails?.packages.map((item) => ({\n                    render: `${props?.buyGiftCardDetails?.currency} ${\n                      item.value\n                    } - Price: ${Money(item.usdPrice, \"USD\")}`,\n                    value: `${item.value}.${item.amount}`,\n                  }))}\n                  hint={<p dangerouslySetInnerHTML={extraInfo()} />}\n                />\n                <Button\n                  className={`${styles.gitcard__form__body__input}`}\n                  text=\"Buy\"\n                  form=\"full\"\n                  disabled={\n                    card.quantity == 0 ||\n                    !card.quantity ||\n                    !card.amount ||\n                    !card.cardValue ||\n                    !card.referenceCurrency\n                  }\n                  onClick={() => showPromiseConfirm()}\n                />\n              </div>\n            </div>\n          </Drawer>\n        )}\n      </div>\n    </DashboardLayout>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  user: state.user.user,\n  balance: state.btc.balance,\n  buyCardCountries: state.buyGiftCard.buyCardCountries,\n  buyGiftCards: state.buyGiftCard.buyGiftCards,\n  buyGiftCardDetails: state.buyGiftCard.buyGiftCardDetails,\n  initBuyGiftCardTransaction: state.buyGiftCard.initBuyGiftCardTransaction,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getBuyCardsByCountries: () => {\n    dispatch(getBuyCardsByCountries());\n  },\n  getBuyCardsBySearch: (data) => {\n    dispatch(getBuyCardsBySearch(data));\n  },\n  getSingleCard: (data) => {\n    dispatch(getBuyCardsCardDetail(data));\n  },\n  buyGiftCard: (data) => {\n    dispatch(initialBuyGiftCard(data));\n  },\n  getBalance: () => {\n    dispatch(getBTCWalletDetails());\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BuyGiftCard);\n","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/coin/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/landing/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/about/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/Verification/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/rate/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/bills/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/transactions/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/airtime/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/home/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/btc/index.js",["420","421"],"import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\n// import { DashboardLayout } from \"../../components/layout\";\nimport {\n  ArrowLeftOutlined,\n  DownloadOutlined,\n  UploadOutlined,\n} from \"@ant-design/icons\";\nimport {\n  SellSection,\n  BuySection,\n  SendSection,\n  RecieveSection,\n} from \"./components\";\nimport styles from \"../styles.module.scss\";\nimport {\n  getBTCCurrentMarketTicker,\n  initialBTCBuyTransaction,\n  receiveBTCIntoWallet,\n  initialBTCSellTransaction,\n  initialBTCSellToExternalWalletTransaction,\n} from \"../../redux/actions/btc\";\nimport { getUserWallets } from \"../../redux/actions/Auths\";\nimport * as SVG from \"../../assets/svg\";\n\nconst BuyCoin = ({\n  active,\n  handleBack,\n  getBTCRates,\n  balance,\n  btcRates,\n  buyCoins,\n  buyBTC,\n  btcWalletAddress = \"\",\n  receiveBTC,\n  loading,\n  sellCoins,\n  sellBTC,\n  sellCoinsExternal,\n  sellBTCExternal,\n  fiatWallets,\n}) => {\n  const [state, setState] = useState({\n    btc: 0,\n    usd: 0,\n    ngn: 0,\n    ghs: 0,\n    walletBalance: 0,\n    creditCoinsWalletId:active.id\n  });\n  const [mode, setMode] = useState(\"buy\");\n  React.useEffect(() => {\n    const interval = setInterval(async () => {\n      getBTCRates({coin:active.Currency.code});\n    }, 60000);\n    return () => clearInterval(interval);\n  }, [getBTCRates]);\n  React.useEffect(() => {\n    receiveBTC();\n    getBTCRates({coin:active.Currency.code});\n  }, [receiveBTC, getBTCRates]);\n  return (\n    <>\n      <div className={styles.gitcard__form}>\n        <div\n          className={styles.gitcard__form__holder}\n          style={{ alignItems: \"flex-start\" }}\n        >\n          <div onClick={handleBack} className={styles.gitcard__form__link}>\n            <SVG.ArrowLeft /> {active.Currency.name}\n          </div>\n          <div\n            className={styles.gitcard__form__body__image}\n            style={{\n              border: \"1px solid #fff\",\n              // boxShadow: \"-3px 4px 20px #00000026\",\n              position: \"relative\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            {active.icon}\n          </div>\n        </div>\n        {/* <div onClick={handleBack} className={styles.gitcard__form__link}>\n     <SVG.ArrowLeft /> Bitcoin\n     </div> */}\n        {/* <span className={styles.gitcard__top__title}></span> */}\n        <br />\n        <br />\n        <div className={styles.sellPage}>\n          <div className={styles.sellPage__left}>\n            <div className={styles.sellPage__select}>\n              <div\n                onClick={() => {\n                  setMode(\"buy\");\n                  setState({\n                    ...state,\n                    btc: 0,\n                    usd: 0,\n                    ngn: 0,\n                    ghs: 0,\n                    walletBalance: 0,\n                  });\n                }}\n                className={`${styles.actionBtn} ${styles.btcButton} ${\n                  mode === \"buy\" && styles.active\n                }`}\n              >\n                <div className={`${styles.sell}`}>\n                  <ArrowLeftOutlined style={{ color: \"#fff\" }} />\n                </div>\n                <span>Buy</span>\n              </div>\n              <div\n                onClick={() => {\n                  setMode(\"sell\");\n                  setState({\n                    ...state,\n                    btc: 0,\n                    usd: 0,\n                    ngn: 0,\n                    ghs: 0,\n                    walletBalance: 0,\n                  });\n                }}\n                className={`${styles.actionBtn} ${styles.btcButton} ${\n                  mode === \"sell\" && styles.active\n                }`}\n              >\n                <div className={`${styles.buy}`}>\n                  <ArrowLeftOutlined style={{ color: \"#fff\" }} rotate={180} />\n                </div>\n                <span>Sell</span>\n              </div>\n\n              <div\n                onClick={() => {\n                  setMode(\"recieve\");\n                  setState({\n                    ...state,\n                    btc: 0,\n                    usd: 0,\n                    ngn: 0,\n                    ghs: 0,\n                    walletBalance: 0,\n                  });\n                }}\n                className={`${styles.actionBtn} ${styles.btcButton} ${\n                  mode === \"recieve\" && styles.active\n                }`}\n              >\n                <div className={`${styles.sell}`}>\n                  <DownloadOutlined style={{ color: \"#fff\" }} />\n                </div>\n                <span>Recieve</span>\n              </div>\n              <div\n                onClick={() => {\n                  setMode(\"send\");\n                  setState({\n                    ...state,\n                    btc: 0,\n                    usd: 0,\n                    ngn: 0,\n                    ghs: 0,\n                    walletBalance: 0,\n                  });\n                }}\n                className={`${styles.actionBtn} ${styles.btcButton} ${\n                  mode === \"send\" && styles.active\n                }`}\n              >\n                <div className={`${styles.buy}`}>\n                  <UploadOutlined style={{ color: \"#fff\" }} />\n                </div>\n                <span>Send</span>\n              </div>\n            </div>\n\n            <div className={styles.sellPage__top}>\n              {mode === \"buy\" && (\n                <BuySection\n                  balance={balance}\n                  rates={btcRates}\n                  fiatWallets={fiatWallets}\n                  {...{ state, setState, buyCoins, buyBTC, loading, active }}\n                />\n              )}\n\n              {mode === \"sell\" && (\n                <SellSection\n                  balance={balance}\n                  rates={btcRates}\n                  fiatWallets={fiatWallets}\n                  {...{ state, setState, sellCoins, sellBTC, loading, active }}\n                />\n              )}\n              {mode === \"send\" && (\n                <SendSection\n                  balance={balance}\n                  rates={btcRates}\n                  {...{\n                    state,\n                    setState,\n                    sellCoinsExternal,\n                    sellBTCExternal,\n                    loading,\n                    active\n                  }}\n                />\n              )}\n\n              {mode === \"recieve\" && (\n                <RecieveSection\n                  btcWalletAddress={btcWalletAddress}\n                  btcRates={btcRates}\n                  active={active}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  balance: state.btc.balance,\n  btcTrans: state.btc.latestBTCTransaction,\n  btcRates: state.btc.btcTicker,\n  buyBTC: state.btc.buyBTC,\n  btcWalletAddress: state.btc.btcWalletAddress,\n  loading: state.btc.loading,\n  sellBTC: state.btc.sellBTC,\n  sellBTCExternal: state.btc.sellBTCExternal,\n  btcTicker: state.btc.btcTicker\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  receiveBTC: () => {\n    dispatch(receiveBTCIntoWallet());\n  },\n  getBTCRates: (data) => {\n    dispatch(getBTCCurrentMarketTicker(data));\n  },\n  buyCoins: (data) => {\n    dispatch(initialBTCBuyTransaction(data));\n  },\n  sellCoins: (data) => {\n    dispatch(initialBTCSellTransaction(data));\n  },\n  sellCoinsExternal: (data) => {\n    dispatch(initialBTCSellToExternalWalletTransaction(data));\n  },\n  getBalance: () => {\n    dispatch(getUserWallets());\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BuyCoin);\n","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/about-rates/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/profile/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/settings/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/FetchInterceptor.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/buyGiftCard.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/pairTwoPair.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/billPayment.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/payment.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/giftcard.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/withdrawal.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/btc.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/bank.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/reducer/auth.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/history.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/configs/AppConfig.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/sell-coin/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/transactions/components.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/Auths.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/configs/EnvironmentConfig.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/layout/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/button/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/select/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/AuthService.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/input/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/layout/landing/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/layout/dashboard/index.js",["422"],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/layout/dashboard/data.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/footer/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/header/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/header/landingHeader.js",["423"],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/header/authHeader.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/sell-coin/components.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/btc/components.js",["424","425","426","427"],"import React, { useEffect, useState } from \"react\";\nimport { notification, Modal } from \"antd\";\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\nimport Button from \"../../components/button\";\nimport Input from \"../../components/input\";\nimport Select from \"../../components/select\";\nimport styles from \"../styles.module.scss\";\nimport Clipboard from \"react-clipboard.js\";\nimport { Copy } from \"../../assets/svg\";\nimport { QRCode, Money } from \"../../utils/helper\";\nimport { BitcoinInput } from \"../../assets/svg\";\nimport { SuccessfulModal } from \"../transactions/components\";\nimport { history } from \"../../redux/store\";\nimport AppFetch from \"../../redux/services/FetchInterceptor\";\n// import { isNum } from \"react-toastify/dist/utils\";\n\nconst { confirm } = Modal;\n\nexport const BuySection = ({\n  balance,\n  rates,\n  state,\n  setState,\n  buyCoins,\n  buyBTC,\n  loading,\n  active,\n}) => {\n  useEffect(() => {\n    // balance &&\n    //   balance.fiatWallets &&\n    // setCurrent_balance(balance[state.wallet].balance);\n  }, [balance, state.wallet]);\n\n  useEffect(() => {\n    rates && rates.ticker && setBtc_usd_rate(rates.ticker.buy);\n    // rates && rates.tickers && setBtc_ngn_rate(rates.tickers.BTCNGN.buy);\n    // rates && rates.tickers && setBtc_ghs_rate(rates.tickers.BTCGHS.buy);\n  }, [rates]);\n  const handleChange = ({ target: { name, value } }) => {\n    // let ticker = rates && rates.tickers;\n    let btc, ngn, usd, ghs;\n    if (name === \"btc\") {\n      btc = value;\n      ngn = wallet_btc_rate * value;\n      usd = buy_btc_usd_rate * value;\n      // usd = 26000 * value;\n      // ghs = buy_btc_ghs_rate * value;\n      setState((state) => ({ ...state, btc, usd, ngn }));\n    } else if (name === \"ngn\") {\n      ngn = value;\n      btc = value / wallet_btc_rate;\n      usd = buy_btc_usd_rate * value;\n      // usd = 26000 * btc;\n      // ghs = buy_btc_ghs_rate * btc;\n      setState((state) => ({ ...state, btc, usd, ngn }));\n    } else if (name === \"usd\") {\n      usd = value;\n      btc = value / buy_btc_usd_rate;\n      // btc = value / 26000;\n      ngn = wallet_btc_rate * btc;\n      // ghs = buy_btc_ghs_rate * btc;\n      setState((state) => ({ ...state, btc, usd, ngn, ghs }));\n    }\n    if (!value) {\n      setState((state) => ({ ...state, btc: 0, usd: 0, ngn: 0, ghs: 0 }));\n    }\n  };\n  // const [current_balance, setCurrent_balance] = useState(0);\n  const [buy_btc_usd_rate, setBtc_usd_rate] = useState(0);\n  const [buy_btc_ghs_rate, setBtc_ghs_rate] = useState(0);\n  const [buy_btc_ngn_rate, setBtc_ngn_rate] = useState(0);\n  const [wallet_btc_rate, setWallet_btc_rate] = useState(0);\n  const [open, setOpen] = useState(false);\n  const showPromiseConfirm = () => {\n    confirm({\n      title: `Buy ${state.btc} ${active.Currency.code}`,\n      icon: <ExclamationCircleOutlined style={{ color: \"#19a9de\" }} />,\n      content: `Confirm the purchase of ${state.btc} ${active.Currency.code}`,\n      onOk() {\n        setOpen(true);\n        return buyCoins({\n          amount: state.btc,\n          debitFiatWalletId: state.walletInfo.id,\n          creditCoinsWalletId: state.creditCoinsWalletId,\n        });\n      },\n      onCancel() {},\n    });\n  };\n  const currencyTicker = async (data) => {\n    AppFetch({\n      url: `/coins/tickers/${active.Currency.code.toLowerCase()}${data}`,\n      method: \"get\",\n      headers: {\n        \"public-request\": \"true\",\n      },\n    })\n      .then((response) => {\n        \n        setWallet_btc_rate(response.data.ticker.buy);\n      })\n      .catch((err) => {\n        notification.error({\n          message: \"Could not fetch tickers\",\n        });\n      });\n  };\n\n  return (\n    <div className={styles.transactionCard}>\n      {open && buyBTC && (\n        <SuccessfulModal onClick={() => history.push(\"/app\")} />\n      )}\n      <h2 className={styles.detailsCard__title}>Details</h2>\n      <div className={styles.detailsCard__list}>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>You are Buying</span>\n          <span className={styles.sub}>\n            {active.Currency.code} {state.btc}\n          </span>\n        </div>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>You will be debited</span>\n          <span className={styles.sub}>\n            {Money(state[state.wallet === \"NGN\" ? \"ngn\" : \"ghs\"], state.wallet)}\n          </span>\n        </div>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>Fees</span>\n          <span className={`${styles.sub} ${styles.light}`}>0</span>\n        </div>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>Should arrive</span>\n          <span className={`${styles.sub} ${styles.light}`}>In 5 Seconds</span>\n        </div>\n      </div>\n      <hr />\n      <br />\n      <div className={styles.transactionCard__holder__sub}>\n        <Input\n          labelClass={styles.largeMarginLabel}\n          label=\"Buy to\"\n          Dummy={{ text: `${active.Currency.code} wallet` }}\n        />\n        \n        <Select\n          labelClass={styles.largeMarginLabel}\n          hintClass={styles.largeMarginHint}\n          label=\"Pay from\"\n          placeholder=\"Choose wallet\"\n          value={state.wallet}\n          name=\"wallet\"\n          onSelect={(value) => {\n            currencyTicker(value.Currency.code.toLowerCase());\n            setState((state) => ({\n              ...state,\n              wallet: value.Currency.code,\n              walletBalance: value.balance,\n              debitFiatWalletId: value.id,\n              walletInfo: value,\n            }));\n          }}\n          // options={[\n          //   {\n          //     render: \"NGN wallet\",\n          //     value: \"NGN\",\n          //     disabled: rates?.availability?.buy?.value,\n          //   },\n          //   {\n          //     render: \"GHS wallet\",\n          //     value: \"GHS\",\n          //     disabled: rates?.availability?.buy?.value,\n          //   },\n          // ]}\n          options={balance.fiatWallets.map((item) => ({\n            render: `${item.Currency.code} wallet`,\n            value: item,\n          }))}\n          hint={`Current Balance ${Money(state.walletBalance, state.wallet)} `}\n        />\n\n        <div className={styles.transactionCard__holder}>\n          <Input\n            labelClass={styles.largeMarginLabel}\n            label={`Amount (${active.Currency.code})`}\n            type=\"number\"\n            value={isFinite(state.btc) ? state.btc : 0}\n            name=\"btc\"\n            onChange={handleChange}\n            hint={`Current rate ${Money(buy_btc_usd_rate, \"USD\")} / ${\n              active.Currency.code\n            }`}\n            placeholder=\"e.g 0.000011\"\n          />\n          <Input\n            labelClass={styles.largeMarginLabel}\n            label=\"Amount in USD\"\n            value={state.usd}\n            type=\"number\"\n            name=\"usd\"\n            onChange={handleChange}\n          />\n        </div>\n\n        <div className={styles.transactionCard__holder}>\n          {state?.wallet && (\n            <Input\n              labelClass={styles.largeMarginLabel}\n              label={`Amount in ${state.wallet}`}\n              type=\"number\"\n              value={isNaN(state.ngn) ? \"\" : state.ngn}\n              hint={`Current rate ${Money(wallet_btc_rate, state.wallet)} / ${\n                active.Currency.code\n              }`}\n              name=\"ngn\"\n              onChange={handleChange}\n            />\n          )}\n          {/* <Input\n            labelClass={styles.largeMarginLabel}\n            label=\"Amount in GHC\"\n            type=\"number\"\n            value={isNaN(state.ghs) ? 0 : state.ghs}\n            hint={`Current rate ${Money(buy_btc_ghs_rate, \"USD\")} / ${active.Currency.code}`}\n            name=\"ghs\"\n            onChange={handleChange}\n          /> */}\n        </div>\n        <Button\n          disabled={\n            parseInt(state.ngn, 10) < 499\n              ? true\n              : false || loading || !state.wallet\n          }\n          onClick={() => showPromiseConfirm()}\n          className={styles.sellPage__btn}\n          form=\"full\"\n        >\n          BUY\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport const SellSection = ({\n  balance,\n  rates,\n  state,\n  setState,\n  sellCoins,\n  sellBTC,\n  loading,\n  active,\n}) => {\n  // useEffect(() => {\n  //   // balance && balance.BTC && setBtc_current_balance(balance.BTC.balance);\n  //   balance &&\n  //     balance[state.wallet] &&\n  //     setWallet_current_balance(balance[state.wallet].balance);\n  // }, [balance, state.wallet]);\n  useEffect(() => {\n    \n    rates && rates.ticker && setSell_btc_usd_rate(rates.ticker.sell);\n    rates && rates.tickers && setSell_btc_ngn_rate(rates.tickers.BTCNGN.sell);\n    rates && rates.tickers && setSell_btc_ghs_rate(rates.tickers.BTCGHS.sell);\n  }, [rates]);\n  const handleChange = ({ target: { name, value } }) => {\n    // let ticker = rates && rates.tickers;\n    let btc, ngn, usd, ghs;\n    if (name === \"btc\") {\n      btc = value;\n      ngn = sell_btc_ngn_rate * value;\n      usd = sell_btc_usd_rate * value;\n      // usd = 26000 * value;\n      ghs = sell_btc_ghs_rate * value;\n      setState((state) => ({ ...state, btc, usd, ngn, ghs }));\n    } else if (name === \"ngn\") {\n      ngn = value;\n      btc = value / sell_btc_ngn_rate;\n      usd = sell_btc_usd_rate * value;\n      // usd = 26000 * btc;\n      ghs = sell_btc_ghs_rate * btc;\n      setState((state) => ({ ...state, btc, usd, ngn, ghs }));\n    } else if (name === \"usd\") {\n      usd = value;\n      btc = value / sell_btc_usd_rate;\n      // btc = value / 26000;\n      ngn = sell_btc_ngn_rate * btc;\n      ghs = sell_btc_ghs_rate * btc;\n      setState((state) => ({ ...state, btc, usd, ngn, ghs }));\n    } else if (name === \"ghs\") {\n      ghs = value;\n      btc = value / sell_btc_ghs_rate;\n      usd = sell_btc_usd_rate * value;\n      // usd = 26000 * btc;\n      ngn = sell_btc_ngn_rate * btc;\n      setState((state) => ({ ...state, btc, usd, ngn, ghs }));\n    }\n    if (!value) {\n      setState((state) => ({ ...state, btc: 0, usd: 0, ngn: 0, ghs: 0 }));\n    }\n  };\n  // const [btc_current_balance, setBtc_current_balance] = useState(0);\n  // const [wallet_current_balance, setWallet_current_balance] = useState(0);\n  const [sell_btc_usd_rate, setSell_btc_usd_rate] = useState(0);\n  const [sell_btc_ghs_rate, setSell_btc_ghs_rate] = useState(0);\n  const [sell_btc_ngn_rate, setSell_btc_ngn_rate] = useState(0);\n  const [wallet_btc_rate, setWallet_btc_rate] = useState(0);\n  const [open, setOpen] = useState(false);\n  const showPromiseConfirm = () => {\n    confirm({\n      title: `Sell ${isFinite(state.btc) ? state.btc : 0} ${\n        active.Currency.code\n      }`,\n      icon: <ExclamationCircleOutlined style={{ color: \"#19a9de\" }} />,\n      content: `Confirm the sales of ${state.btc} ${active.Currency.code}`,\n      onOk() {\n        setOpen(true);\n        return sellCoins({\n          amount: isFinite(state.btc) ? state.btc : 0,\n          cryptoWalletId: state.wallet,\n          fiatWalletId: state.fiatWalletId,\n        });\n      },\n      onCancel() {},\n    });\n  };\n  const currencyTicker = async (data) => {\n    AppFetch({\n      url: `/coins/tickers/${active.Currency.code.toLowerCase()}${data}`,\n      method: \"get\",\n      headers: {\n        \"public-request\": \"true\",\n      },\n    })\n      .then((response) => {\n        \n        setWallet_btc_rate(response.data.ticker.sell);\n      })\n      .catch((err) => {\n        notification.error({\n          message: \"Could not fetch tickers\",\n        });\n      });\n  };\n  return (\n    <div className={styles.transactionCard}>\n      {open && sellBTC && (\n        <SuccessfulModal onClick={() => history.push(\"/app\")} />\n      )}\n      <h2 className={styles.detailsCard__title}>Details</h2>\n      <div className={styles.detailsCard__list}>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>You are selling</span>\n          <span className={styles.sub}>\n            {Money(\n              isFinite(state.btc) ? state.btc : 0,\n              `${active.Currency.code}`\n            )}\n          </span>\n        </div>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>You will receive</span>\n          <span className={styles.sub}>\n            \n            {Money(\n              isNaN(state.wallet === \"NGN\" ? state.ngn : state.ghs)\n                ? 0\n                : state[state.wallet === \"NGN\" ? \"ngn\" : \"ghs\"],\n              state.wallet\n            )}\n          </span>\n        </div>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>Fees</span>\n          <span className={`${styles.sub} ${styles.light}`}>₦0</span>\n        </div>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>Should arrive</span>\n          <span className={`${styles.sub} ${styles.light}`}>In 5 Seconds</span>\n        </div>\n      </div>\n      <hr />\n      <br />\n      <div className={styles.transactionCard__holder__sub}>\n        <Input\n          labelClass={styles.largeMarginLabel}\n          hintClass={styles.largeMarginHint}\n          label=\"Sell from\"\n          Dummy={{ text: `${active.Currency.code} wallet` }}\n          hint={`Current Balance ${active.balance} `}\n        />\n        <Select\n          labelClass={styles.largeMarginLabel}\n          label=\"Recieve payment to\"\n          placeholder=\"Choose wallet\"\n          value={state.wallet}\n          name=\"wallet\"\n          onSelect={(value) =>{\n            currencyTicker(value.Currency.code.toLowerCase());\n            // setState((state) => ({ ...state, wallet: value }))\n            setState((state) => ({\n              ...state,\n              wallet: value.Currency.code,\n              walletBalance: value.balance,\n              fiatWalletId: value.id,\n              walletInfo: value,\n            }))\n          }}\n          // options={[\n          //   {\n          //     render: \"NGN wallet\",\n          //     value: \"NGN\",\n          //     disabled: rates?.availability?.sell?.value,\n          //   },\n          //   {\n          //     render: \"GHS wallet\",\n          //     value: \"GHS\",\n          //     disabled: rates?.availability?.sell?.value,\n          //   },\n          // ]}\n          // hint={`Current Balance ${Money(\n          //   wallet_current_balance,\n          //   state.wallet\n          // )} `}\n          options={balance.fiatWallets.map((item) => ({\n            render: `${item.Currency.code} wallet`,\n            value: item,\n          }))}\n          hint={`Current Balance ${Money(state.walletBalance, state.wallet)} `}\n        />\n\n        <div className={styles.transactionCard__holder}>\n          <Input\n            labelClass={styles.largeMarginLabel}\n            label={`Amount (${active.Currency.code})`}\n            value={isFinite(state.btc) ? state.btc : 0}\n            name=\"btc\"\n            onChange={handleChange}\n            hint={`Current rate ${Money(sell_btc_usd_rate, \"USD\")} / ${\n              active.Currency.code\n            }`}\n            hintClass={styles.largeMarginHint}\n            placeholder=\"e.g 0.000011\"\n          />\n          <Input\n            labelClass={styles.largeMarginLabel}\n            label=\"Amount in USD\"\n            value={isNaN(state.usd) ? 0 : state.usd.toLocaleString()}\n            name=\"usd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className={styles.transactionCard__holder}>\n          {state.wallet && (\n            <Input\n              labelClass={styles.largeMarginLabel}\n              label=\"Amount in NGN\"\n              value={isNaN(state.ngn) ? 0 : state.ngn.toLocaleString()}\n              hint={`Current rate ${Money(wallet_btc_rate, state.wallet)} / ${\n                active.Currency.code\n              }`}\n              name=\"ngn\"\n              onChange={handleChange}\n            />\n          )}\n          {/* <Input\n            labelClass={styles.largeMarginLabel}\n            label=\"Amount in GHC\"\n            value={isNaN(state.ghs) ? 0 : state.ghs.toLocaleString()}\n            hint={`Current rate ${Money(sell_btc_ghs_rate, \"USD\")} / ${\n              active.Currency.code\n            }`}\n            name=\"ghs\"\n            onChange={handleChange}\n          /> */}\n        </div>\n        <Button\n          disabled={\n            parseInt(state.ngn, 10) < 499\n              ? true\n              : false || loading || !state.wallet\n          }\n          onClick={() => showPromiseConfirm()}\n          className={styles.sellPage__btn}\n          form=\"full\"\n        >\n          SELL\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport const SendSection = ({\n  balance,\n  rates,\n  state,\n  setState,\n  sellCoinsExternal,\n  sellBTCExternal,\n  loading,\n  active,\n}) => {\n  // const [current_balance, setCurrent_balance] = useState(0);\n  const [sell_btc_usd_rate, setSell_btc_usd_rate] = useState(0);\n  const [sell_btc_ghs_rate, setSell_btc_ghs_rate] = useState(0);\n  const [sell_btc_ngn_rate, setSell_btc_ngn_rate] = useState(0);\n\n  // useEffect(() => {\n  //   balance && balance.BTC && setCurrent_balance(balance.BTC.balance);\n  // }, [balance]);\n\n  useEffect(() => {\n    rates && rates.ticker && setSell_btc_usd_rate(rates.ticker.buy);\n    rates && rates.tickers && setSell_btc_ngn_rate(rates.tickers.BTCNGN.sell);\n    rates && rates.tickers && setSell_btc_ghs_rate(rates.tickers.BTCGHS.sell);\n  }, [rates]);\n\n  const handleChange = ({ target: { name, value } }) => {\n    // let ticker = rates && rates.tickers;\n\n    let btc, ngn, usd, ghs;\n    if (name === \"btc\") {\n      btc = value;\n      ngn = sell_btc_ngn_rate * value;\n      usd = sell_btc_usd_rate * value;\n      // usd = 26000 * value;\n      ghs = sell_btc_ghs_rate * value;\n      setState((state) => ({ ...state, btc, usd, ngn, ghs }));\n    } else if (name === \"ngn\") {\n      ngn = value;\n      btc = value / sell_btc_ngn_rate;\n      usd = sell_btc_usd_rate * value;\n      // usd = 26000 * btc;\n      ghs = value / sell_btc_ghs_rate;\n      setState((state) => ({ ...state, btc, usd, ngn, ghs }));\n    } else if (name === \"usd\") {\n      usd = value;\n      btc = value / sell_btc_usd_rate;\n      // btc = value / 26000;\n      ngn = sell_btc_ngn_rate * btc;\n      ghs = sell_btc_ghs_rate * btc;\n      setState((state) => ({ ...state, btc, usd, ngn, ghs }));\n    } else if (name === \"ghs\") {\n      ghs = value;\n      btc = value / sell_btc_ghs_rate;\n      usd = sell_btc_usd_rate * value;\n      // usd = 26000 * btc;\n      ngn = sell_btc_ngn_rate * btc;\n      setState((state) => ({ ...state, btc, usd, ngn, ghs }));\n    }\n    if (!value) {\n      setState((state) => ({ ...state, btc: 0, usd: 0, ngn: 0, ghs: 0 }));\n    }\n  };\n\n  const handleAddress = ({ target: { name, value } }) => {\n    setState((state) => ({ ...state, [name]: value }));\n  };\n  const showPromiseConfirm = () => {\n    confirm({\n      title: `Transferring ${state.btc} BTC`,\n      icon: <ExclamationCircleOutlined style={{ color: \"#19a9de\" }} />,\n      content: `Confirm the transfer of ${state.btc} BTC to ${state.btcAddress}`,\n      onOk() {\n        return sellCoinsExternal({\n          amount: state.btc,\n          address: state.btcAddress,\n          cryptoWalletId: active.id,\n        });\n      },\n      onCancel() {},\n    });\n  };\n\n  return (\n    <div className={styles.transactionCard}>\n      {sellBTCExternal && (\n        <SuccessfulModal onClick={() => history.push(\"/app\")} />\n      )}\n      <h2 className={styles.detailsCard__title}>Details</h2>\n      <div className={styles.detailsCard__list}>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>You are sending</span>\n          <span className={styles.sub}>\n            {state.btc} {active.Currency.code}\n          </span>\n        </div>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>Amount in USD</span>\n          <span className={styles.sub}>{Money(state.usd, \"USD\")}</span>\n        </div>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>Fees</span>\n          <span className={`${styles.sub} ${styles.light}`}>US$ 0</span>\n        </div>\n        <div className={styles.detailsCard__list__item}>\n          <span className={styles.main}>Should arrive</span>\n          <span className={`${styles.sub} ${styles.light}`}>In 5 Seconds</span>\n        </div>\n      </div>\n      <hr />\n      <br />\n      <div className={styles.transactionCard__holder}>\n        <Input\n          labelClass={styles.largeMarginLabel}\n          hintClass={styles.largeMarginHint}\n          label=\"Send bitcoin from\"\n          Dummy={{ Icon: BitcoinInput, text: `${active.Currency.code} wallet` }}\n          hint={`Current Balance ${active.balance} `}\n        />\n        <Input\n          labelClass={styles.largeMarginLabel}\n          label=\"To\"\n          value={state.btcAddress}\n          name=\"btcAddress\"\n          onChange={handleAddress}\n          hint={\"Enter the wallet address to send to.\"}\n          hintClass={styles.largeMarginHint}\n          placeholder=\"Enter the wallet address\"\n        />\n      </div>\n      <div className={styles.transactionCard__holder}>\n        <Input\n          labelClass={styles.largeMarginLabel}\n          label={`Amount in ${active.Currency.code}`}\n          type=\"number\"\n          value={isNaN(state.btc) ? 0 : state.btc}\n          name=\"btc\"\n          onChange={handleChange}\n          hint={`Current rate ${Money(sell_btc_usd_rate, \"USD\")} / ${\n            active.Currency.code\n          }`}\n          hintClass={styles.largeMarginHint}\n          placeholder=\"\"\n        />\n        <Input\n          labelClass={styles.largeMarginLabel}\n          label=\"Amount in USD\"\n          type=\"number\"\n          value={isNaN(state.usd) ? 0 : state.usd.toLocaleString()}\n          name=\"usd\"\n          onChange={handleChange}\n          placeholder=\"e.g 500\"\n        />\n      </div>\n      {/* <div className={styles.transactionCard__holder}>\n        <Input\n          labelClass={styles.largeMarginLabel}\n          label=\"Amount in NGN\"\n          type=\"number\"\n          value={isNaN(state.ngn) ? 0 : state.ngn.toLocaleString()}\n          hint={`Current rate ${Money(sell_btc_ngn_rate, \"USD\")} / ${\n            active.Currency.code\n          }`}\n          name=\"ngn\"\n          onChange={handleChange}\n        />\n        <Input\n          labelClass={styles.largeMarginLabel}\n          label=\"Amount in GHC\"\n          type=\"number\"\n          value={isNaN(state.ghs) ? 0 : state.ghs.toLocaleString()}\n          hint={`Current rate ${Money(sell_btc_ghs_rate, \"USD\")} / ${\n            active.Currency.code\n          }`}\n          name=\"ghs\"\n          onChange={handleChange}\n        />\n      </div> */}\n      <Button\n        text=\"Send\"\n        disabled={\n          !state.btcAddress || parseInt(state.ngn, 10) < 499\n            ? true\n            : false || loading || !state.wallet\n        }\n        onClick={() => showPromiseConfirm()}\n        form=\"full\"\n      />\n    </div>\n  );\n};\n\nexport const RecieveSection = ({\n  btcRates,\n  active,\n  btcWalletAddress = \"\",\n  error = false,\n  title = \"Scan to copy BTC wallet address\",\n}) => {\n  return (\n    <div className={styles.transactionCard}>\n      <div className={styles.transactionCard__holder__sub}>\n        <div className={styles.scanSell} style={{ textAlign: \"center\" }}>\n          <h3 style={{ textTransform: \"capitalize\" }} className={styles.title}>\n            {`Scan to copy ${active.Currency.code} wallet address`}\n          </h3>\n          <br />\n          <div className={styles.barcode}>\n            {QRCode({ text: btcWalletAddress, size: 300 })}\n          </div>\n          <br />\n          <div\n            className={styles.copy}\n            style={{ display: \"flex\", justifyContent: \"center\" }}\n          >\n            <span style={{ border: \"1px  solid grey\", padding: 8 }}>\n              <small>{btcWalletAddress}</small>\n            </span>\n            <Clipboard\n              style={{ padding: 8 }}\n              component=\"div\"\n              data-clipboard-text={btcWalletAddress}\n              onSuccess={() =>\n                notification.success({\n                  message: `${active.Currency.code} address copied`,\n                  duration: 3,\n                })\n              }\n            >\n              <Copy title=\"copy btc address\" />\n            </Clipboard>\n          </div>\n          <br />\n          <div className={styles.info}>\n            Current exchange rate:{\" \"}\n            {Money(\n              (btcRates && btcRates.tickers && btcRates.tickers.BTCNGN.sell) ||\n                0,\n              \"NGN\"\n            )}\n            /1{active.Currency.code}\n          </div>\n          {error && <div className={styles.error}>error message</div>}\n        </div>\n      </div>\n    </div>\n  );\n}; // done\n","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/billPayment.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/withdrawals.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/home/components.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/buyGiftCard.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/actions/pairTwoPair.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Modals/withdraw-modal-Initial.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Modals/transaction-info-modal.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/bills/components.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Modals/transaction-info-modal-big.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/rate/components.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/landing/components.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/sell-giftcard/components.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/on-boarding/components.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Modals/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/BillPayment.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/WithdrawalsService.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/BuyGiftCard.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/redux/services/PairTwoPairService.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Modals/withdrawal-modal-3rd.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Modals/withdraw-modal-personal.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/buy-coin/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/upload/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/buy-coin/components.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/upload/upload.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Modals/addWalletModal.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/components/Modals/addCryptoWallet.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/crypto/index.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/home/components2.js",[],"/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/transactions/fiatTrans.js",["428","429","430","431","432","433","434","435"],"import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Tabs } from \"antd\";\nimport { DashboardLayout } from \"../../components/layout\";\n// import { TableSort } from \"../../assets/svg\";\nimport { Money } from \"../../utils/helper\";\nimport styles from \"../styles.module.scss\";\nimport {\n  DepositsTab,\n  WithdrawalsTab,\n  GiftCardTradesTab,\n  BillPaymentTab,\n  PTwoPTab,\n  BuyGiftCardTab,\n} from \"./components\";\nimport TransactionModalBig, {\n  TransactionModalBillPayment,\n  TransactionModalBuyGiftCard,\n  TransactionModalP2P\n} from \"../../components/Modals/transaction-info-modal-big\";\nimport TransactionModal from \"../../components/Modals/transaction-info-modal\";\nimport {\n  getGiftCardTransactionHistory,\n  getGiftCardTransaction,\n} from \"../../redux/actions/giftCard\";\nimport {\n  getAllUserWithdrawalDetails,\n  getWithdrawalDetailsById,\n} from \"../../redux/actions/withdrawals\";\nimport {\n  getAllUserPaymentDetails,\n  getPaymentDetailsById,\n} from \"../../redux/actions/payment\";\nimport {\n  getAllUserBillPaymentDetails,\n  getBillPaymentDetailsById,\n} from \"../../redux/actions/billPayment\";\nimport {\n  getAllUserFiatP2PTransferDetails,\n  getFiatP2PTransferById,\n} from \"../../redux/actions/pairTwoPair\";\nimport { ArrowLeftOutlined } from \"@ant-design/icons\";\n\nconst Transactions = ({\n  goBack,\n  depositTransaction,\n  BillPaymentTrans,\n  pairTwoPairFiatTrans,\n  withdrawalTrans,\n  getWithdrawalTrans,\n  getDepositTrans,\n  getBillPaymentTrans,\n  getP2PTrans,\n  getP2PTransById,\n  getDepositById,\n  getBillPaymentById,\n  getWithdrawalById,\n  viewWithdrawalTrans,\n  viewDepositTrans,\n  viewBillPaymentTrans,\n  viewP2PTrans,\n  viewBuyGiftCardTrans,\n}) => {\n  const [depositTransDetails, setDepositTransDetails] = React.useState(false);\n  const [giftCardTransDetails, setGiftCardTransDetails] = React.useState(false);\n  const [billPaymentDetails, setBillPaymentDetails] = React.useState(false);\n  const [buyGiftCardDetails, setBuyGiftCardDetails] = React.useState(false);\n  const [\n    pairTwoPairFiatTransDetails,\n    setPairTwoPairFiatTransDetails,\n  ] = React.useState(false);\n  const [withdrawalTransDetails, setWithdrawalTransDetails] = React.useState(\n    false\n  );\n  const { TabPane } = Tabs;\n  function callback(key) {\n    console.log(key);\n  }\n  return (\n    <>\n    <div onClick={()=> goBack(true)} style={{display:\"flex\", flexDirection:\"row\", alignItems:'center'}}>\n      <ArrowLeftOutlined style={{fontSize:20}}/>\n      <span className={styles.gitcard__top__title}> Fiat Transactions</span>\n    </div>\n      {/* <span className={styles.gitcard__top__title}> Fiat Transactions</span> */}\n      {viewP2PTrans && (\n        <TransactionModalP2P\n          dateData={viewP2PTrans.createdAt}\n          amountSent={Money(viewP2PTrans?.amount_sent_object?.value, viewP2PTrans?.amountSent?.currency)}\n          amountReceived={Money(viewP2PTrans?.amount_received_object?.value, viewP2PTrans?.amountReceived?.currency)}\n          status={viewP2PTrans.status}\n          reference={viewP2PTrans.reference}\n          rate={`Transfer at ${viewP2PTrans.rate.value}`}\n          transferNote={viewP2PTrans?.note}\n          setIsModalVisible={setPairTwoPairFiatTransDetails}\n          isModalVisible={pairTwoPairFiatTransDetails}\n        />\n      )}\n      {viewBuyGiftCardTrans && (\n        <TransactionModalBuyGiftCard\n          dateData={viewBuyGiftCardTrans.createdAt}\n          amount={viewBuyGiftCardTrans.amount}\n          status={viewBuyGiftCardTrans.status}\n          cardValue={viewBuyGiftCardTrans?.cardDetails?.cardValue}\n          reference={viewBuyGiftCardTrans.reference}\n          referenceCurrency={viewBuyGiftCardTrans.referenceCurrency}\n          quan={viewBuyGiftCardTrans?.cardDetails?.quantity}\n          setIsModalVisible={setBuyGiftCardDetails}\n          isModalVisible={buyGiftCardDetails}\n          cardCurrency={viewBuyGiftCardTrans?.cardDetails?.cardCurrency}\n          cardSlug={viewBuyGiftCardTrans.cardSlug}\n          estimatedUSDValue={viewBuyGiftCardTrans?.cardDetails?.estimatedUSDValue}\n        />\n      )}\n      {viewDepositTrans && (\n        <TransactionModal\n          title={\"Deposit\"}\n          dateData={viewDepositTrans.created_at}\n          amount={viewDepositTrans.amount}\n          status={viewDepositTrans.status}\n          reference={viewDepositTrans.reference}\n          setIsModalVisible={setDepositTransDetails}\n          isModalVisible={depositTransDetails}\n        />\n      )}\n      {viewWithdrawalTrans && (\n        <TransactionModal\n          title={\"Withdrawal\"}\n          dateData={viewWithdrawalTrans.created_at}\n          amount={viewWithdrawalTrans.amount}\n          status={viewWithdrawalTrans.status}\n          reference={viewWithdrawalTrans.reference}\n          setIsModalVisible={setWithdrawalTransDetails}\n          isModalVisible={withdrawalTransDetails}\n        />\n      )}\n      {viewBillPaymentTrans && (\n        <TransactionModalBillPayment\n          setIsModalVisible={setBillPaymentDetails}\n          isModalVisible={billPaymentDetails}\n          dateData={viewBillPaymentTrans.created_at}\n          amount={viewBillPaymentTrans.amount}\n          status={viewBillPaymentTrans.status}\n          reference={viewBillPaymentTrans.reference}\n          title={\"Bill Payment\"}\n          transactionFee={viewBillPaymentTrans.transactionFee}\n          id={viewBillPaymentTrans.id}\n          referenceCurrency={viewBillPaymentTrans.referenceCurrency}\n          details={viewBillPaymentTrans.details}\n        />\n      )}\n      <div className={styles.transactions}>\n        <div className={styles.transactions__top}>\n          <div className={styles.transactions__top__sort}></div>\n        </div>\n        <div className={styles.transactions__tab}>\n          <Tabs defaultActiveKey=\"1\" onChange={callback}>\n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item__first}>\n                  <span>Deposits</span>\n                </div>\n              }\n              key=\"1\"\n            >\n              <DepositsTab\n                fetchTrans={getDepositTrans}\n                transaction={depositTransaction}\n                handleAction={(id) => {\n                  getDepositById({ transactionId: id });\n                  setDepositTransDetails(true);\n                }}\n              />\n            </TabPane>\n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>Withdrawals</span>\n                </div>\n              }\n              key=\"2\"\n            >\n              <WithdrawalsTab\n                fetchTrans={getWithdrawalTrans}\n                transaction={withdrawalTrans}\n                handleAction={(id) => {\n                  getWithdrawalById({ transactionId: id });\n                  setWithdrawalTransDetails(true);\n                }}\n              />\n            </TabPane>\n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>Bill Payment</span>\n                </div>\n              }\n              key=\"3\"\n            >\n              <BillPaymentTab\n                fetchTrans={getBillPaymentTrans}\n                transaction={BillPaymentTrans}\n                handleAction={(id) => {\n                  getBillPaymentById({ transactionId: id });\n                  setBillPaymentDetails(true);\n                }}\n              />\n            </TabPane>\n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>P2P Fiat Transactions</span>\n                </div>\n              }\n              key=\"6\"\n            >\n              <PTwoPTab\n                fetchTrans={getP2PTrans}\n                transaction={pairTwoPairFiatTrans}\n                handleAction={(id) => {\n                  getP2PTransById({ transactionId: id });\n                  setPairTwoPairFiatTransDetails(true);\n                }}\n              />\n            </TabPane>\n          </Tabs>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  user: state.user.user,\n  btcRates: state.btc.btcTicker,\n  balance: state.btc.balance,\n  btcTrans: state.btc.BTCTransaction,\n  buyTrans: state.btc.buyTransaction,\n  sellTrans: state.btc.sellTransaction,\n  sendTrans: state.btc.sendTransaction,\n  p2pTrans: state.btc.p2pTransaction,\n  BillPaymentTrans: state.billPayment.BillPaymentTransaction,\n  pairTwoPairFiatTrans: state.pairTwoPair.pairTwoPairFiatTransaction,\n  withdrawalTrans: state.withdrawals.WithdrawalTransaction,\n  depositTransaction: state.payment.DepositTransaction,\n  viewP2PTrans: state.pairTwoPair.pairTwoPairFiatTransactionDetails && state.pairTwoPair.pairTwoPairFiatTransactionDetails.transaction,\n  viewGiftCardTrans: state.giftCard.giftCardDetails,\n  viewWithdrawalTrans: state.withdrawals.withdrawalDetails,\n  viewDepositTrans: state.payment.depositTransactionDetails,\n  viewBillPaymentTrans: state.billPayment.billPaymentDetails,\n});\n\n// viewBTCTrans,\n//   viewBuyTrans,\n//   viewSellTrans,\n//   viewSendTrans,\n//   viewP2PCryptoTrans,\nconst mapDispatchToProps = (dispatch) => ({\n  getWithdrawalTrans: (data) => {\n    dispatch(getAllUserWithdrawalDetails(data));\n  },\n  getDepositTrans: (data) => {\n    dispatch(getAllUserPaymentDetails(data));\n  },\n  getBillPaymentTrans: (data) => {\n    dispatch(getAllUserBillPaymentDetails(data));\n  },\n  getP2PTrans: (data) => {\n    dispatch(getAllUserFiatP2PTransferDetails(data));\n  },\n  getP2PTransById: (data) => {\n    dispatch(getFiatP2PTransferById(data));\n  },\n  getBillPaymentById: (data) => {\n    dispatch(getBillPaymentDetailsById(data));\n  },\n  getWithdrawalById: (data) => {\n    dispatch(getWithdrawalDetailsById(data));\n  },\n  getDepositById: (data) => {\n    dispatch(getPaymentDetailsById(data));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Transactions);\n","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/transactions/cryptoTrans.js",["436","437","438","439","440","441","442"],"import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Tabs } from \"antd\";\nimport { DashboardLayout } from \"../../components/layout\";\n// import { TableSort } from \"../../assets/svg\";\nimport { Money } from \"../../utils/helper\";\nimport styles from \"../styles.module.scss\";\nimport {\n  DepositsTab,\n  WithdrawalsTab,\n  GiftCardTradesTab,\n  BTCTradesTab,\n  BillPaymentTab,\n  PTwoPTab,\n  BuyGiftCardTab,\n} from \"./components\";\nimport TransactionModalBig, {\n  TransactionModalBTC,\n  TransactionModalBillPayment,\n  TransactionModalBuyGiftCard,\n  TransactionModalP2P\n} from \"../../components/Modals/transaction-info-modal-big\";\nimport TransactionModal from \"../../components/Modals/transaction-info-modal\";\nimport {\n  getBTCTransactionHistory,\n  getBTCWalletDetailsById,\n  getCryptoBuyTransactionDetails,\n  getCryptoBuyTransactionHistory,\n  getCryptoP2PTransactionDetails,\n  getCryptoP2PTransactionHistory,\n  getCryptoSellTransactionDetails,\n  getCryptoSellTransactionHistory,\n  getCryptoSendTransactionDetails,\n  getCryptoSendTransactionHistory,\n} from \"../../redux/actions/btc\";\nimport {\n  getGiftCardTransactionHistory,\n  getGiftCardTransaction,\n} from \"../../redux/actions/giftCard\";\nimport {\n  getAllUserWithdrawalDetails,\n  getWithdrawalDetailsById,\n} from \"../../redux/actions/withdrawals\";\nimport {\n  getAllUserPaymentDetails,\n  getPaymentDetailsById,\n} from \"../../redux/actions/payment\";\nimport {\n  getAllUserBillPaymentDetails,\n  getBillPaymentDetailsById,\n} from \"../../redux/actions/billPayment\";\nimport {\n  getAllUserFiatP2PTransferDetails,\n  getFiatP2PTransferById,\n} from \"../../redux/actions/pairTwoPair\";\nimport {\n  getAllBuyCardTransaction,\n  getBuyCardTransaction,\n} from \"../../redux/actions/buyGiftCard\";\nimport { ArrowLeftOutlined } from \"@ant-design/icons\";\n\nconst Transactions = ({\n  goBack,\n  btcTrans,\n  buyTrans,\n  sellTrans,\n  sendTrans,\n  p2pTrans,\n  depositTransaction,\n  BillPaymentTrans,\n  pairTwoPairFiatTrans,\n  withdrawalTrans,\n  giftCardTrans,\n  getBTCTrans,\n  getBuyCryptoTrans,\n  getSellCryptoTrans,\n  getSendCryptoTrans,\n  getP2PCryptoTrans,\n  getBuyCryptoById,\n  getSellCryptoById,\n  getSendCryptoById,\n  getP2PCryptoById,\n  getGiftCardTrans,\n  getWithdrawalTrans,\n  getDepositTrans,\n  getBillPaymentTrans,\n  getP2PTrans,\n  getP2PTransById,\n  getGiftCardById,\n  getDepositById,\n  getBTCById,\n  getBillPaymentById,\n  getWithdrawalById,\n  viewWithdrawalTrans,\n  viewDepositTrans,\n  viewGiftCardTrans,\n  viewBTCTrans,\n  viewBuyTrans,\n  viewSellTrans,\n  viewSendTrans,\n  viewP2PCryptoTrans,\n  viewBillPaymentTrans,\n  viewP2PTrans,\n  getBuyGiftCardTrans,\n  getBuyGiftCardTransById,\n  BuyGiftCardTrans,\n  viewBuyGiftCardTrans,\n}) => {\n  const [depositTransDetails, setDepositTransDetails] = React.useState(false);\n  const [btcTransDetails, setBtcTransDetails] = React.useState(false);\n  const [buyCryptoTransDetails, setBuyCryptoTransDetails] = React.useState(false);\n  const [sellCryptoTransDetails, setSellCryptoTransDetails] = React.useState(false);\n  const [sendCryptoTransDetails, setSendCryptoTransDetails] = React.useState(false);\n  const [p2pCryptoTransDetails, setP2PCryptoTransDetails] = React.useState(false);\n  const [giftCardTransDetails, setGiftCardTransDetails] = React.useState(false);\n  const [billPaymentDetails, setBillPaymentDetails] = React.useState(false);\n  const [buyGiftCardDetails, setBuyGiftCardDetails] = React.useState(false);\n  const [\n    pairTwoPairFiatTransDetails,\n    setPairTwoPairFiatTransDetails,\n  ] = React.useState(false);\n  const [withdrawalTransDetails, setWithdrawalTransDetails] = React.useState(\n    false\n  );\n  const { TabPane } = Tabs;\n  function callback(key) {\n    console.log(key);\n  }\n  return (\n    <>\n    <div onClick={()=> goBack(true)} style={{display:\"flex\", flexDirection:\"row\", alignItems:'center'}}>\n    <ArrowLeftOutlined style={{fontSize:20}}/>\n      <span className={styles.gitcard__top__title}>Crypto Transactions</span>\n    </div>\n      {/* <span className={styles.gitcard__top__title}> Fiat Transactions</span> */}\n      {viewP2PTrans && (\n        <TransactionModalP2P\n          dateData={viewP2PTrans.createdAt}\n          amountSent={Money(viewP2PTrans?.amount_sent_object?.value, viewP2PTrans?.amountSent?.currency)}\n          amountReceived={Money(viewP2PTrans?.amount_received_object?.value, viewP2PTrans?.amountReceived?.currency)}\n          status={viewP2PTrans.status}\n          reference={viewP2PTrans.reference}\n          rate={`Transfer at ${viewP2PTrans.rate.value}`}\n          transferNote={viewP2PTrans?.note}\n          setIsModalVisible={setPairTwoPairFiatTransDetails}\n          isModalVisible={pairTwoPairFiatTransDetails}\n        />\n      )}\n      {viewBuyGiftCardTrans && (\n        <TransactionModalBuyGiftCard\n          dateData={viewBuyGiftCardTrans.createdAt}\n          amount={viewBuyGiftCardTrans.amount}\n          status={viewBuyGiftCardTrans.status}\n          cardValue={viewBuyGiftCardTrans?.cardDetails?.cardValue}\n          reference={viewBuyGiftCardTrans.reference}\n          referenceCurrency={viewBuyGiftCardTrans.referenceCurrency}\n          quan={viewBuyGiftCardTrans?.cardDetails?.quantity}\n          setIsModalVisible={setBuyGiftCardDetails}\n          isModalVisible={buyGiftCardDetails}\n          cardCurrency={viewBuyGiftCardTrans?.cardDetails?.cardCurrency}\n          cardSlug={viewBuyGiftCardTrans.cardSlug}\n          estimatedUSDValue={viewBuyGiftCardTrans?.cardDetails?.estimatedUSDValue}\n        />\n      )}\n      {viewDepositTrans && (\n        <TransactionModal\n          title={\"Deposit\"}\n          dateData={viewDepositTrans.created_at}\n          amount={viewDepositTrans.amount}\n          status={viewDepositTrans.status}\n          reference={viewDepositTrans.reference}\n          setIsModalVisible={setDepositTransDetails}\n          isModalVisible={depositTransDetails}\n        />\n      )}\n      {viewBTCTrans && (\n        <TransactionModalBTC\n          setIsModalVisible={setBtcTransDetails}\n          isModalVisible={btcTransDetails}\n          type={viewBTCTrans.type}\n          status={viewBTCTrans.status}\n          dateData={viewBTCTrans.createdAt}\n          transactionType={viewBTCTrans.transactionType}\n          reference={viewBTCTrans.reference}\n          rate={viewBTCTrans.rate.amount}\n          amount={viewBTCTrans.amount}\n          address={viewBTCTrans.address}\n          quidaxTransactionId={viewBTCTrans.quidaxTransactionId}\n          txid={viewBTCTrans.txid}\n          transactionFee={viewBTCTrans.transactionFee}\n        />\n      )}\n      {viewBuyTrans && (\n        <TransactionModalBTC\n          setIsModalVisible={setBuyCryptoTransDetails}\n          isModalVisible={buyCryptoTransDetails}\n          type={viewBuyTrans.type}\n          status={viewBuyTrans.status}\n          dateData={viewBuyTrans.createdAt}\n          transactionType={viewBuyTrans.transactionType}\n          reference={viewBuyTrans.reference}\n          rate={viewBuyTrans.rate.amount}\n          amount={viewBuyTrans.amount}\n          address={viewBuyTrans.address}\n          quidaxTransactionId={viewBuyTrans.quidaxTransactionId}\n          txid={viewBuyTrans.txid}\n          transactionFee={viewBuyTrans.transactionFee}\n        />\n      )}\n      {viewSellTrans && (\n        <TransactionModalBTC\n          setIsModalVisible={setSellCryptoTransDetails}\n          isModalVisible={sellCryptoTransDetails}\n          type={viewSellTrans.type}\n          status={viewSellTrans.status}\n          dateData={viewSellTrans.createdAt}\n          transactionType={viewSellTrans.transactionType}\n          reference={viewSellTrans.reference}\n          rate={viewSellTrans.rate.amount}\n          amount={viewSellTrans.amount}\n          address={viewSellTrans.address}\n          quidaxTransactionId={viewSellTrans.quidaxTransactionId}\n          txid={viewSellTrans.txid}\n          transactionFee={viewSellTrans.transactionFee}\n        />\n      )}\n       {viewSendTrans && (\n        <TransactionModalBTC\n          setIsModalVisible={setSendCryptoTransDetails}\n          isModalVisible={sendCryptoTransDetails}\n          type={viewSendTrans.type}\n          status={viewSendTrans.status}\n          dateData={viewSendTrans.createdAt}\n          transactionType={viewSendTrans.transactionType}\n          reference={viewSendTrans.reference}\n          rate={viewSendTrans.rate.amount}\n          amount={viewSendTrans.amount}\n          address={viewSendTrans.address}\n          quidaxTransactionId={viewSendTrans.quidaxTransactionId}\n          txid={viewSendTrans.txid}\n          transactionFee={viewSendTrans.transactionFee}\n        />\n      )}\n      {viewP2PCryptoTrans && (\n        <TransactionModalBTC\n          setIsModalVisible={setP2PCryptoTransDetails}\n          isModalVisible={p2pCryptoTransDetails}\n          type={viewP2PCryptoTrans.type}\n          status={viewP2PCryptoTrans.status}\n          dateData={viewP2PCryptoTrans.createdAt}\n          transactionType={viewP2PCryptoTrans.transactionType}\n          reference={viewP2PCryptoTrans.reference}\n          rate={viewP2PCryptoTrans.rate.amount}\n          amount={viewP2PCryptoTrans.amount}\n          address={viewP2PCryptoTrans.address}\n          quidaxTransactionId={viewP2PCryptoTrans.quidaxTransactionId}\n          txid={viewP2PCryptoTrans.txid}\n          transactionFee={viewP2PCryptoTrans.transactionFee}\n        />\n      )}\n      {viewGiftCardTrans && (\n        <TransactionModalBig\n          title=\"Gift Card\"\n          rate={viewGiftCardTrans.rate.amount}\n          Qua={viewGiftCardTrans.comments}\n          id={viewGiftCardTrans.id}\n          cardCode={viewGiftCardTrans.cardCode}\n          images={viewGiftCardTrans.images}\n          dateData={viewGiftCardTrans.created_at}\n          amount={viewGiftCardTrans.amount}\n          status={viewGiftCardTrans.status}\n          reference={viewGiftCardTrans.reference}\n          setIsModalVisible={setGiftCardTransDetails}\n          isModalVisible={giftCardTransDetails}\n        />\n      )}\n      {viewWithdrawalTrans && (\n        <TransactionModal\n          title={\"Withdrawal\"}\n          dateData={viewWithdrawalTrans.created_at}\n          amount={viewWithdrawalTrans.amount}\n          status={viewWithdrawalTrans.status}\n          reference={viewWithdrawalTrans.reference}\n          setIsModalVisible={setWithdrawalTransDetails}\n          isModalVisible={withdrawalTransDetails}\n        />\n      )}\n      {viewBillPaymentTrans && (\n        <TransactionModalBillPayment\n          setIsModalVisible={setBillPaymentDetails}\n          isModalVisible={billPaymentDetails}\n          dateData={viewBillPaymentTrans.created_at}\n          amount={viewBillPaymentTrans.amount}\n          status={viewBillPaymentTrans.status}\n          reference={viewBillPaymentTrans.reference}\n          title={\"Bill Payment\"}\n          transactionFee={viewBillPaymentTrans.transactionFee}\n          id={viewBillPaymentTrans.id}\n          referenceCurrency={viewBillPaymentTrans.referenceCurrency}\n          details={viewBillPaymentTrans.details}\n        />\n      )}\n      <div className={styles.transactions}>\n        <div className={styles.transactions__top}>\n          <div className={styles.transactions__top__sort}></div>\n        </div>\n        <div className={styles.transactions__tab}>\n          <Tabs defaultActiveKey=\"1\" onChange={callback}>\n            {/* <TabPane\n              tab={\n                <div className={styles.transactions__tab__item__first}>\n                  <span>Deposits</span>\n                </div>\n              }\n              key=\"1\"\n            >\n              <DepositsTab\n                fetchTrans={getDepositTrans}\n                transaction={depositTransaction}\n                handleAction={(id) => {\n                  getDepositById({ transactionId: id });\n                  setDepositTransDetails(true);\n                }}\n              />\n            </TabPane>\n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>Withdrawals</span>\n                </div>\n              }\n              key=\"2\"\n            >\n              <WithdrawalsTab\n                fetchTrans={getWithdrawalTrans}\n                transaction={withdrawalTrans}\n                handleAction={(id) => {\n                  getWithdrawalById({ transactionId: id });\n                  setWithdrawalTransDetails(true);\n                }}\n              />\n            </TabPane>\n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>Bill Payment</span>\n                </div>\n              }\n              key=\"3\"\n            >\n              <BillPaymentTab\n                fetchTrans={getBillPaymentTrans}\n                transaction={BillPaymentTrans}\n                handleAction={(id) => {\n                  getBillPaymentById({ transactionId: id });\n                  setBillPaymentDetails(true);\n                }}\n              />\n            </TabPane> */}\n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>Buy Crypto Transactions</span>\n                </div>\n              }\n              key=\"4\"\n            >\n              <BTCTradesTab\n                fetchTrans={getBuyCryptoTrans}\n                transaction={buyTrans}\n                handleAction={(id) => {\n                  getBuyCryptoById({ transactionId: id });\n                  setBuyCryptoTransDetails(true);\n                }}\n              />\n            </TabPane>\n\n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>Sell Crypto Transactions</span>\n                </div>\n              }\n              key=\"5\"\n            >\n              <BTCTradesTab\n                fetchTrans={getSellCryptoTrans}\n                transaction={sellTrans}\n                handleAction={(id) => {\n                  getSellCryptoById({ transactionId: id });\n                  setSellCryptoTransDetails(true);\n                }}\n              />\n            </TabPane>\n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>Send Crypto Transactions</span>\n                </div>\n              }\n              key=\"6\"\n            >\n              <BTCTradesTab\n                fetchTrans={getSendCryptoTrans}\n                transaction={sendTrans}\n                handleAction={(id) => {\n                  getSendCryptoById({ transactionId: id });\n                  setSendCryptoTransDetails(true);\n                }}\n              />\n            </TabPane>\n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>P2P Crypto Transactions</span>\n                </div>\n              }\n              key=\"7\"\n            >\n              <BTCTradesTab\n                fetchTrans={getP2PCryptoTrans}\n                transaction={p2pTrans}\n                handleAction={(id) => {\n                  getP2PCryptoById({ transactionId: id });\n                  setP2PCryptoTransDetails(true);\n                }}\n              />\n            </TabPane>\n            \n            {/* <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>Sell GiftCard Transactions</span>\n                </div>\n              }\n              key=\"8\"\n            >\n              <GiftCardTradesTab\n                fetchTrans={getGiftCardTrans}\n                transaction={giftCardTrans}\n                handleAction={(id) => {\n                  getGiftCardById({ transactionId: id });\n                  setGiftCardTransDetails(true);\n                }}\n              />\n            </TabPane>\n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>Buy GiftCard Transactions</span>\n                </div>\n              }\n              key=\"9\"\n            >\n              <BuyGiftCardTab\n                fetchTrans={getBuyGiftCardTrans}\n                transaction={BuyGiftCardTrans}\n                handleAction={(id) => {\n                  getBuyGiftCardTransById({ transactionId: id });\n                  setBuyGiftCardDetails(true);\n                }}\n              />\n            </TabPane>\n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>P2P Fiat Transactions</span>\n                </div>\n              }\n              key=\"10\"\n            >\n              <PTwoPTab\n                fetchTrans={getP2PTrans}\n                transaction={pairTwoPairFiatTrans}\n                handleAction={(id) => {\n                  getP2PTransById({ transactionId: id });\n                  setPairTwoPairFiatTransDetails(true);\n                }}\n              />\n            </TabPane>\n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>P2P Crypto Transactions</span>\n                </div>\n              }\n              key=\"11\"\n            >\n              <PTwoPTab\n                fetchTrans={getP2PTrans}\n                transaction={pairTwoPairFiatTrans}\n                handleAction={(id) => {\n                  getP2PTransById({ transactionId: id });\n                  setPairTwoPairFiatTransDetails(true);\n                }}\n              />\n            </TabPane> */}\n          </Tabs>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  user: state.user.user,\n  btcRates: state.btc.btcTicker,\n  balance: state.btc.balance,\n  btcTrans: state.btc.BTCTransaction,\n  buyTrans: state.btc.buyTransaction,\n  sellTrans: state.btc.sellTransaction,\n  sendTrans: state.btc.sendTransaction,\n  p2pTrans: state.btc.p2pTransaction,\n  giftCardTrans: state.giftCard.GiftCardTransaction,\n  BillPaymentTrans: state.billPayment.BillPaymentTransaction,\n  BuyGiftCardTrans: state.buyGiftCard.buyGiftCardTransaction,\n  pairTwoPairFiatTrans: state.pairTwoPair.pairTwoPairFiatTransaction,\n  withdrawalTrans: state.withdrawals.WithdrawalTransaction,\n  depositTransaction: state.payment.DepositTransaction,\n  viewP2PTrans: state.pairTwoPair.pairTwoPairFiatTransactionDetails && state.pairTwoPair.pairTwoPairFiatTransactionDetails.transaction,\n  viewBTCTrans: state.btc.btcDetails,\n  viewBuyTrans: state.btc.buyDetails,\n  viewSellTrans: state.btc.sellDetails,\n  viewSendTrans: state.btc.sendDetails,\n  viewP2PCryptoTrans: state.btc.p2pDetails,\n  viewGiftCardTrans: state.giftCard.giftCardDetails,\n  viewWithdrawalTrans: state.withdrawals.withdrawalDetails,\n  viewDepositTrans: state.payment.depositTransactionDetails,\n  viewBillPaymentTrans: state.billPayment.billPaymentDetails,\n  viewBuyGiftCardTrans: state.buyGiftCard.buyGiftCardTransactionDetails,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getBTCTrans: (data) => {\n    dispatch(getBTCTransactionHistory(data));\n  },\n  getBuyCryptoTrans: (data) => {\n    dispatch(getCryptoBuyTransactionHistory(data))\n  },\n  getSellCryptoTrans:(data) => {\n    dispatch(getCryptoSellTransactionHistory(data))\n  },\n  getSendCryptoTrans:(data) => {\n    dispatch(getCryptoSendTransactionHistory(data))\n  },\n  getP2PCryptoTrans:(data) => {\n    dispatch(getCryptoP2PTransactionHistory(data))\n  },\n  getBuyCryptoById:(data) => {\n    dispatch(getCryptoBuyTransactionDetails(data))\n  },\n  getSellCryptoById:(data) => {\n    dispatch(getCryptoSellTransactionDetails(data))\n  },\n  getSendCryptoById:(data) => {\n    dispatch(getCryptoSendTransactionDetails(data))\n  },\n  getP2PCryptoById:(data)=>{\n    dispatch(getCryptoP2PTransactionDetails(data))\n  },\n  getGiftCardTrans: (data) => {\n    dispatch(getGiftCardTransactionHistory(data));\n  },\n  getWithdrawalTrans: (data) => {\n    dispatch(getAllUserWithdrawalDetails(data));\n  },\n  getDepositTrans: (data) => {\n    dispatch(getAllUserPaymentDetails(data));\n  },\n  getBillPaymentTrans: (data) => {\n    dispatch(getAllUserBillPaymentDetails(data));\n  },\n  getP2PTrans: (data) => {\n    dispatch(getAllUserFiatP2PTransferDetails(data));\n  },\n  getBuyGiftCardTrans: (data) => {\n    dispatch(getAllBuyCardTransaction(data));\n  },\n  getBuyGiftCardTransById: (data) => {\n    dispatch(getBuyCardTransaction(data));\n  },\n  getP2PTransById: (data) => {\n    dispatch(getFiatP2PTransferById(data));\n  },\n  getBillPaymentById: (data) => {\n    dispatch(getBillPaymentDetailsById(data));\n  },\n  getBTCById: (data) => {\n    dispatch(getBTCWalletDetailsById(data));\n  },\n  getGiftCardById: (data) => {\n    dispatch(getGiftCardTransaction(data));\n  },\n  getWithdrawalById: (data) => {\n    dispatch(getWithdrawalDetailsById(data));\n  },\n  getDepositById: (data) => {\n    dispatch(getPaymentDetailsById(data));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Transactions);\n","/Users/bluehouse/Deskstop/Reactjs/flip/flip-web-user-end/src/pages/transactions/giftCardTrans.js",["443","444","445","446","447","448","449","450","451"],"import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Tabs } from \"antd\";\nimport { DashboardLayout } from \"../../components/layout\";\n// import { TableSort } from \"../../assets/svg\";\nimport { Money } from \"../../utils/helper\";\nimport styles from \"../styles.module.scss\";\nimport {\n  DepositsTab,\n  WithdrawalsTab,\n  GiftCardTradesTab,\n  BillPaymentTab,\n  PTwoPTab,\n  BuyGiftCardTab,\n} from \"./components\";\nimport TransactionModalBig, {\n  TransactionModalBillPayment,\n  TransactionModalBuyGiftCard,\n  TransactionModalP2P\n} from \"../../components/Modals/transaction-info-modal-big\";\nimport TransactionModal from \"../../components/Modals/transaction-info-modal\";\nimport {\n  getGiftCardTransactionHistory,\n  getGiftCardTransaction,\n} from \"../../redux/actions/giftCard\";\nimport {\n  getAllBuyCardTransaction,\n  getBuyCardTransaction,\n} from \"../../redux/actions/buyGiftCard\";\nimport { ArrowLeftOutlined } from \"@ant-design/icons\";\n\nconst Transactions = ({\n  goBack,\n  giftCardTrans,\n  getGiftCardTrans,\n  getGiftCardById,\n  viewGiftCardTrans,\n  getBuyGiftCardTrans,\n  getBuyGiftCardTransById,\n  BuyGiftCardTrans,\n  viewBuyGiftCardTrans,\n}) => {\n//   const [depositTransDetails, setDepositTransDetails] = React.useState(false);\n  const [giftCardTransDetails, setGiftCardTransDetails] = React.useState(false);\n//   const [billPaymentDetails, setBillPaymentDetails] = React.useState(false);\n  const [buyGiftCardDetails, setBuyGiftCardDetails] = React.useState(false);\n  const { TabPane } = Tabs;\n  function callback(key) {\n    console.log(key);\n  }\n  return (\n    <>\n    <div onClick={()=> goBack(true)} style={{display:\"flex\", flexDirection:\"row\", alignItems:'center'}}>\n      <ArrowLeftOutlined style={{fontSize:20}}/>\n      <span className={styles.gitcard__top__title}> Gift Card Transactions</span>\n    </div>\n      {/* <span className={styles.gitcard__top__title}> Fiat Transactions</span> */}\n      \n      {viewBuyGiftCardTrans && (\n        <TransactionModalBuyGiftCard\n          dateData={viewBuyGiftCardTrans.createdAt}\n          amount={viewBuyGiftCardTrans.amount}\n          status={viewBuyGiftCardTrans.status}\n          cardValue={viewBuyGiftCardTrans?.cardDetails?.cardValue}\n          reference={viewBuyGiftCardTrans.reference}\n          referenceCurrency={viewBuyGiftCardTrans.referenceCurrency}\n          quan={viewBuyGiftCardTrans?.cardDetails?.quantity}\n          setIsModalVisible={setBuyGiftCardDetails}\n          isModalVisible={buyGiftCardDetails}\n          cardCurrency={viewBuyGiftCardTrans?.cardDetails?.cardCurrency}\n          cardSlug={viewBuyGiftCardTrans.cardSlug}\n          estimatedUSDValue={viewBuyGiftCardTrans?.cardDetails?.estimatedUSDValue}\n        />\n      )}\n      \n      {viewGiftCardTrans && (\n        <TransactionModalBig\n          title=\"Gift Card\"\n          rate={viewGiftCardTrans.rate.amount}\n          Qua={viewGiftCardTrans.comments}\n          id={viewGiftCardTrans.id}\n          cardCode={viewGiftCardTrans.cardCode}\n          images={viewGiftCardTrans.images}\n          dateData={viewGiftCardTrans.created_at}\n          amount={viewGiftCardTrans.amount}\n          status={viewGiftCardTrans.status}\n          reference={viewGiftCardTrans.reference}\n          setIsModalVisible={setGiftCardTransDetails}\n          isModalVisible={giftCardTransDetails}\n        />\n      )}\n      <div className={styles.transactions}>\n        <div className={styles.transactions__top}>\n          <div className={styles.transactions__top__sort}></div>\n        </div>\n        <div className={styles.transactions__tab}>\n          <Tabs defaultActiveKey=\"1\" onChange={callback}>\n            \n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>Sell GiftCard Transactions</span>\n                </div>\n              }\n              key=\"4\"\n            >\n              <GiftCardTradesTab\n                fetchTrans={getGiftCardTrans}\n                transaction={giftCardTrans}\n                handleAction={(id) => {\n                  getGiftCardById({ transactionId: id });\n                  setGiftCardTransDetails(true);\n                }}\n              />\n            </TabPane>\n            <TabPane\n              tab={\n                <div className={styles.transactions__tab__item}>\n                  <span>Buy GiftCard Transactions</span>\n                </div>\n              }\n              key=\"5\"\n            >\n              <BuyGiftCardTab\n                fetchTrans={getBuyGiftCardTrans}\n                transaction={BuyGiftCardTrans}\n                handleAction={(id) => {\n                  getBuyGiftCardTransById({ transactionId: id });\n                  setBuyGiftCardDetails(true);\n                }}\n              />\n            </TabPane>\n          </Tabs>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  user: state.user.user,\n  balance: state.btc.balance,\n  giftCardTrans: state.giftCard.GiftCardTransaction,\n  BuyGiftCardTrans: state.buyGiftCard.buyGiftCardTransaction,\n  withdrawalTrans: state.withdrawals.WithdrawalTransaction,\n  viewGiftCardTrans: state.giftCard.giftCardDetails,\n  viewBuyGiftCardTrans: state.buyGiftCard.buyGiftCardTransactionDetails,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  getGiftCardTrans: (data) => {\n    dispatch(getGiftCardTransactionHistory(data));\n  },\n  getBuyGiftCardTrans: (data) => {\n    dispatch(getAllBuyCardTransaction(data));\n  },\n  getBuyGiftCardTransById: (data) => {\n    dispatch(getBuyCardTransaction(data));\n  },\n  getGiftCardById: (data) => {\n    dispatch(getGiftCardTransaction(data));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Transactions);\n",{"ruleId":"452","replacedBy":"453"},{"ruleId":"454","replacedBy":"455"},{"ruleId":"456","severity":1,"message":"457","line":407,"column":35,"nodeType":"458","messageId":"459","endLine":407,"endColumn":37},{"ruleId":"460","severity":1,"message":"461","line":57,"column":6,"nodeType":"462","endLine":57,"endColumn":19,"suggestions":"463"},{"ruleId":"460","severity":1,"message":"461","line":61,"column":6,"nodeType":"462","endLine":61,"endColumn":31,"suggestions":"464"},{"ruleId":"465","severity":1,"message":"466","line":9,"column":3,"nodeType":"467","messageId":"468","endLine":9,"endColumn":10},{"ruleId":"465","severity":1,"message":"466","line":4,"column":10,"nodeType":"467","messageId":"468","endLine":4,"endColumn":17},{"ruleId":"465","severity":1,"message":"469","line":71,"column":10,"nodeType":"467","messageId":"468","endLine":71,"endColumn":26},{"ruleId":"465","severity":1,"message":"470","line":71,"column":28,"nodeType":"467","messageId":"468","endLine":71,"endColumn":43},{"ruleId":"465","severity":1,"message":"471","line":72,"column":10,"nodeType":"467","messageId":"468","endLine":72,"endColumn":26},{"ruleId":"465","severity":1,"message":"472","line":72,"column":28,"nodeType":"467","messageId":"468","endLine":72,"endColumn":43},{"ruleId":"465","severity":1,"message":"473","line":4,"column":10,"nodeType":"467","messageId":"468","endLine":4,"endColumn":25},{"ruleId":"465","severity":1,"message":"474","line":11,"column":3,"nodeType":"467","messageId":"468","endLine":11,"endColumn":20},{"ruleId":"465","severity":1,"message":"475","line":14,"column":3,"nodeType":"467","messageId":"468","endLine":14,"endColumn":17},{"ruleId":"465","severity":1,"message":"476","line":16,"column":8,"nodeType":"467","messageId":"468","endLine":16,"endColumn":27},{"ruleId":"465","severity":1,"message":"477","line":23,"column":3,"nodeType":"467","messageId":"468","endLine":23,"endColumn":32},{"ruleId":"465","severity":1,"message":"478","line":24,"column":3,"nodeType":"467","messageId":"468","endLine":24,"endColumn":25},{"ruleId":"465","severity":1,"message":"479","line":65,"column":10,"nodeType":"467","messageId":"468","endLine":65,"endColumn":30},{"ruleId":"465","severity":1,"message":"480","line":65,"column":32,"nodeType":"467","messageId":"468","endLine":65,"endColumn":55},{"ruleId":"465","severity":1,"message":"473","line":4,"column":10,"nodeType":"467","messageId":"468","endLine":4,"endColumn":25},{"ruleId":"465","severity":1,"message":"481","line":9,"column":3,"nodeType":"467","messageId":"468","endLine":9,"endColumn":14},{"ruleId":"465","severity":1,"message":"482","line":10,"column":3,"nodeType":"467","messageId":"468","endLine":10,"endColumn":17},{"ruleId":"465","severity":1,"message":"474","line":11,"column":3,"nodeType":"467","messageId":"468","endLine":11,"endColumn":20},{"ruleId":"465","severity":1,"message":"483","line":13,"column":3,"nodeType":"467","messageId":"468","endLine":13,"endColumn":17},{"ruleId":"465","severity":1,"message":"484","line":14,"column":3,"nodeType":"467","messageId":"468","endLine":14,"endColumn":11},{"ruleId":"465","severity":1,"message":"475","line":15,"column":3,"nodeType":"467","messageId":"468","endLine":15,"endColumn":17},{"ruleId":"465","severity":1,"message":"473","line":4,"column":10,"nodeType":"467","messageId":"468","endLine":4,"endColumn":25},{"ruleId":"465","severity":1,"message":"485","line":6,"column":10,"nodeType":"467","messageId":"468","endLine":6,"endColumn":15},{"ruleId":"465","severity":1,"message":"481","line":9,"column":3,"nodeType":"467","messageId":"468","endLine":9,"endColumn":14},{"ruleId":"465","severity":1,"message":"482","line":10,"column":3,"nodeType":"467","messageId":"468","endLine":10,"endColumn":17},{"ruleId":"465","severity":1,"message":"483","line":12,"column":3,"nodeType":"467","messageId":"468","endLine":12,"endColumn":17},{"ruleId":"465","severity":1,"message":"484","line":13,"column":3,"nodeType":"467","messageId":"468","endLine":13,"endColumn":11},{"ruleId":"465","severity":1,"message":"486","line":17,"column":3,"nodeType":"467","messageId":"468","endLine":17,"endColumn":30},{"ruleId":"465","severity":1,"message":"487","line":19,"column":3,"nodeType":"467","messageId":"468","endLine":19,"endColumn":22},{"ruleId":"465","severity":1,"message":"488","line":21,"column":8,"nodeType":"467","messageId":"468","endLine":21,"endColumn":24},"no-native-reassign",["489"],"no-negated-in-lhs",["490"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'active.Currency.code'. Either include it or remove the dependency array.","ArrayExpression",["491"],["492"],"no-unused-vars","'LogoNav' is defined but never used.","Identifier","unusedVar","'buy_btc_ghs_rate' is assigned a value but never used.","'setBtc_ghs_rate' is assigned a value but never used.","'buy_btc_ngn_rate' is assigned a value but never used.","'setBtc_ngn_rate' is assigned a value but never used.","'DashboardLayout' is defined but never used.","'GiftCardTradesTab' is defined but never used.","'BuyGiftCardTab' is defined but never used.","'TransactionModalBig' is defined but never used.","'getGiftCardTransactionHistory' is defined but never used.","'getGiftCardTransaction' is defined but never used.","'giftCardTransDetails' is assigned a value but never used.","'setGiftCardTransDetails' is assigned a value but never used.","'DepositsTab' is defined but never used.","'WithdrawalsTab' is defined but never used.","'BillPaymentTab' is defined but never used.","'PTwoPTab' is defined but never used.","'Money' is defined but never used.","'TransactionModalBillPayment' is defined but never used.","'TransactionModalP2P' is defined but never used.","'TransactionModal' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"493","fix":"494"},{"desc":"495","fix":"496"},"Update the dependencies array to be: [active.Currency.code, getBTCRates]",{"range":"497","text":"498"},"Update the dependencies array to be: [receiveBTC, getBTCRates, active.Currency.code]",{"range":"499","text":"500"},[1291,1304],"[active.Currency.code, getBTCRates]",[1402,1427],"[receiveBTC, getBTCRates, active.Currency.code]"]